"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
;
(() => {
    const defs = {};
    const resolved = {};
    // save original define and require
    window.___amd___OriginalDefine = window.define;
    window.___amd___OriginalRequire = window.require;
    if (!window.define && !window.require) {
        const define = (id, deps, factory) => {
            if (defs[id]) {
                throw new Error('Duplicate definition for ' + id);
            }
            defs[id] = [deps, factory];
        };
        define.amd = {
            bundle: true, // this implementation works only with bundled amd modules
            dynamic: false, // does not support dynamic or async loading
        };
        const require = (id) => {
            if (id === 'require')
                return require;
            if (id === 'exports')
                return {};
            if (resolved[id])
                return resolved[id];
            if (!defs[id]) {
                console.log(defs, id);
                throw new Error('No definition for ' + id);
            }
            const moduleExports = {};
            const deps = defs[id][0];
            const factory = defs[id][1];
            const args = deps.map(dep => {
                if (dep === 'exports') {
                    return moduleExports;
                }
                return require(dep);
            });
            factory.apply(null, args);
            return resolved[id] = moduleExports;
        };
        window.define = define;
        window.require = require;
    }
    window.___amd___requireResolver = () => {
        for (const id in defs) {
            if (defs.hasOwnProperty(id)) {
                const deps = defs[id][0];
                if (deps) {
                    deps.map(dep => {
                        if (dep !== 'require' &&
                            dep !== 'exports') {
                            if (!resolved.hasOwnProperty(dep)) {
                                require(dep);
                            }
                            if (!defs.hasOwnProperty(dep) &&
                                !resolved.hasOwnProperty(dep)) {
                                throw new Error(`Failed define '${id}' dep not found '${dep}'`);
                            }
                        }
                    });
                }
                require(id);
                delete defs[id];
            }
        }
        // return original define and require
        window.define = window.___amd___OriginalDefine;
        window.require = window.___amd___OriginalRequire;
        // clear
        delete window.___amd___requireResolver;
        delete window.___amd___OriginalDefine;
        delete window.___amd___OriginalRequire;
    };
})();
define("src/Shared/Types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("src/TerrainSystem/IZone", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("src/Shared/Compressor", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class Compressor {
        static _concatChunks(chunks, totalLength) {
            let position = 0;
            // Concatenate all Uint8Array chunks into a single ArrayBuffer
            const resultBuffer = new Uint8Array(totalLength);
            for (const chunk of chunks) {
                resultBuffer.set(chunk, position);
                position += chunk.length;
            }
            return resultBuffer.buffer;
        }
        static _getResult(reader) {
            return __awaiter(this, void 0, void 0, function* () {
                let totalLength = 0;
                const chunks = [];
                while (true) {
                    const { done, value } = yield reader.read();
                    if (done)
                        break;
                    chunks.push(value);
                    totalLength += value.length;
                }
                return this._concatChunks(chunks, totalLength);
            });
        }
        static compressBuffer(buffer_1) {
            return __awaiter(this, arguments, void 0, function* (buffer, format = 'gzip') {
                const compressedStream = new CompressionStream(format);
                const writer = compressedStream.writable.getWriter();
                writer.write(new Uint8Array(buffer));
                writer.close();
                const reader = compressedStream.readable.getReader();
                return this._getResult(reader);
            });
        }
        static decompressBuffer(buffer_1) {
            return __awaiter(this, arguments, void 0, function* (buffer, format = 'gzip') {
                const decompressedStream = new DecompressionStream(format);
                const reader = decompressedStream.readable.getReader();
                const writer = decompressedStream.writable.getWriter();
                // Write the compressed buffer to the writer
                writer.write(new Uint8Array(buffer));
                writer.close();
                return this._getResult(reader);
            });
        }
    }
    exports.default = Compressor;
});
define("src/TerrainSystem/AbsHeightMapFileIO", ["require", "exports", "src/Shared/Compressor"], function (require, exports, Compressor_mjs_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AbsHeightMapFileIO = exports.heightMapFileCompressedFormat = exports.factorSize = exports.heightMapVersion = void 0;
    Compressor_mjs_1 = __importDefault(Compressor_mjs_1);
    exports.heightMapVersion = 99;
    exports.factorSize = 3;
    exports.heightMapFileCompressedFormat = 'gzip';
    class AbsHeightMapFileIO {
        __readHeightFactor(view, headerSize, width, x, z) {
            const index = z * width + x;
            const r = view.getUint8(headerSize + index * exports.factorSize + 0);
            const g = view.getUint8(headerSize + index * exports.factorSize + 1);
            const b = view.getUint8(headerSize + index * exports.factorSize + 2);
            const scaled = (r << 16) | (g << 8) | b;
            const factor = scaled / 0xffffff;
            return factor;
        }
        __writeHeightFactor(view, headerSize, heightMap, x, z) {
            const index = z * heightMap.width + x;
            const factor = heightMap.getFactor(x, z);
            const scaled = Math.floor(factor * 0xffffff);
            const r = (scaled >> 16) & 0xff;
            const g = (scaled >> 8) & 0xff;
            const b = (scaled & 0xff);
            view.setUint8(headerSize + index * exports.factorSize + 0, r);
            view.setUint8(headerSize + index * exports.factorSize + 1, g);
            view.setUint8(headerSize + index * exports.factorSize + 2, b);
        }
        __importFromFile(heightMap, buffer, options) {
            return __awaiter(this, void 0, void 0, function* () {
                // TODO:
                // header version 99
                // headerByteSize, version, width, depth, maxHeight
                const nBuffer = yield Compressor_mjs_1.default.decompressBuffer(buffer, exports.heightMapFileCompressedFormat);
                const view = new DataView(nBuffer);
                const version = view.getUint32(1, true);
                if (version !== exports.heightMapVersion) {
                    console.warn('Height map version: %f no support.', version);
                    return null;
                }
                const headerSize = view.getUint8(0);
                const width = view.getUint32(5, true);
                const depth = view.getUint32(9, true);
                const maxHeight = view.getFloat32(13, true);
                const finalMaxHeight = (options === null || options === void 0 ? void 0 : options.adaptiveMaxHeight) ? heightMap.maxHeight : maxHeight;
                if (heightMap.width !== width ||
                    heightMap.depth !== depth &&
                        options &&
                        options.adaptiveWidthAndDepth) {
                    // TODO: its work for x^n + 1, z^n + 1
                    const factorX = (width - 1) / (heightMap.width - 1);
                    const factorZ = (depth - 1) / (heightMap.depth - 1);
                    for (let z = 0; z < depth; z += factorZ) {
                        for (let x = 0; x < width; x += factorX) {
                            // TODO: smooth for heightMap more import data
                            const factor = this.__readHeightFactor(view, headerSize, width, x | 0, z | 0);
                            const height = factor * finalMaxHeight;
                            heightMap.set(x / factorX, z / factorZ, height);
                        }
                    }
                }
                else {
                    for (let z = 0; (z < depth) && (z < heightMap.depth); z++) {
                        for (let x = 0; (x < width) && (x < heightMap.width); x++) {
                            const factor = this.__readHeightFactor(view, headerSize, width, x, z);
                            const height = factor * finalMaxHeight;
                            heightMap.set(x, z, height);
                        }
                    }
                }
                return {
                    width,
                    depth,
                    maxHeight
                };
            });
        }
        __exportToBuffer(heightMap) {
            return __awaiter(this, void 0, void 0, function* () {
                // TODO:
                // header version 99
                // headerByteSize, version, width, depth, maxHeight
                const headerSize = 1 + 4 + 4 + 4 + 4;
                const buffer = new ArrayBuffer(headerSize + exports.factorSize * heightMap.width * heightMap.depth);
                const view = new DataView(buffer);
                view.setUint8(0, headerSize);
                view.setUint32(1, exports.heightMapVersion, true);
                view.setUint32(5, heightMap.width, true);
                view.setUint32(9, heightMap.depth, true);
                view.setFloat32(13, heightMap.maxHeight, true);
                for (let z = 0; z < heightMap.depth; z++) {
                    for (let x = 0; x < heightMap.width; x++) {
                        this.__writeHeightFactor(view, headerSize, heightMap, x, z);
                    }
                }
                return Compressor_mjs_1.default.compressBuffer(buffer, exports.heightMapFileCompressedFormat);
            });
        }
    }
    exports.AbsHeightMapFileIO = AbsHeightMapFileIO;
    exports.default = AbsHeightMapFileIO;
});
define("src/TerrainSystem/AbsHeightMap", ["require", "exports", "src/TerrainSystem/AbsHeightMapFileIO"], function (require, exports, AbsHeightMapFileIO_mjs_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AbsHeightMap = void 0;
    AbsHeightMapFileIO_mjs_1 = __importDefault(AbsHeightMapFileIO_mjs_1);
    class AbsHeightMap extends AbsHeightMapFileIO_mjs_1.default {
        constructor() {
            super(...arguments);
            this.minX = 0;
            this.minZ = 0;
        }
        get maxX() { return this.width; }
        get maxZ() { return this.depth; }
        getHeightInterpolated(x, z) {
            const intX = x | 0;
            const intZ = z | 0;
            const x0z0 = this.get(intX, intZ);
            if ((intX + 1 >= this.width) ||
                (intZ + 1 >= this.depth)) {
                return x0z0;
            }
            const x1z0 = this.get(intX + 1, intZ);
            const x0z1 = this.get(intX, intZ + 1);
            const x1z1 = this.get(intX + 1, intZ + 1);
            const factorX = x - intX;
            const interpolatedBottom = (x1z0 - x0z0) * factorX + x0z0;
            const interpolatedTop = (x1z1 - x0z1) * factorX + x0z1;
            const factorZ = z - intZ;
            const finalHeight = (interpolatedTop - interpolatedBottom) * factorZ + interpolatedBottom;
            return finalHeight;
        }
        substract(x, z, value) {
            return this.append(x, z, -value);
        }
        divide(x, z, value, heightIfZero = 0) {
            return this.multiply(x, z, 1 / value, heightIfZero);
        }
        fromFile(buffer, options) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield this.__importFromFile(this, buffer, options);
            });
        }
        toFile() {
            return __awaiter(this, void 0, void 0, function* () {
                const buffer = yield this.__exportToBuffer(this);
                return new Blob([buffer], { type: "application/octet-stream" });
            });
        }
        toBuffer(buffer) {
            const width = this.width;
            for (let z = 0; z < this.depth; z++) {
                for (let x = 0; x < this.width; x++) {
                    const h = this.get(x, z);
                    const v = h / this.maxHeight * 255;
                    const pos = (x + z * width) * 4;
                    buffer[pos] = v;
                    buffer[pos + 1] = v;
                    buffer[pos + 2] = v;
                    buffer[pos + 3] = 255;
                }
            }
        }
        toCanvas() {
            const canvas = document.createElement('canvas');
            const width = this.width;
            const height = this.depth;
            canvas.width = width;
            canvas.height = height;
            const ctx = canvas.getContext('2d');
            if (!ctx) {
                throw new Error('Failed create canvas 2d context');
            }
            const imageData = ctx.getImageData(0, 0, width, height);
            const buffer = imageData.data;
            this.toBuffer(buffer);
            ctx.putImageData(imageData, 0, 0);
            return canvas;
        }
        /**
         * Save height map to image of base64
         */
        toImage(type, quality) {
            const canvas = this.toCanvas();
            return canvas.toDataURL(type, quality);
        }
        /**
         * Load height map from image
         * @param img
         */
        fromImage(img) {
            const bufferWidth = img.width;
            const bufferHeight = img.height;
            if (bufferWidth % 2 !== 0 || bufferHeight % 2 !== 0) {
                throw new Error("Map sizes not divisible by 2 are not supported");
            }
            const canvas = document.createElement("canvas");
            const context = canvas.getContext("2d");
            canvas.width = bufferWidth;
            canvas.height = bufferHeight;
            context.drawImage(img, 0, 0);
            const imageData = context.getImageData(0, 0, bufferWidth, bufferHeight);
            const imageBuffer = imageData.data;
            const maxSegmentX = this.width - 1;
            const maxSegmentZ = this.depth - 1;
            const factorX = bufferWidth / maxSegmentX;
            const factorZ = bufferHeight / maxSegmentZ;
            for (let z = 0; z < this.depth; z++) {
                for (let x = 0; x < this.width; x++) {
                    let normalizeX = x === maxSegmentX ? x - 1 : x;
                    let normalizeZ = z === maxSegmentZ ? z - 1 : z;
                    const heightMapX = (normalizeX * factorX) | 0;
                    const heightMapZ = (normalizeZ * factorZ) | 0;
                    const pos = (heightMapX + heightMapZ * bufferWidth) * 4;
                    const r = imageBuffer[pos];
                    const g = imageBuffer[pos + 1];
                    const b = imageBuffer[pos + 2];
                    const a = imageBuffer[pos + 3];
                    const coeff = (r + g + b) / 3 / a;
                    const height = coeff * this.maxHeight;
                    this.set(x, z, height);
                }
            }
        }
        smoothZone(zone, np, radius) {
            if (zone.maxX < 0)
                return;
            if (zone.maxZ < 0)
                return;
            if (np < 0 || np > 1)
                return;
            if (radius === 0)
                radius = 1;
            const minX = Math.max(zone.minX, 0);
            const minZ = Math.max(zone.minZ, 0);
            const maxX = Math.min(zone.maxX, this.width);
            const maxZ = Math.min(zone.maxZ, this.depth);
            const cp = 1 - np;
            for (let x = minX; x < maxX; x++) {
                for (let z = minZ; z < maxZ; z++) {
                    const prevHeight = this.get(x, z);
                    let updtHeight;
                    let neighNumber = 0;
                    let neighAverage = 0;
                    for (let rx = -radius; rx <= radius; rx++) {
                        for (let rz = -radius; rz <= radius; rz++) {
                            const innerX = (x + rx);
                            const innerZ = (z + rz);
                            if (innerX < 0 || innerX >= this.width)
                                continue;
                            if (innerZ < 0 || innerZ >= this.depth)
                                continue;
                            const height = (innerX === x && innerZ === z)
                                ? prevHeight
                                : this.get(innerX, innerZ);
                            neighNumber++;
                            neighAverage += height;
                        }
                    }
                    neighAverage /= neighNumber;
                    updtHeight = neighAverage * np + prevHeight * cp;
                    this.set(x, z, updtHeight);
                }
            }
        }
        smooth(np, radius) {
            this.smoothZone(this, np, radius);
        }
        normalize(maxHeight) {
            for (let z = 0; z < this.depth; z++) {
                for (let x = 0; x < this.width; x++) {
                    const currentHeight = this.get(x, z);
                    const normalizeHeight = (currentHeight / this.maxHeight) * maxHeight;
                    this.set(x, z, normalizeHeight);
                }
            }
        }
        combineHeights(type, heightMap, value, zone, heightIfZero = 0, minHeight = null, maxHeight = null) {
            if (zone.maxX < 0)
                return;
            if (zone.maxZ < 0)
                return;
            const lenX = zone.maxX - zone.minX;
            const lenZ = zone.maxZ - zone.minZ;
            if (lenX < 1 || lenZ < 1 || value === 0) {
                return;
            }
            const fixedMinX = Math.max(zone.minX, 0);
            const fixedMinZ = Math.max(zone.minZ, 0);
            const fixedMaxX = Math.min(zone.maxX, this.width);
            const fixedMaxZ = Math.min(zone.maxZ, this.depth);
            const coeffFactorX = (heightMap.width - 1) / lenX;
            const coeffFactorZ = (heightMap.depth - 1) / lenZ;
            for (let z = fixedMinZ; z < fixedMaxZ; z++) {
                for (let x = fixedMinX; x < fixedMaxX; x++) {
                    const x2 = (coeffFactorX * (x - zone.minX)) | 0;
                    const z2 = (coeffFactorZ * (z - zone.minZ)) | 0;
                    const height = heightMap.get(x2, z2);
                    const smoothAppendValue = height * value;
                    const oldHeight = this.get(x, z) || heightIfZero;
                    let candidate = type === '+' ? oldHeight + smoothAppendValue :
                        type === '-' ? oldHeight - smoothAppendValue :
                            type === '*' ? oldHeight * smoothAppendValue :
                                type === '/' ? oldHeight / smoothAppendValue :
                                    oldHeight;
                    if (minHeight !== null && candidate < minHeight) {
                        candidate = minHeight;
                    }
                    if (maxHeight !== null && candidate > maxHeight) {
                        candidate = maxHeight;
                    }
                    this.set(x, z, candidate);
                }
            }
        }
    }
    exports.AbsHeightMap = AbsHeightMap;
    exports.default = AbsHeightMap;
});
define("src/TerrainSystem/HeightMap", ["require", "exports", "src/TerrainSystem/AbsHeightMap"], function (require, exports, AbsHeightMap_mjs_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HeightMap = exports.defaultHeightVertexSize = exports.HeightMapArrType = void 0;
    AbsHeightMap_mjs_1 = __importDefault(AbsHeightMap_mjs_1);
    exports.HeightMapArrType = Float32Array;
    exports.defaultHeightVertexSize = 1;
    class HeightMap extends AbsHeightMap_mjs_1.default {
        get size() { return this._width * this._depth; }
        get width() { return this._width; }
        get depth() { return this._depth; }
        get data() { return this._data; }
        get format() { return 'rgba'; }
        get itemSize() { return this._itemSize; }
        get itemHeightIndexOffset() { return this._itemHeightIndexOffset; }
        get maxHeight() { return this._maxHeight; }
        constructor(width, depth, maxHeight, buffer, itemSize = exports.defaultHeightVertexSize, itemHeightIndexOffset = 0) {
            super();
            this._width = 0;
            this._depth = 0;
            this._maxHeight = 0;
            this._init(width, depth, maxHeight, buffer, itemSize, itemHeightIndexOffset);
        }
        _init(width, depth, maxHeight, buffer, itemSize = exports.defaultHeightVertexSize, itemHeightIndexOffset = 0) {
            this._width = width;
            this._depth = depth;
            this._maxHeight = maxHeight;
            if (buffer) {
                if (itemSize < itemHeightIndexOffset) {
                    throw new Error("ItemSize can't less or eq ItemHeightIndexOffset");
                }
                if (buffer.length < (width * depth) * itemSize) {
                    throw new Error("Buffer has invalid length");
                }
                this._data = buffer;
                this._itemSize = itemSize;
                this._itemHeightIndexOffset = itemHeightIndexOffset;
            }
            else {
                // TODO: type checker
                this._data = new exports.HeightMapArrType(width * depth * exports.defaultHeightVertexSize);
                this._itemSize = exports.defaultHeightVertexSize;
                this._itemHeightIndexOffset = 0;
            }
        }
        _encodeHeightFactor(store, index, value) {
            store[index] = value;
        }
        _decodeHeightFactor(store, index) {
            return store[index];
        }
        _decodeHeight(store, index, max) {
            return this._decodeHeightFactor(store, index) * max;
        }
        _encodeAndSetHeightFactor(store, index, realHeight, max) {
            const normalize = Math.max(Math.min(realHeight, max), 0);
            const factor = normalize / max;
            this._encodeHeightFactor(store, index, factor);
            return this._decodeHeightFactor(store, index);
        }
        getIndex(x, z) {
            return (z * this._width + x) * this._itemSize + this._itemHeightIndexOffset;
        }
        getFactor(x, z) {
            const index = this.getIndex(x, z);
            return this._decodeHeightFactor(this._data, index);
        }
        get(x, z) {
            const index = this.getIndex(x, z);
            return this._decodeHeight(this._data, index, this._maxHeight);
        }
        set(x, z, value) {
            const index = this.getIndex(x, z);
            return this._encodeAndSetHeightFactor(this._data, index, value, this._maxHeight);
        }
        setMaxHeight(maxHeight) {
            this._maxHeight = maxHeight;
        }
        append(x, z, value) {
            const index = this.getIndex(x, z);
            const oldValue = this._decodeHeight(this._data, index, this._maxHeight);
            const canValue = oldValue + value;
            return this._encodeAndSetHeightFactor(this._data, index, canValue, this._maxHeight);
        }
        multiply(x, z, value, heightIfZero = 0) {
            const index = this.getIndex(x, z);
            const oldValue = this._decodeHeight(this._data, index, this._maxHeight) || heightIfZero;
            const canValue = oldValue * value;
            return this._encodeAndSetHeightFactor(this._data, index, canValue, this._maxHeight);
        }
    }
    exports.HeightMap = HeightMap;
    exports.default = HeightMap;
});
define("src/TerrainSystem/AbsPatchedHeightMap", ["require", "exports", "src/TerrainSystem/HeightMap"], function (require, exports, HeightMap_mjs_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AbsPatchedHeightMap = exports.minMaxStackSize = void 0;
    exports.getOrThrowDataChunkSize = getOrThrowDataChunkSize;
    HeightMap_mjs_1 = __importStar(HeightMap_mjs_1);
    exports.minMaxStackSize = 2;
    function getOrThrowDataChunkSize(patchSize, dataChunkSize) {
        if ((dataChunkSize - 1) % (patchSize - 1) !== 0) {
            const recommendedWidth = ((dataChunkSize - 1 + patchSize - 1) / (dataChunkSize - 1)) * (patchSize - 1) + 1;
            console.error("DataChunkSize minus 1 (%d) must be divisible by patchSize minus 1 (%d)\n", dataChunkSize, patchSize);
            console.error("Try using DataChunkSize = %d\n", recommendedWidth);
            throw new Error();
        }
        return dataChunkSize;
    }
    class AbsPatchedHeightMap extends HeightMap_mjs_1.default {
        get patchSize() { return this._patchSize; }
        get numPatchesX() { return this._numPatchesX; }
        get numPatchesZ() { return this._numPatchesZ; }
        get dataChunkSize() { return this._dataChunkSize; }
        get dataNumChunksX() { return this._dataNumChunksX; }
        get dataNumChunksZ() { return this._dataNumChunksZ; }
        get dataChunkSizeFactor() { return this._dataChunkSizeFactor; }
        constructor(width, depth, patchSize, dataChunkSize, maxHeight, buffer, itemSize = HeightMap_mjs_1.defaultHeightVertexSize, itemHeightIndexOffset = 0) {
            super(width, depth, maxHeight, buffer /** TS huck */, itemSize, itemHeightIndexOffset);
            this._minHeightCoord = [0, 0];
            this._maxHeightCoord = [0, 0];
            this._setPatchSize(patchSize);
            this._setDataChunkSize(dataChunkSize);
            this._clearMinMaxHeightCoords();
        }
        _setPatchSize(patchSize) {
            this._patchSize = patchSize;
            this._numPatchesX = ((this.width - 1) / (this._patchSize - 1)) | 0;
            this._numPatchesZ = ((this.depth - 1) / (this._patchSize - 1)) | 0;
            this._patchesSegmentSize = this._numPatchesX * this._numPatchesZ * exports.minMaxStackSize;
            this._minMaxHeightCoords = new Array(this._patchesSegmentSize * 2);
        }
        _setDataChunkSize(value) {
            this._dataChunkSize = getOrThrowDataChunkSize(this._patchSize, value);
            this._dataNumChunksX = ((this.width - 1) / (this._dataChunkSize - 1)) | 0;
            this._dataNumChunksZ = ((this.depth - 1) / (this._dataChunkSize - 1)) | 0;
            this._dataChunkSizeFactor = this._patchSize === this._dataChunkSize
                ? 1.0
                : this._patchSize / (this._dataChunkSize + this._patchSize - (this._dataChunkSize % this._patchSize));
        }
        getIndex(x, z) {
            const localX = x % this._dataChunkSize;
            const localZ = z % this._dataChunkSize;
            const chunkX = x / this._dataChunkSize | 0;
            const chunkZ = z / this._dataChunkSize | 0;
            const chunkOffset = (chunkZ * this._dataNumChunksX + chunkX) * (Math.pow(this._dataChunkSize, 2));
            const localIndex = (localZ * this._dataChunkSize + localX);
            return chunkOffset + localIndex;
        }
        getChunkIndex(chunkX, chunkZ) {
            return chunkZ * this._dataNumChunksX + chunkX;
        }
        getChunkBuffer(type, chunkX, chunkZ) {
            const size = Math.pow(this.dataChunkSize, 2);
            const chunkLevel = chunkZ * this.dataNumChunksX + chunkX;
            const chunkOffset = chunkLevel * size * this.data.BYTES_PER_ELEMENT;
            const count = size * (this.data.BYTES_PER_ELEMENT / type.BYTES_PER_ELEMENT);
            return new type(this.data.buffer, this.data.byteOffset + chunkOffset, count);
        }
        getChunksBuffers(type) {
            const result = new Array(this._dataNumChunksX * this._dataNumChunksZ);
            for (let chunkZ = 0; chunkZ < this._dataNumChunksZ; chunkZ++) {
                for (let chunkX = 0; chunkX < this._dataNumChunksX; chunkX++) {
                    const index = chunkZ * this._dataNumChunksX + chunkX;
                    result[index] = this.getChunkBuffer(type, chunkX, chunkZ);
                }
            }
            return result;
        }
        getEntriesPatchMin(x, z) {
            const patchX = x / this._patchSize | 0;
            const patchZ = z / this._patchSize | 0;
            return this.getPatchMin(patchX, patchZ);
        }
        getEntriesPatchMax(x, z) {
            const patchX = x / this._patchSize | 0;
            const patchZ = z / this._patchSize | 0;
            return this.getPatchMax(patchX, patchZ);
        }
        getEntriesPatchMinFactor(x, z) {
            const patchX = x / this._patchSize | 0;
            const patchZ = z / this._patchSize | 0;
            return this.getPatchMinFactor(patchX, patchZ);
        }
        getEntriesPatchMaxFactor(x, z) {
            const patchX = x / this._patchSize | 0;
            const patchZ = z / this._patchSize | 0;
            return this.getPatchMaxFactor(patchX, patchZ);
        }
        getMin() {
            return this.get(this._minHeightCoord[0], this._minHeightCoord[1]);
        }
        getMax() {
            return this.get(this._maxHeightCoord[0], this._maxHeightCoord[1]);
        }
        getMinFactor() {
            return this.getFactor(this._minHeightCoord[0], this._minHeightCoord[1]);
        }
        getMaxFactor() {
            return this.getFactor(this._maxHeightCoord[0], this._maxHeightCoord[1]);
        }
        getPatchMin(patchBaseX, patchBaseZ) {
            const index = (patchBaseZ * this._numPatchesX + patchBaseX) * exports.minMaxStackSize;
            return this.get(this._minMaxHeightCoords[index], this._minMaxHeightCoords[index + 1]);
        }
        getPatchMax(patchBaseX, patchBaseZ) {
            const index = (patchBaseZ * this._numPatchesX + patchBaseX) * exports.minMaxStackSize + this._patchesSegmentSize;
            return this.get(this._minMaxHeightCoords[index], this._minMaxHeightCoords[index + 1]);
        }
        getPatchMinFactor(patchBaseX, patchBaseZ) {
            const index = (patchBaseZ * this._numPatchesX + patchBaseX) * exports.minMaxStackSize;
            return this.getFactor(this._minMaxHeightCoords[index], this._minMaxHeightCoords[index + 1]);
        }
        getPatchMaxFactor(patchBaseX, patchBaseZ) {
            const index = (patchBaseZ * this._numPatchesX + patchBaseX) * exports.minMaxStackSize + this._patchesSegmentSize;
            return this.getFactor(this._minMaxHeightCoords[index], this._minMaxHeightCoords[index + 1]);
        }
        _clearMinMaxHeightCoords() {
            this._minHeightCoord[0] = 0;
            this._minHeightCoord[1] = 0;
            this._maxHeightCoord[0] = 0;
            this._maxHeightCoord[1] = 0;
            this._minMaxHeightCoords.fill(0);
        }
        recalculateAABB() {
            this._minHeightCoord[0] = 0;
            this._minHeightCoord[1] = 0;
            this._maxHeightCoord[0] = 0;
            this._maxHeightCoord[1] = 0;
            let minFactor = 1;
            let maxFactor = 0;
            for (let patchZ = 0; patchZ < this._numPatchesZ; patchZ++) {
                for (let patchX = 0; patchX < this._numPatchesX; patchX++) {
                    const minIndex = (patchZ * this._numPatchesX + patchX) * exports.minMaxStackSize;
                    const maxIndex = minIndex + this._patchesSegmentSize;
                    const patchMinFactor = this.getFactor(this._minMaxHeightCoords[minIndex], this._minMaxHeightCoords[minIndex + 1]);
                    const patchMaxfactor = this.getFactor(this._minMaxHeightCoords[maxIndex], this._minMaxHeightCoords[maxIndex + 1]);
                    if (minFactor > patchMinFactor) {
                        minFactor = patchMinFactor;
                        this._minHeightCoord[0] = this._minMaxHeightCoords[minIndex];
                        this._minHeightCoord[1] = this._minMaxHeightCoords[minIndex + 1];
                    }
                    if (maxFactor < patchMaxfactor) {
                        maxFactor = patchMaxfactor;
                        this._maxHeightCoord[0] = this._minMaxHeightCoords[maxIndex];
                        this._maxHeightCoord[1] = this._minMaxHeightCoords[maxIndex + 1];
                    }
                }
            }
        }
        recalculateMinMax(zone) {
            if (zone.maxX < 0)
                return;
            if (zone.maxZ < 0)
                return;
            const fixedMinX = Math.max(zone.minX, 0);
            const fixedMinZ = Math.max(zone.minZ, 0);
            const fixedMaxX = Math.min(zone.maxX, this.width);
            const fixedMaxZ = Math.min(zone.maxZ, this.depth);
            for (let z = fixedMinZ; z < fixedMaxZ; z += this._patchSize) {
                for (let x = fixedMinX; x < fixedMaxX; x += this._patchSize) {
                    const patchX = x / this._patchSize | 0;
                    const patchZ = z / this._patchSize | 0;
                    const patchI = patchZ * this._numPatchesX + patchX;
                    const minIndex = patchI * exports.minMaxStackSize;
                    const maxIndex = minIndex + this._patchesSegmentSize;
                    const firstPatchX = patchX * this._patchSize;
                    const firstPatchZ = patchZ * this._patchSize;
                    const lastPatchX = firstPatchX + this._patchSize;
                    const lastPatchZ = firstPatchZ + this._patchSize;
                    let min = Number.MAX_SAFE_INTEGER;
                    let max = Number.MIN_SAFE_INTEGER;
                    let minX = firstPatchX;
                    let minZ = firstPatchZ;
                    let maxX = firstPatchX;
                    let maxZ = firstPatchZ;
                    for (let innerZ = firstPatchZ + 1; innerZ < lastPatchZ; innerZ++) {
                        for (let innerX = firstPatchX + 1; innerX < lastPatchX; innerX++) {
                            const factor = this.getFactor(innerX, innerZ);
                            if (min > factor) {
                                min = factor;
                                minX = innerX;
                                minZ = innerZ;
                            }
                            if (max < factor) {
                                max = factor;
                                maxX = innerX;
                                maxZ = innerZ;
                            }
                        }
                    }
                    this._minMaxHeightCoords[minIndex] = minX;
                    this._minMaxHeightCoords[minIndex + 1] = minZ;
                    this._minMaxHeightCoords[maxIndex] = maxX;
                    this._minMaxHeightCoords[maxIndex + 1] = maxZ;
                }
            }
        }
    }
    exports.AbsPatchedHeightMap = AbsPatchedHeightMap;
    exports.default = AbsPatchedHeightMap;
});
define("src/TerrainSystem/CompressedPatchedHeightMap", ["require", "exports", "src/TerrainSystem/AbsPatchedHeightMap", "src/TerrainSystem/HeightMap"], function (require, exports, AbsPatchedHeightMap_mjs_1, HeightMap_mjs_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CompressedPatchedHeightMap = void 0;
    AbsPatchedHeightMap_mjs_1 = __importStar(AbsPatchedHeightMap_mjs_1);
    class CompressedPatchedHeightMap extends AbsPatchedHeightMap_mjs_1.default {
        get compressAlgoritm() { return this._compressAlgoritm; }
        static createBuffer(width, depth, chunkSize, algoritm) {
            const numChunksX = ((width - 1) / (chunkSize - 1)) | 0;
            const numChunksZ = ((depth - 1) / (chunkSize - 1)) | 0;
            const chunkArrSize = Math.pow(chunkSize, 2);
            const chunkCount = numChunksX * numChunksZ;
            const patchXBatchingCount = algoritm === "x4" ? 4 : 2;
            if (numChunksX < patchXBatchingCount) {
                console.error("The chunkSize (%d) should be at least (%d) times smaller than the width (%d)\n", chunkSize, patchXBatchingCount, width);
                throw new Error();
            }
            return (algoritm === "x2"
                ? new Uint16Array(chunkArrSize * chunkCount)
                : new Uint8Array(chunkArrSize * chunkCount));
        }
        constructor(width, depth, patchSize, dataChunkSize, maxHeight, algoritm, buffer, itemSize = HeightMap_mjs_2.defaultHeightVertexSize, itemHeightIndexOffset = 0) {
            const validDataChunkSize = (0, AbsPatchedHeightMap_mjs_1.getOrThrowDataChunkSize)(patchSize, dataChunkSize);
            const tmpBuffer = buffer !== null && buffer !== void 0 ? buffer : CompressedPatchedHeightMap.createBuffer(width, depth, validDataChunkSize, algoritm);
            super(width, depth, patchSize, dataChunkSize, maxHeight, tmpBuffer, itemSize, itemHeightIndexOffset);
            this._compressAlgoritm = algoritm;
            this._patchXBatchSize = algoritm === "x4" ? 4 : 2;
            this._maxSafeFactor = algoritm === "x4" ? 0xff : 0xffff;
        }
        getChunkIndex(chunkX, chunkZ) {
            return (chunkZ * this.dataNumChunksX + chunkX) / this._patchXBatchSize | 0;
        }
        getChunkBuffer(type, chunkX, chunkZ) {
            const size = Math.pow(this.dataChunkSize, 2);
            const chunkLevel = (chunkZ * this.dataNumChunksX + chunkX) / this._patchXBatchSize | 0;
            const chunkOffset = chunkLevel * size * this.data.BYTES_PER_ELEMENT * this._patchXBatchSize;
            const count = size * this._patchXBatchSize * (this.data.BYTES_PER_ELEMENT / type.BYTES_PER_ELEMENT);
            return new type(this.data.buffer, this.data.byteOffset + chunkOffset, count);
        }
        getChunksBuffers(type) {
            const result = new Array((this.dataNumChunksX / this._patchXBatchSize) * this.dataNumChunksZ);
            for (let chunkZ = 0; chunkZ < this.dataNumChunksZ; chunkZ++) {
                for (let chunkX = 0; chunkX < this.dataNumChunksX; chunkX += this._patchXBatchSize) {
                    const index = (chunkZ * this.dataNumChunksX + chunkX) / this._patchXBatchSize | 0;
                    result[index] = this.getChunkBuffer(type, chunkX, chunkZ);
                }
            }
            return result;
        }
        _encodeHeightFactor(store, index, value) {
            store[index] = Math.min(value * this._maxSafeFactor, this._maxSafeFactor);
        }
        _decodeHeightFactor(store, index) {
            return store[index] / this._maxSafeFactor;
        }
        getIndex(x, z) {
            const localX = x % this.dataChunkSize;
            const localZ = z % this.dataChunkSize;
            const chunkX = x / this.dataChunkSize | 0;
            const chunkZ = z / this.dataChunkSize | 0;
            const chunkLevel = (chunkZ * this.dataNumChunksX + chunkX) / this._patchXBatchSize | 0;
            const chunkOffset = chunkLevel * (Math.pow(this.dataChunkSize, 2));
            const localIndex = localZ * this.dataChunkSize + localX;
            const numCompress = chunkX % this._patchXBatchSize; // compress by x axis
            return (chunkOffset + localIndex) * this._patchXBatchSize + numCompress;
        }
    }
    exports.CompressedPatchedHeightMap = CompressedPatchedHeightMap;
    exports.default = CompressedPatchedHeightMap;
});
define("src/AmmoIntegration/AmmoIntegration", ["require", "exports", "src/TerrainSystem/AbsPatchedHeightMap"], function (require, exports, AbsPatchedHeightMap_mjs_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getBuffer = getBuffer;
    function getBuffer(width, depth, patchSize, dataChunkSize, compressAlgoritm) {
        if (typeof Ammo === 'undefined') {
            console.error("Ammo not exists");
            throw new Error();
        }
        const chunkSize = (0, AbsPatchedHeightMap_mjs_2.getOrThrowDataChunkSize)(patchSize, dataChunkSize);
        const numChunksX = ((width - 1) / (chunkSize - 1)) | 0;
        const numChunksZ = ((depth - 1) / (chunkSize - 1)) | 0;
        const chunkArrSize = Math.pow(chunkSize, 2);
        const chunkCount = numChunksX * numChunksZ;
        if (compressAlgoritm !== "none") {
            const patchXBatchingCount = compressAlgoritm === "x4" ? 4 : 2;
            if (numChunksX < patchXBatchingCount) {
                console.error("The chunkSize (%d) should be at least (%d) times smaller than the width (%d)\n", chunkSize, patchXBatchingCount, width);
                throw new Error();
            }
        }
        const bsz = compressAlgoritm === "x2" ? 2 :
            compressAlgoritm === "x4" ? 1 :
                4; // float32
        const len = chunkArrSize * chunkCount;
        const ptr = Ammo._malloc(bsz * len);
        switch (compressAlgoritm) {
            case "x4": return new Uint8Array(Ammo.HEAPU8.buffer, ptr, len);
            case "x2": return new Uint16Array(Ammo.HEAPU16.buffer, ptr, len);
            default: return new Float32Array(Ammo.HEAPF32.buffer, ptr, len);
        }
    }
});
define("src/EngineExtensions/Renderer", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    (() => {
        if (!window.EXPERIMENTAL_TERRAIN_CUSTOM_RENDER) {
            return;
        }
        // @ts-ignore
        const originalDrawInstance = pc.ForwardRenderer.prototype.drawInstance;
        // @ts-ignore
        pc.ForwardRenderer.prototype.drawInstance = function (device, meshInstance, mesh, style, normal) {
            if (mesh.primitiveChunks && device.isWebGL2) {
                this.modelMatrixId.setValue(meshInstance.node.worldTransform.data);
                if (normal) {
                    this.normalMatrixId.setValue(meshInstance.node.normalMatrix.data);
                }
                let kb = false;
                for (const primitive of mesh.primitiveChunks[style]) {
                    if (primitive.enabled) {
                        if (primitive.attributes) {
                            for (const scopeId in primitive.attributes) {
                                device.scope.resolve(scopeId).setValue(primitive.attributes[scopeId]);
                            }
                        }
                        device.draw(primitive, 0, kb);
                        kb = true;
                    }
                }
            }
            else {
                originalDrawInstance.call(this, device, meshInstance, mesh, style, normal);
            }
        };
    })();
});
define("src/GrassFieldHelpers/GrassFieldTexture", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GrassFieldTexture = void 0;
    class GrassFieldTexture {
        get texture() { return this._texture; }
        constructor(graphicsDevice, width, depth, buffer) {
            this._width = width;
            this._depth = depth;
            const w = (width - 1) / 4 + 1;
            const d = (depth - 1) / 4 + 1;
            this._buffer = buffer !== null && buffer !== void 0 ? buffer : new Uint8Array(w * d * 4); // => 1 byte = 8 bits => 8 / 2 = 4 bit for 8 levels
            this._texture = new pc.Texture(graphicsDevice, {
                width: w,
                height: d,
                format: pc.PIXELFORMAT_RGBA8U,
                mipmaps: false,
                minFilter: pc.FILTER_NEAREST,
                magFilter: pc.FILTER_NEAREST,
                addressU: pc.ADDRESS_CLAMP_TO_EDGE,
                addressV: pc.ADDRESS_CLAMP_TO_EDGE,
                flipY: graphicsDevice.isWebGPU,
                levels: [this._buffer]
            });
        }
        destroy() {
            var _a;
            (_a = this._texture) === null || _a === void 0 ? void 0 : _a.destroy();
        }
        setChannel(x, z, channel) {
            const index = (x + z * this._width) / 4 | 0;
            const value = this._buffer[index];
        }
        setPixel() {
            if (this._texture) {
                const device = this._texture.device;
                const dataChunkSize = 1;
                const buffer = new Uint8Array(4);
                if (device.isWebGL2) {
                    const gl = device.gl;
                    const textureFormat = this._texture.impl._glFormat;
                    const texturePixelT = this._texture.impl._glPixelType;
                    const textureTarget = this._texture.impl._glTarget;
                    const textureObject = this._texture.impl._glTexture;
                    gl.bindTexture(textureTarget, textureObject);
                    gl.texSubImage3D(gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, dataChunkSize, dataChunkSize, 1, textureFormat, texturePixelT, buffer);
                }
                else if (device.isWebGPU) {
                    const webgpu = device.wgpu;
                    const texture = (this._texture.impl.gpuTexture);
                    webgpu.queue.writeTexture({
                        texture: texture,
                        origin: [0, 0, 0],
                        mipLevel: 0
                    }, buffer, {
                        offset: 0,
                        bytesPerRow: 4 * dataChunkSize, // always 4 for rgba format
                        rowsPerImage: dataChunkSize
                    }, {
                        width: dataChunkSize,
                        height: dataChunkSize
                    });
                }
            }
        }
    }
    exports.GrassFieldTexture = GrassFieldTexture;
    GrassFieldTexture.MAX_CHANEL = 8;
});
define("src/Shared/Utils", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.checkSupportR32FTexture = exports.littleEndian = exports.setPrecision = void 0;
    exports.getText = getText;
    exports.clamp = clamp;
    exports.randomFloat = randomFloat;
    exports.randomFloatRange = randomFloatRange;
    exports.calcNextPowerOfTwo = calcNextPowerOfTwo;
    exports.nrand = nrand;
    function getText(val, minWidth, prefix) {
        const str = val.toString();
        const strLen = str.length;
        const appendCount = minWidth - strLen;
        let result = str;
        for (let i = 0; i < appendCount; i++) {
            result = prefix + result;
        }
        return result;
    }
    function clamp(value, min, max) {
        return Math.max(min, Math.min(max, value));
    }
    function randomFloat() {
        return Math.random();
    }
    function randomFloatRange(start, end) {
        if (end == start) {
            throw new Error("Invalid random range");
        }
        const delta = end - start;
        const randomValue = randomFloat() * delta + start;
        return randomValue;
    }
    function calcNextPowerOfTwo(x) {
        let ret = 1;
        if (x == 1) {
            return 2;
        }
        while (ret < x) {
            ret = ret * 2;
        }
        return ret;
    }
    /** A random number from -1.0 to 1.0 */
    function nrand() {
        return Math.random() * 2.0 - 1.0;
    }
    const setPrecision = (graphicsDevice, shaderCode) => {
        return "precision " + graphicsDevice.precision + " float;\n" + shaderCode;
    };
    exports.setPrecision = setPrecision;
    exports.littleEndian = (() => {
        const uint8Array = new Uint8Array([0xAA, 0xBB]);
        const uint16array = new Uint16Array(uint8Array.buffer);
        return uint16array[0] === 0xBBAA;
    })();
    const checkSupportR32FTexture = (graphicsDevice) => {
        try {
            // TODO: need more test...
            // TODO: on iphone not work r32f textures
            if (navigator.platform.match(/iPhone|iPod|iPad/) !== null ||
                navigator.platform.startsWith("Mac") && navigator.maxTouchPoints > 4) {
                return false;
            }
            if (graphicsDevice.isWebGL2) {
                const gl = graphicsDevice.gl;
                let result = gl.getExtension("EXT_color_buffer_float");
                if (result) {
                    result = gl.getExtension("OES_texture_float");
                }
                if (!!result) {
                    return false;
                }
            }
            return true;
        }
        catch (ex) {
            return false;
        }
    };
    exports.checkSupportR32FTexture = checkSupportR32FTexture;
});
define("src/TerrainHelpers/TerrainPatchesShaderChunks", ["require", "exports", "src/Shared/Utils"], function (require, exports, Utils_mjs_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.chunks = exports.heightMapFactorsChunks = exports.diffusePS = exports.maxLayersCount = exports.gammaNormalizeChunkPS = exports.gammaNormalizeHeaderPS = exports.startVS = exports.normalCoreVS = exports.normalVS = exports.normalByHeightMapVS = exports.startUv0VS = exports.uv0VS = exports.transformVS = exports.transformDeclVS = exports.transformInstancingVS = exports.instancingVS = exports.terrainHeightChunkVS = exports.terrainHeightFactorChunkVS = exports.terrainChunkBufferCoordVS = exports.terrainHeightFactorRGBA8UX4VS = exports.terrainHeightFactorRG16UX2VS = exports.terrainHeightFactorRGBA8UVS = exports.terrainHeightFactorR32FVS = exports.terrainCoordsChunkVS = exports.currentTerrainXZChunkVS = exports.currentTerrainXZForCombineInstancingChunkVS = exports.currentTerrainXZForInstancingChunkVS = exports.baseClearSubVS = exports.baseClearVS = exports.heightMapSamplerBugFix = exports.baseForCombineInstancingVS = exports.baseForInstancingVS = exports.OLD_baseForInstancingVS = exports.baseOriginalVS = exports.definesVS = exports.littleEndianValue = exports.terrainSplatMapParamName = exports.terrainMaxHeightParamName = exports.terrainHeightMapParamName = exports.patchLodCoreParamName = exports.patchCoordOffsetParamName = exports.patchInstCoordOffsetParamName = exports.vertexNormalAttrName = exports.vertexHeightAttrName = exports.vertexCoordAttrName = void 0;
    exports.getTerrainHeightFactorVS = getTerrainHeightFactorVS;
    exports.getTextureType = getTextureType;
    exports.getSamplerType = getSamplerType;
    exports.getTerrainShaderChunks = getTerrainShaderChunks;
    exports.vertexCoordAttrName = "vertex_position";
    exports.vertexHeightAttrName = "vertex_height";
    exports.vertexNormalAttrName = "vertex_normal";
    exports.patchInstCoordOffsetParamName = "vertex_postion_offset";
    exports.patchCoordOffsetParamName = "uTerrainPatchCoordOffset";
    exports.patchLodCoreParamName = "uTerrainPatchLodCore";
    exports.terrainHeightMapParamName = "uTerrainHeightMap";
    exports.terrainMaxHeightParamName = "uTerrainMaxHeight";
    exports.terrainSplatMapParamName = "uTerrainSplatMap";
    exports.littleEndianValue = Utils_mjs_1.littleEndian ? 'true' : 'false';
    exports.definesVS = `
    #define HM_NUM_CHUNKS_X     (%%HM_NUM_CHUNKS_X%%)
    #define HM_NUM_CHUNKS_X_U   (uint(HM_NUM_CHUNKS_X))
    #define HM_CHUNK_SIZE       (%%HM_CHUNK_SIZE%%)
    #define HM_CHUNK_SIZE_U     (uint(HM_CHUNK_SIZE))
    #define HM_CHUNK_SIZE_M1_U  (HM_CHUNK_SIZE_U - 1u)
    #define HM_CHUNK_SIZE_F     (float(HM_CHUNK_SIZE))
    #define TR_SIZE             (ivec2(%%TR_SIZE_X%%, %%TR_SIZE_Z%%))
    #define TR_SIZE_F           (vec2(%%TR_SIZE_X_F%%, %%TR_SIZE_Z_F%%))
    #define TR_SIZE_U           (uvec2(TR_SIZE))
    #define TR_SIZE_H_F         (TR_SIZE_F / 2.0)
    #define TR_SIZE_H_N_F       (-TR_SIZE_H_F)
    #define TR_PATCH_SIZE_X     (%%TR_PATCH_SIZE_X%%)
    #define TR_PATCH_SIZE_M1    (TR_PATCH_SIZE_X - 1.0)
    #define TR_PATCH_SIZE_M1_H  (TR_PATCH_SIZE_M1 / 2.0)
    #define TR_PATCH_SIZE_M1_F  (vec2(TR_PATCH_SIZE_M1_H, TR_PATCH_SIZE_M1_H))
`;
    exports.baseOriginalVS = `
    attribute uvec2 ${exports.vertexCoordAttrName};
`;
    exports.OLD_baseForInstancingVS = `
    attribute uvec2 ${exports.vertexCoordAttrName};
    attribute uvec2 ${exports.patchInstCoordOffsetParamName};
`;
    exports.baseForInstancingVS = `
    attribute uvec2 ${exports.vertexCoordAttrName};
    attribute uvec2 ${exports.patchInstCoordOffsetParamName};
`;
    exports.baseForCombineInstancingVS = `
    attribute uvec2 ${exports.vertexCoordAttrName};
    attribute uvec4 ${exports.patchInstCoordOffsetParamName};
`;
    exports.heightMapSamplerBugFix = `
    uniform highp %%HEIGHT_MAP_SAMPLER%% ${exports.terrainHeightMapParamName};
    
    #if defined (WEBGPU)
        #define fix_${exports.terrainHeightMapParamName} highp %%HEIGHT_MAP_SAMPLER%%(${exports.terrainHeightMapParamName}_texture, ${exports.terrainHeightMapParamName}_sampler)
    #else
        #define fix_${exports.terrainHeightMapParamName} ${exports.terrainHeightMapParamName}
    #endif
`;
    exports.baseClearVS = `
    uniform mat4 matrix_viewProjection;
    uniform mat4 matrix_model;
    uniform mat3 matrix_normal;

    uniform mediump vec2 ${exports.patchCoordOffsetParamName};
    uniform mediump float ${exports.patchLodCoreParamName};

    uniform mediump float ${exports.terrainMaxHeightParamName};

    vec2 dCurrentTerrainXZ;
    float dCurrentTerrainHeight;
`;
    exports.baseClearSubVS = `
    vec3 dPositionW;
    mat4 dModelMatrix;
    mat3 dNormalMatrix;

    vec3 dCurrentTerrainNormal;
`;
    exports.currentTerrainXZForInstancingChunkVS = `
    vec2 getCurrentTerrainXZ() {
        return vec2(${exports.vertexCoordAttrName} + ${exports.patchInstCoordOffsetParamName});
    }
`;
    exports.currentTerrainXZForCombineInstancingChunkVS = `
    vec4 rotatePatchXZCoff[4] = vec4[4](
        vec4( 1.0,  0.0,  0.0,  1.0),
        vec4( 0.0,  1.0, -1.0,  0.0),
        vec4(-1.0,  0.0,  0.0, -1.0),
        vec4( 0.0, -1.0,  1.0,  0.0)
    );

    vec2 rotatePatchXZ(vec2 coord, uint angle) {
        vec2 offset = coord - TR_PATCH_SIZE_M1_H;
        vec4 transf = rotatePatchXZCoff[angle];
        return TR_PATCH_SIZE_M1_H + offset.xx * transf.xz + offset.yy * transf.yw;
    }

    vec2 getCurrentTerrainXZ() {
        vec2 orgXZ = vec2(${exports.vertexCoordAttrName});
        uint angle = ${exports.patchInstCoordOffsetParamName}.z;
        vec2 rotXZ = rotatePatchXZ(orgXZ, angle);
        return rotXZ + vec2(${exports.patchInstCoordOffsetParamName}.xy) * TR_PATCH_SIZE_M1;
    }
`;
    exports.currentTerrainXZChunkVS = `
    vec2 getCurrentTerrainXZ() {
        return vec2(${exports.vertexCoordAttrName}) + ${exports.patchCoordOffsetParamName};
    }
`;
    exports.terrainCoordsChunkVS = `
    vec2 getCurrentTerrainUvCoord() {
        vec2 xz = dCurrentTerrainXZ;
        vec2 uv = (xz + 0.5) / TR_SIZE_F;
        return uv;
    }
    
    uvec2 clampTerrainXZ(vec2 xz) {
        return uvec2(clamp(xz, vec2(0.0), TR_SIZE_F));
    }
    
    vec2 getTerrainXZ(ivec2 offset) {
        return dCurrentTerrainXZ + vec2(offset);
    }
`;
    exports.terrainHeightFactorR32FVS = `
    float getTerrainHeightFactorFromTexture(uvec3 coord) {
        return texelFetch(fix_${exports.terrainHeightMapParamName}, ivec3(coord), 0).r;
    }
`;
    // https://stackoverflow.com/questions/63827836/is-it-possible-to-do-a-rgba-to-float-and-back-round-trip-and-read-the-pixels-in
    // note: the 0.1s here an there are voodoo related to precision
    /*
        float rgba8uToFloat0(uvec4 v) {
            vec4 bits  = vec4(${littleEndian ? 'v' : 'v.abgr'});
            float sign = mix(-1.0, 1.0, step(bits[3], 128.0));
            float expo = floor(mod(bits[3] + 0.1, 128.0)) * 2.0 + floor((bits[2] + 0.1) / 128.0) - 127.0;
            float sig  = bits[0] + bits[1] * 256.0 + floor(mod(bits[2] + 0.1, 128.0)) * 256.0 * 256.0;
            return sign * (1.0 + sig / 8388607.0) * pow(2.0, expo);
        }
    */
    exports.terrainHeightFactorRGBA8UVS = `    
    float rgba8uToFloat(uvec4 v) {
        uvec4 bits = ${Utils_mjs_1.littleEndian ? 'v' : 'v.abgr'};
        float sign = 2.0 * step(float(bits[3]), 128.0) - 1.0;
        float expo = float((bits[3] & 127u) * 2u + bits[2] / 128u) - 127.0;
        float sig  = float(bits[0] + bits[1] * 256u + (bits[2] & 127u) * 65536u);
        return sign * (1.0 + sig / 8388607.0) * pow(2.0, expo);
    }

    float getTerrainHeightFactorFromTexture(uvec3 coord) {
        uvec4 rgba = texelFetch(fix_${exports.terrainHeightMapParamName}, ivec3(coord), 0);
        return rgba8uToFloat(rgba);
    }
`;
    // Compress height by x coord [patch0, patch1] ...
    // see: CompressedPatchedHeightMap file
    exports.terrainHeightFactorRG16UX2VS = `
    float getTerrainHeightFactorFromTexture(uvec3 coord) {

        uint level    = coord.b;
        uint newLevel = level / 2u;
        uint shift    = level & 1u;

        uvec4 rgba = texelFetch(fix_${exports.terrainHeightMapParamName}, ivec3(coord.xy, newLevel), 0);

        return float(rgba[shift]) / 65535.0;
    }
`;
    // Compress height by x coord [patch0, patch1, patch2, patch3] ...
    // see: CompressedPatchedHeightMap file
    exports.terrainHeightFactorRGBA8UX4VS = `
    float getTerrainHeightFactorFromTexture(uvec3 coord) {

        uint level    = coord.b;
        uint newLevel = level / 4u;
        uint shift    = level & 3u;

        uvec4 rgba = texelFetch(fix_${exports.terrainHeightMapParamName}, ivec3(coord.xy, newLevel), 0);

        return float(rgba[shift]) / 255.0;
    }
`;
    exports.terrainChunkBufferCoordVS = `
    uvec3 getTerrainChunkBufferCoord(uvec2 xz) {

        uvec2 ck = xz / HM_CHUNK_SIZE_U;

        uint localX = xz[0] % HM_CHUNK_SIZE_U;
        uint localZ = xz[1] % HM_CHUNK_SIZE_U;
        uint level  = ck[1] * HM_NUM_CHUNKS_X_U + ck[0];

        return uvec3(localX, localZ, level);
    }

    uvec3 getTerrainChunkBufferRelativeCoord(ivec2 offset) {
        vec2  oc = getTerrainXZ(offset);
        uvec2 xz = clampTerrainXZ(oc);
        return getTerrainChunkBufferCoord(xz);
    }
`;
    exports.terrainHeightFactorChunkVS = `
    float getTerrainHeightFactor(ivec2 offset) {
        uvec3 coord = getTerrainChunkBufferRelativeCoord(offset);
        return getTerrainHeightFactorFromTexture(coord);
    }
`;
    exports.terrainHeightChunkVS = `
    float getTerrainHeight(ivec2 offset) {
        return getTerrainHeightFactor(offset) * ${exports.terrainMaxHeightParamName};
    }
    
    float getCurrentTerrainHeight() {
        return getTerrainHeight(ivec2(0, 0));
    }
`;
    exports.instancingVS = ``;
    exports.transformInstancingVS = ``;
    exports.transformDeclVS = ``;
    exports.transformVS = `
    //varying float vPatchLod;
    varying vec2 vUvCoord;
    varying vec2 vGridPosition;

    mat4 getModelMatrix() {
        return matrix_model;
    }

    vec3 getWorldPosition() {
        return dPositionW;
    }
    
    vec4 getPosition() {
    
        dModelMatrix = getModelMatrix();
        dCurrentTerrainXZ = getCurrentTerrainXZ();
        dCurrentTerrainHeight = getCurrentTerrainHeight();

        vec2 centeredXZ = TR_SIZE_H_N_F + dCurrentTerrainXZ;
        vec4 localPos   = vec4(centeredXZ.r, dCurrentTerrainHeight, centeredXZ.g, 1.0);
        
        vec4 posW      = dModelMatrix * localPos;
        vec4 screenPos = matrix_viewProjection * posW;

        dPositionW = posW.xyz;

        //vPatchLod     = ${exports.patchLodCoreParamName};
        vGridPosition = dCurrentTerrainXZ;
        vUvCoord      = getCurrentTerrainUvCoord();

        return screenPos;
    }
`;
    exports.uv0VS = `
`;
    // FIX: bug with getUv0 for V1 Engine
    exports.startUv0VS = ` 
    vec2 getUv0() {
        return vec2(0.0);
    }
`;
    exports.normalByHeightMapVS = `
    vec3 getCurrentTerrainNormal() {

        float step  = pow(2.0, ${exports.patchLodCoreParamName} + 1.0) / 2.0;
        float left  = getTerrainHeightFactor(ivec2( step,  0));
        float right = getTerrainHeightFactor(ivec2(-step,  0));
        float up    = getTerrainHeightFactor(ivec2( 0,     step));
        float down  = getTerrainHeightFactor(ivec2( 0,    -step));

        vec3 normal = vec3(left, step * 0.02, down) - vec3(right, 0, up);

        return normalize(normal);
    }
`;
    exports.normalVS = `
    vec3 getNormal() {
        dNormalMatrix = matrix_normal;
        return normalize(dNormalMatrix * dCurrentTerrainNormal);
    }
`;
    exports.normalCoreVS = `
    // FIX: vertex_normal undeclaration
    vec3 vertex_normal;
    vec3 dCurrentTerrainNormal;

    vec3 getLocalNormal(vec3 vertexNormal) {

        dCurrentTerrainNormal = getCurrentTerrainNormal();
        vertex_normal = dCurrentTerrainNormal;

        return dCurrentTerrainNormal;
    }

    mat3 getNormalMatrix(mat4 modelMatrix) {
        return matrix_normal;
    }
`;
    exports.startVS = `
    void main(void) {

        gl_Position = getPosition();

    #if defined(SHADOW_PASS)
    #else
        dCurrentTerrainNormal = getCurrentTerrainNormal();
    #endif
`;
    exports.gammaNormalizeHeaderPS = `
    #define GAMMA_NORMALIZE
`;
    exports.gammaNormalizeChunkPS = `
    vec3 autoGammaCorrectInput(vec3 v) {
        #if defined(GAMMA_NORMALIZE)
            return gammaCorrectInput(v);
        #else
            return v;
        #endif
    }

    vec4 autoGammaCorrectInput(vec4 v) {
        #if defined(GAMMA_NORMALIZE)
            return gammaCorrectInput(v);
        #else
            return v;
        #endif
    }
`;
    exports.maxLayersCount = 5; // Default + R + G + B + A
    exports.diffusePS = `
    uniform mediump sampler2D ${exports.terrainSplatMapParamName};
    uniform mediump sampler2DArray uTerrainLayersDiffuse;
    //uniform mediump sampler2DArray uTerrainLayersNormalMap;
    uniform float uTerrainLayersCount;
    uniform float uTerrainLayersFlags[${exports.maxLayersCount}];
    uniform vec2 uTerrainLayersScale[${exports.maxLayersCount}];
    uniform vec2 uTerrainLayersOffset[${exports.maxLayersCount}];

    //varying float vPatchLod;
    varying vec2 vUvCoord;
    varying vec2 vGridPosition;

    void getAlbedo() {

        vec4 splat     = autoGammaCorrectInput(texture(${exports.terrainSplatMapParamName}, vUvCoord));
        vec2 uvTexZero = uTerrainLayersOffset[0] + vUvCoord * uTerrainLayersScale[0]; // / (vPatchLod + 1.0);
        vec4 texZero   = texture(uTerrainLayersDiffuse, vec3(uvTexZero, 0));
        vec3 albedo    = texZero.rgb;

        for (int i = 1; i < ${exports.maxLayersCount}; ++i) {

            if (uTerrainLayersFlags[i] > 0.0 && splat[i - 1] > 0.0) {

                vec2 uv  = uTerrainLayersOffset[i] + vUvCoord * uTerrainLayersScale[i];
                vec4 tex = texture(uTerrainLayersDiffuse, vec3(uv, i));

                albedo = mix(albedo, tex.rgb, splat[i - 1]);
            }
        }

        dAlbedo = autoGammaCorrectInput(albedo);
    }
`;
    exports.heightMapFactorsChunks = {
        terrainHeightFactorR32FVS: exports.terrainHeightFactorR32FVS,
        terrainHeightFactorRGBA8UVS: exports.terrainHeightFactorRGBA8UVS,
        terrainHeightFactorRG16UX2VS: exports.terrainHeightFactorRG16UX2VS,
        terrainHeightFactorRGBA8UX4VS: exports.terrainHeightFactorRGBA8UX4VS,
    };
    exports.chunks = Object.assign(Object.assign({}, exports.heightMapFactorsChunks), { heightMapSamplerBugFix: exports.heightMapSamplerBugFix,
        currentTerrainXZForCombineInstancingChunkVS: exports.currentTerrainXZForCombineInstancingChunkVS,
        currentTerrainXZForInstancingChunkVS: exports.currentTerrainXZForInstancingChunkVS,
        currentTerrainXZChunkVS: exports.currentTerrainXZChunkVS,
        terrainHeightFactorChunkVS: exports.terrainHeightFactorChunkVS,
        terrainHeightChunkVS: exports.terrainHeightChunkVS,
        terrainCoordsChunkVS: exports.terrainCoordsChunkVS,
        terrainChunkBufferCoordVS: exports.terrainChunkBufferCoordVS,
        normalByHeightMapVS: exports.normalByHeightMapVS,
        // Vertex
        definesVS: exports.definesVS,
        baseForCombineInstancingVS: exports.baseForCombineInstancingVS,
        baseForInstancingVS: exports.baseForInstancingVS,
        baseOriginalVS: exports.baseOriginalVS,
        baseClearVS: exports.baseClearVS,
        baseClearSubVS: exports.baseClearSubVS,
        transformDeclVS: exports.transformDeclVS,
        transformVS: exports.transformVS,
        instancingVS: exports.instancingVS,
        transformInstancingVS: exports.transformInstancingVS,
        normalVS: exports.normalVS,
        normalCoreVS: exports.normalCoreVS,
        uv0VS: exports.uv0VS,
        startVS: exports.startVS,
        startUv0VS: exports.startUv0VS,
        // Fragment
        gammaNormalizeHeaderPS: exports.gammaNormalizeHeaderPS,
        gammaNormalizeChunkPS: exports.gammaNormalizeChunkPS,
        diffusePS: exports.diffusePS });
    function getTerrainHeightFactorVS(format, chunksStore) {
        switch (format) {
            case 'r32f': return chunksStore.terrainHeightFactorR32FVS;
            case 'rgba': return chunksStore.terrainHeightFactorRGBA8UVS;
            case 'rgbaX2': return chunksStore.terrainHeightFactorRG16UX2VS;
            case 'rgbaX4': return chunksStore.terrainHeightFactorRGBA8UX4VS;
            default: break;
        }
        throw new Error('Format not supported');
    }
    function getTextureType(format) {
        switch (format) {
            case 'r32f': return pc.PIXELFORMAT_R32F;
            case 'rgba': return pc.PIXELFORMAT_RGBA8U;
            case 'rgbaX2': return pc.PIXELFORMAT_RG16U;
            case 'rgbaX4': return pc.PIXELFORMAT_RGBA8U;
            default: break;
        }
        throw new Error('Format not supported');
    }
    function getSamplerType(format) {
        switch (format) {
            case 'r32f': return 'sampler2DArray';
            case 'rgba': return 'usampler2DArray';
            case 'rgbaX2': return 'usampler2DArray';
            case 'rgbaX4': return 'usampler2DArray';
            default: break;
        }
        throw new Error('Format not supported');
    }
    function getTerrainShaderChunks({ width, depth, patchSize, heightMapChunkSize, instancing, heightMapFormat, chunksStore = exports.chunks, engineVersion = 'v1', }) {
        const definesVS = chunksStore.definesVS
            .replace('%%HM_NUM_CHUNKS_X%%', String((width - 1) / (heightMapChunkSize - 1) | 0))
            .replace('%%HM_CHUNK_SIZE%%', String(heightMapChunkSize | 0))
            .replace('%%TR_SIZE_X%%', String(width))
            .replace('%%TR_SIZE_Z%%', String(depth))
            .replace('%%TR_SIZE_X_F%%', width.toFixed(1))
            .replace('%%TR_SIZE_Z_F%%', depth.toFixed(1))
            .replace('%%TR_PATCH_SIZE_X%%', patchSize.toFixed(1));
        const terrainHeightFactorVS = getTerrainHeightFactorVS(heightMapFormat, chunksStore);
        const baseClearVS = chunksStore.baseClearVS + chunksStore.heightMapSamplerBugFix.replaceAll('%%HEIGHT_MAP_SAMPLER%%', getSamplerType(heightMapFormat));
        const baseCoordVS = instancing === 'combine' ? chunksStore.baseForCombineInstancingVS :
            instancing === 'simple' ? chunksStore.baseForInstancingVS :
                chunksStore.baseOriginalVS;
        const currentTerrainXZVS = instancing === 'combine' ? chunksStore.currentTerrainXZForCombineInstancingChunkVS :
            instancing === 'simple' ? chunksStore.currentTerrainXZForInstancingChunkVS :
                chunksStore.currentTerrainXZChunkVS;
        if (engineVersion === 'v2') {
            const normalCoreVS = chunksStore.normalByHeightMapVS + chunksStore.normalCoreVS;
            const transformVS = definesVS
                + baseCoordVS
                + baseClearVS
                + currentTerrainXZVS
                + terrainHeightFactorVS
                + chunksStore.terrainCoordsChunkVS
                + chunksStore.terrainChunkBufferCoordVS
                + chunksStore.terrainHeightFactorChunkVS
                + chunksStore.terrainHeightChunkVS
                + chunksStore.transformVS;
            const diffusePS = chunksStore.gammaNormalizeChunkPS
                + chunksStore.diffusePS;
            return {
                // Vertex
                normalCoreVS,
                transformVS,
                transformCoreVS: "",
                transformInstancingVS: "",
                // Fragment
                diffusePS,
            };
        }
        const startVS = chunksStore.normalByHeightMapVS + chunksStore.startUv0VS + chunksStore.startVS;
        const baseVS = baseCoordVS + baseClearVS + chunksStore.baseClearSubVS;
        const transformVS = definesVS
            + currentTerrainXZVS
            + terrainHeightFactorVS
            + chunksStore.terrainCoordsChunkVS
            + chunksStore.terrainChunkBufferCoordVS
            + chunksStore.terrainHeightFactorChunkVS
            + chunksStore.terrainHeightChunkVS
            + chunksStore.transformVS;
        const diffusePS = chunksStore.gammaNormalizeHeaderPS
            + chunksStore.gammaNormalizeChunkPS
            + chunksStore.diffusePS;
        return {
            // Vertex
            baseVS,
            transformVS,
            normalVS: chunksStore.normalVS,
            uv0VS: chunksStore.uv0VS,
            startVS,
            transformDeclVS: chunksStore.transformDeclVS,
            instancingVS: chunksStore.instancingVS,
            // Fragment
            diffusePS,
        };
    }
});
define("src/GrassFieldHelpers/GrassShaderChunk", ["require", "exports", "src/TerrainHelpers/TerrainPatchesShaderChunks"], function (require, exports, TerrainPatchesShaderChunks_mjs_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.chunks = exports.diffusePS = exports.startVS = exports.calculateLocalVS = exports.bladeDecoderVS = exports.terrainHeightMapVS = exports.baseClearSubVS = exports.baseVS = exports.startUv0VS = exports.uv0VS = exports.normalVS = exports.transformVS = exports.normalCoreVS = exports.definesBladeVS = exports.definesVS = exports.transformDeclVS = exports.transformInstancingVS = exports.instancingVS = exports.windIntensityParamName = exports.drawPosParamName = exports.lod2OffsetXZParamName = exports.lod1OffsetXZParamName = exports.terrainScaleParamName = exports.timeParamName = exports.shapeAttrName = exports.offsetAttrName = exports.vindexAttrName = void 0;
    exports.getGrassShaderChunks = getGrassShaderChunks;
    exports.vindexAttrName = "vertex_position";
    exports.offsetAttrName = "vertex_offset";
    exports.shapeAttrName = "vertex_shape";
    exports.timeParamName = "uTime";
    exports.terrainScaleParamName = "uTerrainScale";
    exports.lod1OffsetXZParamName = "uLod1OffsetXZ";
    exports.lod2OffsetXZParamName = "uLod2OffsetXZ";
    exports.drawPosParamName = "uDrawPosition";
    exports.windIntensityParamName = "uWindIntensity";
    exports.instancingVS = ``;
    exports.transformInstancingVS = ``;
    exports.transformDeclVS = ``;
    exports.definesVS = `
    #define HM_NUM_CHUNKS_X    (%%HM_NUM_CHUNKS_X%%)
    #define HM_NUM_CHUNKS_X_U  (uint(HM_NUM_CHUNKS_X))
    #define HM_CHUNK_SIZE      (%%HM_CHUNK_SIZE%%)
    #define HM_CHUNK_SIZE_F    (float(HM_CHUNK_SIZE))
    #define HM_CHUNK_SIZE_U    (uint(HM_CHUNK_SIZE))
    #define TR_SIZE            (ivec2(%%TR_SIZE_X%%, %%TR_SIZE_Z%%))
    #define TR_SIZE_F          (vec2(%%TR_SIZE_X_F%%, %%TR_SIZE_Z_F%%))
    #define TR_SIZE_BOUND_F    (TR_SIZE_F - 2.0)      
    #define TR_SIZE_H_F        (TR_SIZE_F / 2.0)
    #define TR_SIZE_H_N_F      (-TR_SIZE_H_F)

    #define PATCH_SIZE         (%%PATCH_SIZE%%)
    #define HALF_PATCH_SIZE    (PATCH_SIZE / 2.0)

    #define BLADE_HEIGHT_TALL  (%%BLADE_HEIGHT_TALL%%) // height of a tall blade

    #define TRANSITION_LOW     (%%TRANSITION_LOW%%)   // elevation of beach-grass transition (start)
    #define TRANSITION_HIGH    (%%TRANSITION_HIGH%%)  // (end)
    #define TRANSITION_NOISE   (0.06)                 // transition noise scale
    #define CIRCLE_RADIUS      (PATCH_SIZE * 2.9)
    #define MAX_ZINIT_DISTANCE (300.0)
`;
    exports.definesBladeVS = `
    #define LOD0_BLADE_SEGS        (%%LOD0_BLADE_SEGS%%) // # of blade segments lod 0
    #define LOD1_BLADE_SEGS        (%%LOD1_BLADE_SEGS%%) // # of blade segments lod 1
    #define LOD2_BLADE_SEGS        (%%LOD2_BLADE_SEGS%%) // # of blade segments lod 2

    #define LOD0_BLADE_DIVS        (LOD0_BLADE_SEGS + 1.0)  // # of divisions
    #define LOD0_BLADE_VERTS       (LOD0_BLADE_DIVS * 2.0)  // # of vertices (per side, so 1/2 total)
    #define LOD0_BLADE_VERTS_COUNT (LOD0_BLADE_VERTS * 2.0) // # of vertices

    #define LOD1_BLADE_DIVS        (LOD1_BLADE_SEGS + 1.0)  // # of divisions
    #define LOD1_BLADE_VERTS       (LOD1_BLADE_DIVS * 2.0)  // # of vertices (per side, so 1/2 total)
    #define LOD1_BLADE_VERTS_COUNT (LOD1_BLADE_VERTS * 2.0) // # of vertices

    #define LOD2_BLADE_DIVS        (LOD2_BLADE_SEGS + 1.0)  // # of divisions
    #define LOD2_BLADE_VERTS       (LOD2_BLADE_DIVS * 2.0)  // # of vertices (per side, so 1/2 total)
    #define LOD2_BLADE_VERTS_COUNT (LOD2_BLADE_VERTS * 2.0) // # of vertices
    
    #define LOD2_BLADE_VERTS_ALL_COUNT (LOD2_BLADE_VERTS_COUNT * 16.0) // # of vertices all fragments
`;
    exports.normalCoreVS = `
    // FIX: vertex_normal undeclaration
    vec3 vertex_normal;

    vec3 getLocalNormal(vec3 vertexNormal) {

        // Set default shader normal
        vertex_normal = dVertexNormal;

        return dVertexNormal;
    }

    mat3 getNormalMatrix(mat4 modelMatrix) {
        return matrix_normal;
    }
`;
    exports.transformVS = `
    vec3 getWorldPosition() {
        return dPositionW;
    }

    mat4 getModelMatrix() {
        return matrix_model;
    }

    vec4 getPosition() {

        decodeBlade();
        calculateBladeVertex();

        dModelMatrix = getModelMatrix();

        vec4 posW      = dModelMatrix * vec4(dVertexPosition, 1.0);
        vec4 screenPos = matrix_viewProjection * posW;

        dPositionW = posW.xyz;

        return screenPos;
    }
`;
    exports.normalVS = `
    vec3 getNormal() {
        dNormalMatrix = matrix_normal;
        return normalize(dNormalMatrix * dVertexNormal);
    }
`;
    exports.uv0VS = `
    vec2 getUv0() {
        return vec2(dEdgeOfBlade, dDivVertexIndex * 2.0);
    }
`;
    // bug with getUv0
    exports.startUv0VS = `    
    vec2 getUv0() {
        return vec2(dEdgeOfBlade, dDivVertexIndex * 2.0);
    }
`;
    exports.baseVS = `
    uniform mat4 matrix_viewProjection;
    uniform mat4 matrix_model;
    uniform mat3 matrix_normal;

    uniform mediump usampler2D uDataMap;

    uniform vec3  ${exports.terrainScaleParamName};
    uniform float ${TerrainPatchesShaderChunks_mjs_1.terrainMaxHeightParamName};
    
    uniform vec3  ${exports.drawPosParamName};       // centre of where we want to draw
    uniform float ${exports.timeParamName};          // used to animate blades
    uniform float ${exports.windIntensityParamName};

    uniform vec2 ${exports.lod1OffsetXZParamName}[8];  // center offset from draw pos lod 1
    uniform vec2 ${exports.lod2OffsetXZParamName}[16]; // center offset from draw pos lod 2

    attribute float ${exports.vindexAttrName};
    attribute vec4 ${exports.offsetAttrName};
    attribute vec4 ${exports.shapeAttrName};

    float dVertexIndex;           // vertex index for this side of the blade
    float dDivVertexIndex;        // div index (0 .. BLADE_DIVS)
    float dPercentOfBladeHeight;  // percent of height of blade this vertex is at
    float dSideOfBlade;           // front/back side of blade
    float dEdgeOfBlade;           // left/right edge (x=0 or x=1)
    vec2 dBladeTerrainXZPos;      // blade xz position on terrain
    vec3 dVertexPosition;         // Vertex position - start with 2D shape, no bend applied
    vec3 dVertexNormal;           // Vertex normal
    vec2 dTerrainPatchOffsetXZ;   // Terrain patch offset from center
`;
    exports.baseClearSubVS = `
    vec3 dPositionW;
    mat4 dModelMatrix;
    mat3 dNormalMatrix;
`;
    exports.terrainHeightMapVS = `
    uvec2 clampTerrainXZ(vec2 xz) {
        return uvec2(clamp(xz, vec2(0.0), TR_SIZE_F));
    }

    uvec3 getTerrainChunkBufferCoord(vec2 origXZ) {

        uvec2 xz = clampTerrainXZ(origXZ);
        uvec2 ck = xz / HM_CHUNK_SIZE_U;

        uint localX = xz[0] % HM_CHUNK_SIZE_U;
        uint localZ = xz[1] % HM_CHUNK_SIZE_U;
        uint level  = ck[1] * HM_NUM_CHUNKS_X_U + ck[0];

        return uvec3(localX, localZ, level);
    }
    
    float getTerrainHeightFactor(vec2 xz) {
        uvec3 coord = getTerrainChunkBufferCoord(xz);
        return getTerrainHeightFactorFromTexture(coord);
    }

    float getTerrainHeight(vec2 xz) {
        return getTerrainHeightFactor(xz) * ${TerrainPatchesShaderChunks_mjs_1.terrainMaxHeightParamName};
    }
    
    float getTerrainHeightInterpolated(vec2 xz) {

        // here we can calculate normal

        vec2 floorXZ = floor(xz);

        float x0z0 = getTerrainHeight(floorXZ);

        if ((floorXZ[0] + 1.0 >= TR_SIZE_F[0]) ||
            (floorXZ[1] + 1.0 >= TR_SIZE_F[1])) {
            return x0z0;
        }

        float x1z0 = getTerrainHeight(floorXZ + vec2(1.0, 0.0));
        float x0z1 = getTerrainHeight(floorXZ + vec2(0.0, 1.0));
        float x1z1 = getTerrainHeight(floorXZ + vec2(1.0, 1.0));

        float factorX = xz[0] - floorXZ[0];
        float factorZ = xz[1] - floorXZ[1];

        float interpolatedBottom = (x1z0 - x0z0) * factorX + x0z0;
        float interpolatedTop    = (x1z1 - x0z1) * factorX + x0z1;
        float finalHeight        = (interpolatedTop - interpolatedBottom) * factorZ + interpolatedBottom;

        return finalHeight;
    }
`;
    exports.bladeDecoderVS = `
    void decodeBlade() {

        float nnVi = ${exports.vindexAttrName} - LOD2_BLADE_VERTS_ALL_COUNT;

        if (nnVi < 0.0) {

            float lod2nVi  = mod(${exports.vindexAttrName}, LOD2_BLADE_VERTS_COUNT);
            int patchIndex = int(${exports.vindexAttrName} / LOD2_BLADE_VERTS_COUNT);

            dVertexIndex          = mod(lod2nVi, LOD2_BLADE_VERTS);
            dDivVertexIndex       = floor(dVertexIndex / 2.0);
            dPercentOfBladeHeight = dDivVertexIndex / LOD2_BLADE_SEGS;
            dSideOfBlade          = floor(lod2nVi / LOD2_BLADE_VERTS);

            dTerrainPatchOffsetXZ = ${exports.lod2OffsetXZParamName}[patchIndex];
        }
        else if (nnVi < LOD0_BLADE_VERTS_COUNT) {

            dVertexIndex          = mod(nnVi, LOD0_BLADE_VERTS);
            dDivVertexIndex       = floor(dVertexIndex / 2.0);
            dPercentOfBladeHeight = dDivVertexIndex / LOD0_BLADE_SEGS;
            dSideOfBlade          = floor(nnVi / LOD0_BLADE_VERTS);

            dTerrainPatchOffsetXZ = vec2(0.0);
        }
        else {

            float lod1nnVi = nnVi - LOD0_BLADE_VERTS_COUNT;
            float lod1nVi  = mod(lod1nnVi, LOD1_BLADE_VERTS_COUNT);
            int patchIndex = int(lod1nnVi / LOD1_BLADE_VERTS_COUNT);

            dVertexIndex          = mod(lod1nVi, LOD1_BLADE_VERTS);
            dDivVertexIndex       = floor(dVertexIndex / 2.0);
            dPercentOfBladeHeight = dDivVertexIndex / LOD1_BLADE_SEGS;
            dSideOfBlade          = floor(lod1nVi / LOD1_BLADE_VERTS);

            dTerrainPatchOffsetXZ = ${exports.lod1OffsetXZParamName}[patchIndex];
        }
        
        dEdgeOfBlade = mod(dVertexIndex, 2.0);
    }
`;
    exports.calculateLocalVS = `
    // Rotate by an angle
    vec2 rotate(float x, float y, float r) {
        float c = cos(r);
        float s = sin(r);
        return vec2(x * c - y * s, x * s + y * c);
    }

    // Rotate by a vector
    vec2 rotate(float x, float y, vec2 r) {
        return vec2(x * r.x - y * r.y, x * r.y + y * r.x);
    }

    float getGrassFactor(vec2 oxz) {
    
        vec2 xz = floor(oxz);

        if (xz[0] < 0.0 ||
            xz[1] < 0.0 ||
            xz[0] > TR_SIZE_BOUND_F[0] ||
            xz[1] > TR_SIZE_BOUND_F[1]) {
            return 0.0;
        }

        return 1.0;
    }
    
    varying vec2 vUvTerrainCoord;
    varying vec2 vUvCoord;
    varying vec3 vColor;

    void calculateBladeVertex() {
        
        vec4 offset = ${exports.offsetAttrName};
        vec4 shape  = ${exports.shapeAttrName};

        // Based on centre of view cone position, what grid tile should
        // this piece of grass be drawn at?
        vec2 quadCenterPos = ${exports.drawPosParamName}.xz;
        vec2 bladeOffset   = offset.xy;
        vec2 patchCenter   = floor((quadCenterPos - bladeOffset) / PATCH_SIZE) * PATCH_SIZE + HALF_PATCH_SIZE + dTerrainPatchOffsetXZ;

        float drawPosAltitude = ${exports.drawPosParamName}.y;

        // Find the blade mesh x,y position
        vec2 bladePos = patchCenter + bladeOffset;

        // Local quad center position in terrain
        // because the positions are shifted by half the size of the terrain
        // vec2 localQuadCenterPos = quadCenterPos + TR_SIZE_H_F;

        float distanceFromBladeToQuadCenter = distance(bladePos, quadCenterPos);
        float degenerateByDistanceFromBladeToQuadCenter = smoothstep(0.92, 1.0, CIRCLE_RADIUS / distanceFromBladeToQuadCenter);

        // Vertex position - start with 2D shape, no bend applied
        dVertexPosition = vec3(
            shape.x * (dEdgeOfBlade - 0.5) * (1.0 - pow(dPercentOfBladeHeight, 3.0)), // taper blade edges as approach tip
            0.0, // flat y, unbent
            shape.y * dPercentOfBladeHeight // height of vtx, unbent
        );

        // Apply blade's natural curve amount
        float curve = shape.w;

        // Then add animated curve amount by time using this blade's
        // unique properties to randomize its oscillation
        curve += shape.w + 0.125 * (sin(${exports.timeParamName} * 4.0 + offset.w * 0.2 * shape.y + offset.x + offset.y));

        // TODO
        float wind = 0.5;

        wind = (clamp(wind, 0.25, 1.0) - 0.25) * (1.0 / 0.75);
        wind = wind * wind * ${exports.windIntensityParamName};
        wind *= dPercentOfBladeHeight; // scale wind by height of blade
        wind = -wind;

        // Start computing a normal for this vertex
        dVertexNormal = vec3(0.0, dSideOfBlade * -2.0 + 1.0, 0.0);

        // put lean and curve together
        float rot = shape.z + curve * dPercentOfBladeHeight;
        vec2 rotv = vec2(cos(rot), sin(rot));

        dVertexPosition.yz = rotate(dVertexPosition.y, dVertexPosition.z, rotv);
        dVertexNormal.yz   = rotate(dVertexNormal.y, dVertexNormal.z, rotv);

        // rotation of this blade as a vector
        rotv = vec2(cos(offset.w), sin(offset.w));

        dVertexPosition.xy = rotate(dVertexPosition.x, dVertexPosition.y, rotv);
        dVertexNormal.xy   = rotate(dVertexNormal.x, dVertexNormal.y, rotv);

        rotv = vec2(cos(wind), sin(wind));

        // Wind blows in axis-aligned direction to make things simpler
        dVertexPosition.yz = rotate(dVertexPosition.y, dVertexPosition.z, rotv);
        dVertexNormal.yz   = rotate(dVertexNormal.y, dVertexNormal.z, rotv);

        // Local blade position in terrain
        // because the positions are shifted by half the size of the terrain
        dBladeTerrainXZPos = bladePos / ${exports.terrainScaleParamName}.xz + TR_SIZE_H_F;
        
        // Sample the heightfield data texture to get altitude for this blade position
        float bladeAltitude = getTerrainHeightInterpolated(dBladeTerrainXZPos) * ${exports.terrainScaleParamName}.y;
        float grassFactor   = getGrassFactor(dBladeTerrainXZPos);

        float distanceQuadCenterToDraw = distance(bladeAltitude, drawPosAltitude);
        float degenerateByDistanceFromBladeToDraw = smoothstep(0.81, 1.0, MAX_ZINIT_DISTANCE / distanceQuadCenterToDraw);

        // Determine if we want the grass to appear or not
        // Use the noise channel to perturb the blade altitude grass starts growing at.
        // float noisyAltitude = grassFactor * TRANSITION_NOISE - (TRANSITION_NOISE / 2.0);
        // float degenerateByNoise = (clamp(noisyAltitude, TRANSITION_LOW, TRANSITION_HIGH) - TRANSITION_LOW) * (1.0 / (TRANSITION_HIGH - TRANSITION_LOW));

        // Transition geometry toward degenerate as we approach terrain altitude
        dVertexPosition *= grassFactor * degenerateByDistanceFromBladeToDraw * degenerateByDistanceFromBladeToQuadCenter; // degenerateByNoise

        // Translate to world coordinates
        dVertexPosition.x += bladePos.x;
        dVertexPosition.y += bladePos.y;
        dVertexPosition.z += bladeAltitude;
        
        // Translate to xz plane
        dVertexPosition = dVertexPosition.xzy;
        dVertexNormal   = dVertexNormal.xzy;

        // grass texture coordinate for this vertex
        vUvCoord = vec2(dEdgeOfBlade, dDivVertexIndex * 2.0);

        // terrain texture coordinate for this vertex
        vUvTerrainCoord = dBladeTerrainXZPos / TR_SIZE_F;

        // Vertex color must be brighter because it is multiplied with blade texture
        // Each blade is randomly colourized a bit by its position
        vColor = vec3(cos(${exports.offsetAttrName}.x), sin(${exports.offsetAttrName}.y), sin(${exports.offsetAttrName}.x));
    }
`;
    // https://community.khronos.org/t/discarding-polygons-in-vertex-shader/103839/9
    exports.startVS = `
    ${exports.startUv0VS}

    void main(void) {

        gl_Position = getPosition();
`;
    exports.diffusePS = `
    uniform sampler2D uDiffuseTex;
    uniform vec3 uDiffuseColor;
    uniform vec3 uDiffuseColorRandom;

    varying vec2 vUvTerrainCoord;
    varying vec2 vUvCoord;
    varying vec3 vColor;

    vec3 autoGammaCorrectInput(vec3 v) {
        #if defined(GAMMA_NORMALIZE)
            return gammaCorrectInput(v);
        #else
            return v;
        #endif
    }

    vec4 autoGammaCorrectInput(vec4 v) {
        #if defined(GAMMA_NORMALIZE)
            return gammaCorrectInput(v);
        #else
            return v;
        #endif
    }

    void getAlbedo() {

        vec3 tex = autoGammaCorrectInput(texture2D(uDiffuseTex, vUvCoord).rgb);

        dAlbedo = tex * uDiffuseColor + vColor * uDiffuseColorRandom;
    }
`;
    exports.chunks = Object.assign(Object.assign({}, TerrainPatchesShaderChunks_mjs_1.heightMapFactorsChunks), { heightMapSamplerBugFix: TerrainPatchesShaderChunks_mjs_1.heightMapSamplerBugFix,
        definesVS: exports.definesVS,
        definesBladeVS: exports.definesBladeVS,
        bladeDecoderVS: exports.bladeDecoderVS,
        calculateLocalVS: exports.calculateLocalVS,
        terrainHeightMapVS: exports.terrainHeightMapVS,
        // Vertex
        baseVS: exports.baseVS,
        baseClearSubVS: exports.baseClearSubVS,
        transformVS: exports.transformVS,
        transformDeclVS: exports.transformDeclVS,
        instancingVS: exports.instancingVS,
        transformInstancingVS: exports.transformInstancingVS,
        normalCoreVS: exports.normalCoreVS,
        normalVS: exports.normalVS,
        uv0VS: exports.uv0VS,
        startVS: exports.startVS,
        // Fragment
        diffusePS: exports.diffusePS });
    function getGrassShaderChunks({ width, depth, heightMapChunkSize, heightMapFormat, bladeMaxHeight, lod0BladeSegs, lod1BladeSegs, lod2BladeSegs, radius, transitionLow, transitionHigh, chunksStore = exports.chunks, engineVersion = 'v1', }) {
        const definesVS = chunksStore.definesVS
            .replace('%%HM_NUM_CHUNKS_X%%', String((width - 1) / (heightMapChunkSize - 1) | 0))
            .replace('%%HM_CHUNK_SIZE%%', String(heightMapChunkSize | 0))
            .replace('%%TR_SIZE_X%%', String(width))
            .replace('%%TR_SIZE_Z%%', String(depth))
            .replace('%%TR_SIZE_X_F%%', width.toFixed(1))
            .replace('%%TR_SIZE_Z_F%%', depth.toFixed(1))
            .replace('%%BLADE_HEIGHT_TALL%%', bladeMaxHeight.toFixed(1))
            .replace('%%PATCH_SIZE%%', radius.toFixed(1))
            .replace('%%TRANSITION_LOW%%', transitionLow.toString())
            .replace('%%TRANSITION_HIGH%%', transitionHigh.toString());
        const definesBladeVS = chunksStore.definesBladeVS
            .replace('%%LOD0_BLADE_SEGS%%', lod0BladeSegs.toFixed(1))
            .replace('%%LOD1_BLADE_SEGS%%', lod1BladeSegs.toFixed(1))
            .replace('%%LOD2_BLADE_SEGS%%', lod2BladeSegs.toFixed(1));
        const baseClearVS = chunksStore.baseVS + chunksStore.heightMapSamplerBugFix.replaceAll('%%HEIGHT_MAP_SAMPLER%%', (0, TerrainPatchesShaderChunks_mjs_1.getSamplerType)(heightMapFormat));
        const terrainHeightFactorVS = (0, TerrainPatchesShaderChunks_mjs_1.getTerrainHeightFactorVS)(heightMapFormat, chunksStore);
        const transformVS = terrainHeightFactorVS
            + chunksStore.terrainHeightMapVS
            + chunksStore.bladeDecoderVS
            + chunksStore.calculateLocalVS
            + chunksStore.transformVS;
        if (engineVersion === 'v2') {
            const transform2VS = definesVS + definesBladeVS + baseClearVS + transformVS;
            return {
                // Vertex
                transformVS: transform2VS,
                transformCoreVS: "",
                transformInstancingVS: "",
                normalCoreVS: chunksStore.normalCoreVS,
                // Fragment
                diffusePS: chunksStore.diffusePS,
            };
        }
        const baseVS = definesVS +
            definesBladeVS +
            baseClearVS +
            chunksStore.baseClearSubVS;
        const diffusePS = '#define GAMMA_NORMALIZE\r\n'
            + chunksStore.diffusePS;
        return {
            // Vertex
            baseVS,
            startVS: chunksStore.startVS,
            transformVS: transformVS,
            transformDeclVS: chunksStore.transformDeclVS,
            instancingVS: chunksStore.instancingVS,
            normalVS: chunksStore.normalVS,
            uv0VS: chunksStore.uv0VS,
            // Fragment
            diffusePS: diffusePS,
        };
    }
});
/*
 * A speed-improved perlin and simplex noise algorithms for 2D.
 *
 * Based on example code by Stefan Gustavson (stegu@itn.liu.se).
 * Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).
 * Better rank ordering method by Stefan Gustavson in 2012.
 * Converted to Javascript by Joseph Gentle.
 *
 * Version 2012-03-09
 *
 * This code was placed in the public domain by its original author,
 * Stefan Gustavson. You may use it as you see fit, but
 * attribution is appreciated.
 *
 * --------------------
 * TypeScriptified 2016
 */
define("src/GrassFieldHelpers/simplex", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = simplex;
    class Grad {
        constructor(x, y, z) {
            this.x = x;
            this.y = y;
            this.z = z;
        }
        dot2(x, y) {
            return this.x * x + this.y * y;
        }
        dot3(x, y, z) {
            return this.x * x + this.y * y + this.z * z;
        }
    }
    const F2 = 0.5 * (Math.sqrt(3) - 1);
    const G2 = (3 - Math.sqrt(3)) / 6;
    const perm = new Array(512);
    const gradP = new Array(512);
    const grad3 = [
        new Grad(1, 1, 0), new Grad(-1, 1, 0), new Grad(1, -1, 0), new Grad(-1, -1, 0),
        new Grad(1, 0, 1), new Grad(-1, 0, 1), new Grad(1, 0, -1), new Grad(-1, 0, -1),
        new Grad(0, 1, 1), new Grad(0, -1, 1), new Grad(0, 1, -1), new Grad(0, -1, -1)
    ];
    const p = [
        151, 160, 137, 91, 90, 15,
        131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,
        190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,
        88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,
        77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,
        102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,
        135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,
        5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,
        223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,
        129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,
        251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,
        49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,
        138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180
    ];
    // This isn't a very good seeding function, but it works ok. It supports 2^16
    // different seed values. Write something better if you need more seeds.
    function seed(seed) {
        if (seed > 0 && seed < 1) {
            // Scale the seed out
            seed *= 65536;
        }
        seed = Math.floor(seed);
        if (seed < 256) {
            seed |= seed << 8;
        }
        for (let i = 0; i < 256; i++) {
            let v;
            if (i & 1) {
                v = p[i] ^ (seed & 255);
            }
            else {
                v = p[i] ^ ((seed >> 8) & 255);
            }
            perm[i] = perm[i + 256] = v;
            gradP[i] = gradP[i + 256] = grad3[v % 12];
        }
    }
    seed(0);
    // 2D simplex noise
    function simplex(xin, yin) {
        let n0, n1, n2; // Noise contributions from the three corners
        // Skew the input space to determine which simplex cell we're in
        const s = (xin + yin) * F2; // Hairy factor for 2D
        let i = Math.floor(xin + s);
        let j = Math.floor(yin + s);
        const t = (i + j) * G2;
        const x0 = xin - i + t; // The x,y distances from the cell origin, unskewed.
        const y0 = yin - j + t;
        // For the 2D case, the simplex shape is an equilateral triangle.
        // Determine which simplex we are in.
        let i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords
        if (x0 > y0) { // lower triangle, XY order: (0,0)->(1,0)->(1,1)
            i1 = 1;
            j1 = 0;
        }
        else { // upper triangle, YX order: (0,0)->(0,1)->(1,1)
            i1 = 0;
            j1 = 1;
        }
        // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and
        // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where
        // c = (3-sqrt(3))/6
        const x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords
        const y1 = y0 - j1 + G2;
        const x2 = x0 - 1 + 2 * G2; // Offsets for last corner in (x,y) unskewed coords
        const y2 = y0 - 1 + 2 * G2;
        // Work out the hashed gradient indices of the three simplex corners
        i &= 255;
        j &= 255;
        const gi0 = gradP[i + perm[j]];
        const gi1 = gradP[i + i1 + perm[j + j1]];
        const gi2 = gradP[i + 1 + perm[j + 1]];
        // Calculate the contribution from the three corners
        let t0 = 0.5 - x0 * x0 - y0 * y0;
        if (t0 < 0) {
            n0 = 0;
        }
        else {
            t0 *= t0;
            n0 = t0 * t0 * gi0.dot2(x0, y0); // (x,y) of grad3 used for 2D gradient
        }
        let t1 = 0.5 - x1 * x1 - y1 * y1;
        if (t1 < 0) {
            n1 = 0;
        }
        else {
            t1 *= t1;
            n1 = t1 * t1 * gi1.dot2(x1, y1);
        }
        let t2 = 0.5 - x2 * x2 - y2 * y2;
        if (t2 < 0) {
            n2 = 0;
        }
        else {
            t2 *= t2;
            n2 = t2 * t2 * gi2.dot2(x2, y2);
        }
        // Add contributions from each corner to get the final noise value.
        // The result is scaled to return values in the interval [-1,1].
        return 70 * (n0 + n1 + n2);
    }
});
define("src/Scripts/FlyCamera", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.flyCameraScriptName = exports.FlyCamera = void 0;
    class FlyCamera extends pc.ScriptType {
        constructor() {
            super(...arguments);
            this.mobileControl = false;
        }
        initialize() {
            // Camera euler angle rotation around x and y axes
            const eulers = this.entity.getLocalEulerAngles();
            this.ex = (eulers.z - eulers.x);
            this.ey = (eulers.z - eulers.y);
            this.translateLoc = pc.Vec3.ZERO.clone();
            this.moved = false;
            this.rightDown = false;
            this.middleDown = false;
            // Disabling the context menu stops the browser displaying a menu when
            // you right-click the page
            if (this.app.mouse) {
                this.app.mouse.disableContextMenu();
                this.app.mouse.on(pc.EVENT_MOUSEMOVE, this.onMouseMove, this);
                this.app.mouse.on(pc.EVENT_MOUSEDOWN, this.onMouseDown, this);
                this.app.mouse.on(pc.EVENT_MOUSEUP, this.onMouseUp, this);
            }
        }
        append(x, y) {
            this.ex += x;
            this.ey += y;
            this.ex = pc.math.clamp(this.ex, -90, 90);
        }
        translate(x, y, z) {
            this.translateLoc.x += x;
            this.translateLoc.y += y;
            this.translateLoc.z += z;
        }
        update(dt) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
            const app = this.app;
            let speed = this.speed;
            if ((_a = app.keyboard) === null || _a === void 0 ? void 0 : _a.isPressed(pc.KEY_SPACE)) {
                speed = this.slowSpeed;
            }
            if ((_b = app.keyboard) === null || _b === void 0 ? void 0 : _b.isPressed(pc.KEY_SHIFT)) {
                speed = this.fastSpeed;
            }
            // Joypad control
            const joystickMover = touchJoypad === null || touchJoypad === void 0 ? void 0 : touchJoypad.sticks['joystick0'];
            const joystickRoter = touchJoypad === null || touchJoypad === void 0 ? void 0 : touchJoypad.sticks['joystick1'];
            if (this.mobileControls && (touchJoypad === null || touchJoypad === void 0 ? void 0 : touchJoypad.buttons.wasPressed('button2'))) {
                this.mobileControl = !this.mobileControl;
                this.mobileControls.enabled = this.mobileControl;
            }
            if (joystickRoter) {
                this.append(joystickRoter.y, -joystickRoter.x);
            }
            if (joystickMover) {
                this.translate(speed * joystickMover.x * dt, 0, -speed * joystickMover.y * dt);
            }
            // Update the camera's position
            if (((_c = app.keyboard) === null || _c === void 0 ? void 0 : _c.isPressed(pc.KEY_UP)) || ((_d = app.keyboard) === null || _d === void 0 ? void 0 : _d.isPressed(pc.KEY_W))) {
                this.translate(0, 0, -speed * dt);
            }
            else if (((_e = app.keyboard) === null || _e === void 0 ? void 0 : _e.isPressed(pc.KEY_DOWN)) || ((_f = app.keyboard) === null || _f === void 0 ? void 0 : _f.isPressed(pc.KEY_S))) {
                this.translate(0, 0, speed * dt);
            }
            if (((_g = app.keyboard) === null || _g === void 0 ? void 0 : _g.isPressed(pc.KEY_LEFT)) || ((_h = app.keyboard) === null || _h === void 0 ? void 0 : _h.isPressed(pc.KEY_A))) {
                this.translate(-speed * dt, 0, 0);
            }
            else if (((_j = app.keyboard) === null || _j === void 0 ? void 0 : _j.isPressed(pc.KEY_RIGHT)) || ((_k = app.keyboard) === null || _k === void 0 ? void 0 : _k.isPressed(pc.KEY_D))) {
                this.translate(speed * dt, 0, 0);
            }
            // Update the camera's TRS
            this.entity.setLocalEulerAngles(this.ex, this.ey, 0);
            this.entity.translateLocal(this.translateLoc);
            this.translateLoc.set(0, 0, 0);
            // Update frustum by actual matrix
            this.app.renderer.updateCameraFrustum((_l = this.entity.camera) === null || _l === void 0 ? void 0 : _l.camera);
        }
        onMouseMove(event) {
            if (!this.mode && !pc.Mouse.isPointerLocked()) {
                return;
            }
            if (!this.rightDown &&
                !this.middleDown)
                return;
            // Update the current Euler angles, clamp the pitch.
            if (!this.moved) {
                // first move event can be very large
                this.moved = true;
                return;
            }
            if (this.rightDown) {
                this.append(-event.dy / this.sensitivity, -event.dx / this.sensitivity);
            }
            if (this.middleDown) {
                let speed = this.speed;
                if (this.app.keyboard.isPressed(pc.KEY_SHIFT)) {
                    speed = this.fastSpeed;
                }
                this.translate(-(event.dx / 5) * speed, (event.dy / 5) * speed, 0);
            }
        }
        onMouseDown(event) {
            // When the mouse button is clicked try and capture the pointer
            if (!this.mode && !pc.Mouse.isPointerLocked()) {
                this.app.mouse.enablePointerLock();
            }
            if (event.button === pc.MOUSEBUTTON_RIGHT) {
                this.rightDown = true;
            }
            if (event.button === pc.MOUSEBUTTON_MIDDLE) {
                this.middleDown = true;
            }
        }
        onMouseUp(event) {
            if (event.button === pc.MOUSEBUTTON_RIGHT) {
                this.rightDown = false;
            }
            if (event.button === pc.MOUSEBUTTON_MIDDLE) {
                this.middleDown = false;
            }
        }
    }
    exports.FlyCamera = FlyCamera;
    exports.default = FlyCamera;
    exports.flyCameraScriptName = 'flyCamera';
    pc.registerScript(FlyCamera, exports.flyCameraScriptName);
    FlyCamera.attributes.add('mobileControls', {
        type: 'entity',
    });
    FlyCamera.attributes.add('speed', {
        type: 'number',
        default: 10
    });
    FlyCamera.attributes.add('slowSpeed', {
        type: 'number',
        default: 1
    });
    FlyCamera.attributes.add('fastSpeed', {
        type: 'number',
        default: 20
    });
    FlyCamera.attributes.add('sensitivity', {
        type: 'number',
        min: 1,
        default: 5
    });
    FlyCamera.attributes.add('mode', {
        type: 'number',
        default: 0,
        enum: [{
                "Lock": 0
            }, {
                "Drag": 1
            }]
    });
});
define("src/Scripts/FpsCounter", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fpsCounterScriptName = void 0;
    class FpsCounter extends pc.ScriptType {
        initialize() {
            const constr = window.FPSMeter;
            if (constr) {
                this.fps = new constr({
                    heat: true,
                    graph: true
                });
            }
        }
        update(dt) {
            var _a;
            (_a = this.fps) === null || _a === void 0 ? void 0 : _a.tick();
        }
    }
    exports.default = FpsCounter;
    exports.fpsCounterScriptName = 'FpsCounter';
    pc.registerScript(FpsCounter, exports.fpsCounterScriptName);
});
define("src/Shared/Debug", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.drawDirectionVector = drawDirectionVector;
    exports.drawPoint = drawPoint;
    exports.drawBox = drawBox;
    const tmpVec = new pc.Vec3();
    function drawDirectionVector(position, dir, color = pc.Color.RED) {
        // Draw the vector
        const start = position;
        const end = tmpVec.add2(position, dir);
        pc.app.drawLine(start, end, color, false);
    }
    function drawPoint({ center, radius = 0.1, numSegments = 4, color = pc.Color.RED, layer, depthTest = false }) {
        const block = 6 * 3;
        const points = new Array(numSegments * block);
        const step = 2 * Math.PI / numSegments;
        let angle = 0;
        for (let i = 0; i < numSegments; i++) {
            const sin0 = Math.sin(angle);
            const cos0 = Math.cos(angle);
            angle += step;
            const sin1 = Math.sin(angle);
            const cos1 = Math.cos(angle);
            const j = i * block;
            points[j + 0] = center.x + radius * sin0;
            points[j + 1] = center.y;
            points[j + 2] = center.z + radius * cos0;
            points[j + 3] = center.x + radius * sin1;
            points[j + 4] = center.y;
            points[j + 5] = center.z + radius * cos1;
            points[j + 6] = center.x;
            points[j + 7] = center.y + radius * sin0;
            points[j + 8] = center.z + radius * cos0;
            points[j + 9] = center.x;
            points[j + 10] = center.y + radius * sin1;
            points[j + 11] = center.z + radius * cos1;
            points[j + 12] = center.x + radius * cos0;
            points[j + 13] = center.y + radius * sin0;
            points[j + 14] = center.z;
            points[j + 15] = center.x + radius * cos1;
            points[j + 16] = center.y + radius * sin1;
            points[j + 17] = center.z;
        }
        pc.app.drawLineArrays(points, color, depthTest, layer);
    }
    function drawBox({ min, max, color = pc.Color.RED, layer, depthTest = false }) {
        var _a;
        (_a = pc.app) === null || _a === void 0 ? void 0 : _a.drawWireAlignedBox(min, max, color, depthTest, layer);
    }
});
define("src/Shared/Random", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class Random {
        constructor(seed) {
            this.seed = seed;
            this._tmp = seed;
        }
        reset() {
            this._tmp = this.seed;
        }
        next() {
            this._tmp = (this._tmp * 48271) % 2147483647;
            this._tick = this._tmp / 2147483647;
            return this._tick;
        }
        nextFloat(min, max) {
            return this.next() * (max - min) + min;
        }
        nextInt(min, max) {
            return this.nextFloat(min, max) | 0;
        }
        random() {
            return this.next();
        }
        nrand() {
            return this.nextFloat(-1, 1);
        }
    }
    exports.default = Random;
});
define("src/Shared/Store2D", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ObjStore2D = exports.AbsStore2D = void 0;
    class AbsStore2D {
        constructor() {
            this._cols = 0;
            this._rows = 0;
        }
        init(cols, rows) {
            this._cols = cols;
            this._rows = rows;
            const size = cols * rows;
            this._p = this._initArrayType(size);
        }
        initByVal(cols, rows, val) {
            this.init(cols, rows);
            const size = cols * rows;
            const valIsFunc = typeof val === 'function';
            for (let i = 0; i < size; i++) {
                this._p[i] = valIsFunc ? val() : val;
            }
        }
        initByStore(cols, rows, val) {
            this._cols = cols;
            this._rows = rows;
            this._p = val;
        }
        addr() {
            return this._p;
        }
        size() {
            return this._rows * this._cols;
        }
        get(col, row) {
            return this._p[row * this._cols + col];
        }
        set(col, row, value) {
            this._p[row * this._cols + col] = value;
        }
        getByIndex(index) {
            return this._p[index];
        }
        setByIndex(index, value) {
            this._p[index] = value;
        }
    }
    exports.AbsStore2D = AbsStore2D;
    class ObjStore2D extends AbsStore2D {
        _initArrayType(size) {
            return new Array(size);
        }
    }
    exports.ObjStore2D = ObjStore2D;
});
define("src/Shared/Vector3Math", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.set = set;
    exports.distance = distance;
    exports.distanceV3XYZ = distanceV3XYZ;
    exports.distanceX1Y1Z1X2Y2Z2 = distanceX1Y1Z1X2Y2Z2;
    exports.normalize = normalize;
    exports.normalizeRef = normalizeRef;
    exports.add = add;
    exports.addRef = addRef;
    exports.subtract = subtract;
    exports.cross = cross;
    /**
     * Sets the specified 3-dimensional vector to the supplied numerical values.
     */
    function set(to, x, y, z) {
        to.x = x;
        to.y = y;
        to.z = z;
        return to;
    }
    /**
     * Returns the Euclidean distance between the two given points.
     */
    function distance(value1, value2) {
        const dx = value1.x - value2.x;
        const dy = value1.y - value2.y;
        const dz = value1.z - value2.z;
        const ls = dx * dx + dy * dy + dz * dz;
        return Math.sqrt(ls);
    }
    /**
     * Returns the Euclidean distance between the two given points.
     */
    function distanceV3XYZ(value1, x, y, z) {
        const dx = value1.x - x;
        const dy = value1.y - y;
        const dz = value1.z - z;
        const ls = dx * dx + dy * dy + dz * dz;
        return Math.sqrt(ls);
    }
    /**
     * Returns the Euclidean distance between the two given points.
     */
    function distanceX1Y1Z1X2Y2Z2(x1, y1, z1, x2, y2, z2) {
        const dx = x1 - x2;
        const dy = y1 - y2;
        const dz = z1 - z2;
        const ls = dx * dx + dy * dy + dz * dz;
        return Math.sqrt(ls);
    }
    /**
     * Returns a vector with the same direction as the given vector, but with a length of 1.
     */
    function normalize(value, out) {
        const ls = value.x * value.x + value.y * value.y + value.z * value.z;
        const length = Math.sqrt(ls);
        return set(out, value.x / length, value.y / length, value.z / length);
    }
    /**
     * Update the vector with the same direction as the given vector, but with a length of 1.
     */
    function normalizeRef(refValue) {
        const ls = refValue.x * refValue.x + refValue.y * refValue.y + refValue.z * refValue.z;
        const length = Math.sqrt(ls);
        refValue.x /= length;
        refValue.y /= length;
        refValue.z /= length;
        return refValue;
    }
    /**
     * Adds two vectors.
     */
    function add(left, right, out) {
        return set(out, left.x + right.x, left.y + right.y, left.z + right.z);
    }
    /**
     * Adds two vectors.
     */
    function addRef(refLeft, right) {
        return add(refLeft, right, refLeft);
    }
    /**
     * Subtracts the second vector from the first.
     */
    function subtract(left, right, out) {
        return set(out, left.x - right.x, left.y - right.y, left.z - right.z);
    }
    /**
     * Computes the cross product of two vectors.
     */
    function cross(vector1, vector2, out) {
        return set(out, vector1.y * vector2.z - vector1.z * vector2.y, vector1.z * vector2.x - vector1.x * vector2.z, vector1.x * vector2.y - vector1.y * vector2.x);
    }
    exports.default = {
        set,
        normalize,
        normalizeRef,
        add,
        subtract,
        addRef,
        distance,
        distanceV3XYZ,
        distanceX1Y1Z1X2Y2Z2,
        cross
    };
});
define("src/Shared/Vector2Math", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.distanceX1Z1X2Z2 = distanceX1Z1X2Z2;
    /**
     * Returns the Euclidean distance between the two given points.
     */
    function distanceX1Z1X2Z2(x1, z1, x2, z2) {
        const dx = x1 - x2;
        const dz = z1 - z2;
        const ls = dx * dx + dz * dz;
        return Math.sqrt(ls);
    }
    exports.default = {
        distanceX1Z1X2Z2,
    };
});
define("src/TerrainSystem/LodManager", ["require", "exports", "src/Shared/Store2D", "src/Shared/Utils", "src/Shared/Vector3Math", "src/Shared/Vector2Math"], function (require, exports, Store2D_mjs_1, Utils_mjs_2, Vector3Math_mjs_1, Vector2Math_mjs_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LodManager = exports.defaultPatchLod = void 0;
    exports.getLodId = getLodId;
    Vector3Math_mjs_1 = __importDefault(Vector3Math_mjs_1);
    Vector2Math_mjs_1 = __importDefault(Vector2Math_mjs_1);
    function getLodId(c, l, r, t, b) {
        const lodCore = c + 1;
        const lodBinaryValue = (l << 3) | (r << 2) | (t << 1) | b;
        return lodCore * 0x1111 - lodBinaryValue;
    }
    exports.defaultPatchLod = {
        distance: 0,
        core: 0,
        left: 0,
        right: 0,
        top: 0,
        bottom: 0,
    };
    const getZeroPatchLod = () => ({
        distance: 0,
        core: 0,
        left: 0,
        right: 0,
        top: 0,
        bottom: 0,
    });
    class LodManager {
        get zFar() { return this._zFar; }
        get maxLOD() { return this._maxLOD; }
        constructor(zFar, patchSize, numPatchesX, numPatchesZ) {
            this.setParams(zFar, patchSize, numPatchesX, numPatchesZ);
        }
        setZFar(zFar) {
            this._zFar = zFar;
            this._calcLodRegions();
        }
        setParams(zFar, patchSize, numPatchesX, numPatchesZ) {
            this._patchSize = patchSize;
            this._numPatchesX = numPatchesX;
            this._numPatchesZ = numPatchesZ;
            this._calcMaxLOD();
            this._map = new Store2D_mjs_1.ObjStore2D();
            this._map.initByVal(numPatchesX, numPatchesZ, getZeroPatchLod);
            this._regions = new Array(this._maxLOD + 1);
            this.setZFar(zFar);
        }
        _calcMaxLOD() {
            const numSegments = this._patchSize - 1;
            const numSegmentsLog2 = Math.log2(numSegments);
            const numSegmentsLog2Ceil = Math.ceil(numSegmentsLog2);
            const numSegmentsLog2Floor = Math.floor(numSegmentsLog2);
            if (numSegmentsLog2Ceil !== numSegmentsLog2Floor) {
                throw new Error("The number of vertices in the patch minus one must be a power of two\n");
            }
            this._maxLOD = numSegmentsLog2Floor - 1;
        }
        _calcLodRegions() {
            // TODO: We can use the ring system to determine the LOD.
            // TODO: Based on the heights we can calculate the optimal lods
            let sum = 0;
            for (let i = 0; i <= this._maxLOD; i++) {
                sum += i + 1;
            }
            let x = this._zFar / sum;
            let temp = 0;
            for (let i = 0; i <= this._maxLOD; i++) {
                const curRange = (x * (i + 1)) | 0;
                this._regions[i] = temp + curRange;
                temp += curRange;
            }
        }
        printLodMap() {
            let str = '';
            const maxLodMaxZ = this._numPatchesZ - 1;
            const maxLodMaxX = this._numPatchesX;
            let maxCore = 0;
            for (let lodMapZ = maxLodMaxZ; lodMapZ >= 0; lodMapZ--) {
                for (let lodMapX = 0; lodMapX < maxLodMaxX; lodMapX++) {
                    const value = this._map.get(lodMapX, lodMapZ).core;
                    if (maxCore < value) {
                        maxCore = value;
                    }
                }
            }
            const lodMaxNumberCount = maxLodMaxZ.toString().length;
            const coreMaxNumberCount = maxCore.toString().length;
            for (let lodMapZ = maxLodMaxZ; lodMapZ >= 0; lodMapZ--) {
                str += (0, Utils_mjs_2.getText)(lodMapZ, lodMaxNumberCount, ' ') + ': ';
                for (let lodMapX = 0; lodMapX < maxLodMaxX; lodMapX++) {
                    const value = this._map.get(lodMapX, lodMapZ).core;
                    str += (0, Utils_mjs_2.getText)(value, coreMaxNumberCount, ' ') + ' ';
                }
                str += '\n';
            }
            console.log(str);
        }
        distanceToLod(distance) {
            let lod = this._maxLOD;
            for (let i = 0; i < this._maxLOD; i++) {
                if (distance < this._regions[i]) {
                    lod = i;
                    break;
                }
            }
            return lod;
        }
        getPatchLod(patchX, patchZ) {
            return this._map.get(patchX, patchZ);
        }
        getPatchLodByIndex(index) {
            return this._map.getByIndex(index);
        }
        update(cameraPos, heightMap, useYPos = true, center = true) {
            const a = this.updateLodMapPass1(cameraPos, heightMap, useYPos, center);
            const b = this.updateLodMapPass2();
            return a || b;
        }
        updateLodMapPass1(cameraPos, heightMap, useYPos, center) {
            let hasChange = false;
            let distanceToCamera;
            const centerStep = this._patchSize / 2 | 0;
            const halfWidth = heightMap.width / 2;
            const halfDepth = heightMap.depth / 2;
            let cameraPosTerrainAltitude = 0;
            if (useYPos) {
                const normalizeCameraX = Math.min(Math.max(center ? cameraPos.x + halfWidth : cameraPos.x, 0), heightMap.width - 1);
                const normalizeCameraZ = Math.min(Math.max(center ? cameraPos.z + halfDepth : cameraPos.z, 0), heightMap.depth - 1);
                cameraPosTerrainAltitude = heightMap.get(normalizeCameraX | 0, normalizeCameraZ | 0);
            }
            for (let lodMapZ = 0; lodMapZ < this._numPatchesZ; lodMapZ++) {
                for (let lodMapX = 0; lodMapX < this._numPatchesX; lodMapX++) {
                    const x = lodMapX * (this._patchSize - 1) + centerStep;
                    const z = lodMapZ * (this._patchSize - 1) + centerStep;
                    const patchCenterX = center ? -halfWidth + x : x;
                    const patchCenterZ = center ? -halfDepth + z : z;
                    if (useYPos) {
                        distanceToCamera = Vector3Math_mjs_1.default.distanceV3XYZ(cameraPos, patchCenterX, cameraPosTerrainAltitude, patchCenterZ);
                    }
                    else {
                        distanceToCamera = Vector2Math_mjs_1.default.distanceX1Z1X2Z2(cameraPos.x, cameraPos.z, patchCenterX, patchCenterZ);
                    }
                    const coreLod = this.distanceToLod(distanceToCamera);
                    const pPatchLOD = this._map.get(lodMapX, lodMapZ);
                    pPatchLOD.distance = distanceToCamera;
                    if (pPatchLOD.core !== coreLod) {
                        pPatchLOD.core = coreLod;
                        hasChange = true;
                    }
                }
            }
            return hasChange;
        }
        updateLodMapPass2() {
            let hasChange = false;
            for (let lodMapZ = 0; lodMapZ < this._numPatchesZ; lodMapZ++) {
                for (let lodMapX = 0; lodMapX < this._numPatchesX; lodMapX++) {
                    const item = this._map.get(lodMapX, lodMapZ);
                    const coreLod = item.core;
                    let indexLeft = lodMapX;
                    let indexRight = lodMapX;
                    let indexTop = lodMapZ;
                    let indexBottom = lodMapZ;
                    if (lodMapX > 0) {
                        indexLeft--;
                        const prev = item.left;
                        const next = this._map.get(indexLeft, lodMapZ).core > coreLod ? 1 : 0;
                        if (prev !== next) {
                            item.left = next;
                            hasChange = true;
                        }
                    }
                    if (lodMapX < this._numPatchesX - 1) {
                        indexRight++;
                        const prev = item.right;
                        const next = this._map.get(indexRight, lodMapZ).core > coreLod ? 1 : 0;
                        if (prev !== next) {
                            item.right = next;
                            hasChange = true;
                        }
                    }
                    if (lodMapZ > 0) {
                        indexBottom--;
                        const prev = item.bottom;
                        const next = this._map.get(lodMapX, indexBottom).core > coreLod ? 1 : 0;
                        if (prev !== next) {
                            item.bottom = next;
                            hasChange = true;
                        }
                    }
                    if (lodMapZ < this._numPatchesZ - 1) {
                        indexTop++;
                        const prev = item.top;
                        const next = this._map.get(lodMapX, indexTop).core > coreLod ? 1 : 0;
                        if (prev !== next) {
                            item.top = next;
                            hasChange = true;
                        }
                    }
                }
            }
            return hasChange;
        }
    }
    exports.LodManager = LodManager;
    exports.default = LodManager;
});
define("src/TerrainSystem/CoordsBuffer", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CoordsBuffer = exports.coordsVertexSize = void 0;
    exports.coordsVertexSize = 2;
    class CoordsBuffer {
        get patchVertexBufferLength() { return this._length; }
        get patchVertexBufferData() { return this._data; }
        get patchVertexBufferTyped() { return this._dataTyped; }
        get width() { return this._width; }
        get depth() { return this._depth; }
        get patchSize() { return this._patchSize; }
        constructor(heightMap, patchSize) {
            this.heightMap = heightMap;
            // We can use uint8 for patches smaller than 255, but we only use 2 bytes,
            // for optimal performance need 4 bytes for the buffer.
            this._patchSize = patchSize;
            this._width = heightMap.width;
            this._depth = heightMap.depth;
            this._length = this._patchSize * this._patchSize;
            const coordsArrLength = this._length * exports.coordsVertexSize;
            const coordsByteLength = coordsArrLength * Uint16Array.BYTES_PER_ELEMENT;
            this._data = new ArrayBuffer(coordsByteLength);
            this._dataTyped = new Uint16Array(this._data, 0, coordsArrLength);
        }
        init() {
            let index = 0;
            for (let z = 0; z < this._patchSize; z++) {
                for (let x = 0; x < this._patchSize; x++) {
                    this._dataTyped[index++] = x;
                    this._dataTyped[index++] = z;
                }
            }
        }
        getPosition(index, buf) {
            const x = index % this._width | 0;
            const z = index / this._width | 0;
            buf.x = x;
            buf.y = this.heightMap.get(x, z);
            buf.z = z;
            return true;
        }
        getPositionWithHeightByFactor(index, buf) {
            const x = index % this._width | 0;
            const z = index / this._width | 0;
            buf.x = x;
            buf.y = this.heightMap.getFactor(x, z);
            buf.z = z;
            return true;
        }
        getCoords(index, buf) {
            const x = index % this._width | 0;
            const z = index / this._width | 0;
            buf.x = x;
            buf.z = z;
            return true;
        }
    }
    exports.CoordsBuffer = CoordsBuffer;
    exports.default = CoordsBuffer;
});
define("src/TerrainSystem/LodInfo", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LodInfo = exports.BOTTOM = exports.TOP = exports.RIGHT = exports.LEFT = void 0;
    exports.initInfo = initInfo;
    exports.LEFT = 2;
    exports.RIGHT = 2;
    exports.TOP = 2;
    exports.BOTTOM = 2;
    function initInfo() {
        const arr = [];
        for (let l = 0; l < exports.LEFT; l++) {
            arr[l] = new Array(exports.RIGHT);
            for (let r = 0; r < exports.RIGHT; r++) {
                arr[l][r] = new Array(exports.TOP);
                for (let t = 0; t < exports.TOP; t++) {
                    arr[l][r][t] = new Array(exports.BOTTOM);
                    for (let b = 0; b < exports.BOTTOM; b++) {
                        arr[l][r][t][b] = {
                            start: 0,
                            count: 0
                        };
                    }
                }
            }
        }
        return arr;
    }
    class LodInfo {
        constructor() {
            this.info = initInfo();
        }
        clear() {
            for (let l = 0; l < exports.LEFT; l++) {
                for (let r = 0; r < exports.RIGHT; r++) {
                    for (let t = 0; t < exports.TOP; t++) {
                        for (let b = 0; b < exports.BOTTOM; b++) {
                            const single = this.info[l][r][t][b];
                            single.start = 0;
                            single.count = 0;
                        }
                    }
                }
            }
        }
    }
    exports.LodInfo = LodInfo;
    exports.default = LodInfo;
});
define("src/TerrainSystem/GridBuilder", ["require", "exports", "src/TerrainSystem/LodInfo", "src/TerrainSystem/LodManager"], function (require, exports, LodInfo_mjs_1, LodManager_mjs_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GridBuilder = void 0;
    LodManager_mjs_1 = __importDefault(LodManager_mjs_1);
    class GridBuilder {
        get zFar() { return this._lodManager.zFar; }
        get width() { return this._grid.width; }
        get depth() { return this._grid.depth; }
        get patchSize() { return this._grid.patchSize; }
        get numPatchesX() { return this._grid.numPatchesX; }
        get numPatchesZ() { return this._grid.numPatchesZ; }
        get maxLOD() { return this.lodManager.maxLOD; }
        get patchIndices() { return this._indices; }
        get lodManager() { return this._lodManager; }
        get lodInfo() { return this._lodInfo; }
        constructor(grid, zFar) {
            this._grid = grid;
            const width = grid.width;
            const depth = grid.depth;
            const patchSize = grid.patchSize;
            const numPatchesX = grid.numPatchesX;
            const numPatchesZ = grid.numPatchesZ;
            if (width >= 0xffff) {
                console.error("Max width = %d\n", 0xffff - 1);
                throw new Error();
            }
            if (depth >= 0xffff) {
                console.error("Max depth = %d\n", 0xffff - 1);
                throw new Error();
            }
            if ((width - 1) % (patchSize - 1) !== 0) {
                const recommendedWidth = ((width - 1 + patchSize - 1) / (patchSize - 1)) * (patchSize - 1) + 1;
                console.error("Width minus 1 (%d) must be divisible by patchSize minus 1 (%d)\n", width, patchSize);
                console.error("Try using Width = %d\n", recommendedWidth);
                throw new Error();
            }
            if ((depth - 1) % (patchSize - 1) !== 0) {
                const recommendedDepth = ((depth - 1 + patchSize - 1) / (patchSize - 1)) * (patchSize - 1) + 1;
                console.error("Depth minus 1 (%d) must be divisible by patchSize minus 1 (%d)\n", depth, patchSize);
                console.error("Try using Width = %d\n", recommendedDepth);
                throw new Error();
            }
            if (patchSize < 3) {
                console.error("The minimum patch size is 3 (%d)\n", patchSize);
                throw new Error();
            }
            if (patchSize % 2 === 0) {
                console.error("Patch size must be an odd number (%d)\n", patchSize);
                throw new Error();
            }
            this._buildLodsAndIndices(zFar, patchSize, numPatchesX, numPatchesZ);
        }
        setZFar(zFar) {
            this._lodManager.setZFar(zFar);
        }
        _buildLodsAndIndices(zFar, patchSize, numPatchesX, numPatchesZ) {
            this._lodManager = new LodManager_mjs_1.default(zFar, patchSize, numPatchesX, numPatchesZ);
            this._lodInfo = new Array(this._lodManager.maxLOD + 1);
            for (let i = 0; i < this._lodInfo.length; i++) {
                this._lodInfo[i] = new LodInfo_mjs_1.LodInfo();
            }
            let numIndices = this._calcNumIndices();
            this._indices = new Uint32Array(numIndices);
            numIndices = this._initIndices(this._indices);
            //console.log("Final number of indices %d\n", numIndices);
        }
        _calcNumIndices() {
            let numQuads = (this.patchSize - 1) * (this.patchSize - 1);
            let numIndices = 0;
            const maxPermutationsPerLevel = 16; // true/false for each of the four sides
            const indicesPerQuad = 6; // two triangles
            for (let lod = 0; lod <= this.maxLOD; lod++) {
                //console.log("LOD %d: num quads %d\n", lod, numQuads);
                numIndices += numQuads * indicesPerQuad * maxPermutationsPerLevel;
                numQuads /= 4;
            }
            //console.log("Initial number of indices %d\n", numIndices);
            return numIndices;
        }
        _initIndices(indices) {
            let index = 0;
            for (let lod = 0; lod <= this.maxLOD; lod++) {
                //console.log("*** Init indices lod %d ***\n", lod);
                index = this._initIndicesLOD(index, indices, lod);
            }
            return index;
        }
        _initIndicesLOD(index, indices, lod) {
            let totalIndicesForLOD = 0;
            for (let l = 0; l < LodInfo_mjs_1.LEFT; l++) {
                for (let r = 0; r < LodInfo_mjs_1.RIGHT; r++) {
                    for (let t = 0; t < LodInfo_mjs_1.TOP; t++) {
                        for (let b = 0; b < LodInfo_mjs_1.BOTTOM; b++) {
                            const info = this._lodInfo[lod].info[l][r][t][b];
                            info.start = index;
                            index = this._initIndicesLODSingle(index, indices, lod, lod + l, lod + r, lod + t, lod + b);
                            info.count = index - info.start;
                            totalIndicesForLOD += info.count;
                        }
                    }
                }
            }
            //console.log("Total indices for LOD: %d\n", totalIndicesForLOD);
            return index;
        }
        _initIndicesLODSingle(index, indices, lodCore, lodLeft, lodRight, lodTop, lodBottom) {
            const width = this.patchSize;
            const fanStep = Math.pow(2, lodCore + 1); // lod = 0 --> 2, lod = 1 --> 4, lod = 2 --> 8, etc
            const endPos = this.patchSize - 1 - fanStep; // patch size 5, fan step 2 --> EndPos = 2; patch size 9, fan step 2 --> EndPos = 6
            for (let z = 0; z <= endPos; z += fanStep) {
                for (let x = 0; x <= endPos; x += fanStep) {
                    const lLeft = x == 0 ? lodLeft : lodCore;
                    const lRight = x == endPos ? lodRight : lodCore;
                    const lBottom = z == 0 ? lodBottom : lodCore;
                    const lTop = z == endPos ? lodTop : lodCore;
                    index = this._createTriangleFan(index, indices, lodCore, lLeft, lRight, lTop, lBottom, x, z, width);
                }
            }
            return index;
        }
        _createTriangleFan(index, indices, lodCore, lodLeft, lodRight, lodTop, lodBottom, x, z, width) {
            const stepLeft = Math.pow(2, lodLeft); // because LOD starts at zero...
            const stepRight = Math.pow(2, lodRight);
            const stepTop = Math.pow(2, lodTop);
            const stepBottom = Math.pow(2, lodBottom);
            const stepCenter = Math.pow(2, lodCore);
            const indexCenter = (z + stepCenter) * width + x + stepCenter;
            // first up
            let indexTemp1 = z * width + x;
            let indexTemp2 = (z + stepLeft) * width + x;
            index = this._addTriangle(index, indices, indexCenter, indexTemp1, indexTemp2);
            // second up
            if (lodLeft == lodCore) {
                indexTemp1 = indexTemp2;
                indexTemp2 += stepLeft * width;
                index = this._addTriangle(index, indices, indexCenter, indexTemp1, indexTemp2);
            }
            // first right
            indexTemp1 = indexTemp2;
            indexTemp2 += stepTop;
            index = this._addTriangle(index, indices, indexCenter, indexTemp1, indexTemp2);
            // second right
            if (lodTop === lodCore) {
                indexTemp1 = indexTemp2;
                indexTemp2 += stepTop;
                index = this._addTriangle(index, indices, indexCenter, indexTemp1, indexTemp2);
            }
            // first down
            indexTemp1 = indexTemp2;
            indexTemp2 -= stepRight * width;
            index = this._addTriangle(index, indices, indexCenter, indexTemp1, indexTemp2);
            // second down
            if (lodRight === lodCore) {
                indexTemp1 = indexTemp2;
                indexTemp2 -= stepRight * width;
                index = this._addTriangle(index, indices, indexCenter, indexTemp1, indexTemp2);
            }
            // first left
            indexTemp1 = indexTemp2;
            indexTemp2 -= stepBottom;
            index = this._addTriangle(index, indices, indexCenter, indexTemp1, indexTemp2);
            // second left
            if (lodBottom === lodCore) {
                indexTemp1 = indexTemp2;
                indexTemp2 -= stepBottom;
                index = this._addTriangle(index, indices, indexCenter, indexTemp1, indexTemp2);
            }
            return index;
        }
        _addTriangle(index, indices, v1, v2, v3) {
            indices[index++] = v1;
            indices[index++] = v2;
            indices[index++] = v3;
            return index;
        }
        destroy() {
            // TODO
        }
    }
    exports.GridBuilder = GridBuilder;
    exports.default = GridBuilder;
});
define("src/TerrainSystem/GeomipGridBuilder", ["require", "exports", "src/TerrainSystem/CoordsBuffer", "src/TerrainSystem/GridBuilder"], function (require, exports, CoordsBuffer_mjs_1, GridBuilder_mjs_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GeomipGridBuilder = void 0;
    GridBuilder_mjs_1 = __importDefault(GridBuilder_mjs_1);
    class GeomipGridBuilder extends GridBuilder_mjs_1.default {
        get patchVertices() { return this._vertices; }
        get heightMap() { return this._heightMap; }
        constructor(heightMap, zFar) {
            super(heightMap, zFar);
            this._heightMap = heightMap;
            this._vertices = new CoordsBuffer_mjs_1.CoordsBuffer(this._heightMap, this._heightMap.patchSize);
            this._vertices.init();
        }
    }
    exports.GeomipGridBuilder = GeomipGridBuilder;
    exports.default = GeomipGridBuilder;
});
define("src/TerrainSystem/GeomipGridRenderPreparer", ["require", "exports", "src/TerrainSystem/GeomipGridBuilder", "src/TerrainSystem/LodManager"], function (require, exports, GeomipGridBuilder_mjs_1, LodManager_mjs_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GeomipGridRenderPreparer = void 0;
    GeomipGridBuilder_mjs_1 = __importDefault(GeomipGridBuilder_mjs_1);
    class GeomipGridRenderPreparer extends GeomipGridBuilder_mjs_1.default {
        initPatches(initializer) {
            for (let patchZ = 0; patchZ < this.numPatchesZ; patchZ++) {
                for (let patchX = 0; patchX < this.numPatchesX; patchX++) {
                    const minX = patchX * (this.patchSize - 1);
                    const minZ = patchZ * (this.patchSize - 1);
                    const info = this.lodInfo[0].info[0][0][0][0];
                    const baseIndex = info.start;
                    const baseVertex = minZ * this.width + minX;
                    initializer.initPatch(baseIndex, baseVertex, info.count, patchX, patchZ, minX, minZ, this.patchSize, LodManager_mjs_2.defaultPatchLod);
                }
            }
        }
        printLodMap() {
            this.lodManager.printLodMap();
        }
        updateLods(localCameraPos, useYPos = true, center = true) {
            this.lodManager.update(localCameraPos, this.heightMap, useYPos, center);
        }
        eachPatches(renderPreparer, frustum) {
            const patchSizeNorm = this.patchSize - 1;
            for (let patchZ = 0; patchZ < this.numPatchesZ; patchZ++) {
                const minZ = patchZ * patchSizeNorm;
                for (let patchX = 0; patchX < this.numPatchesX; patchX++) {
                    const minX = patchX * patchSizeNorm;
                    const visible = !!frustum && this.isPatchInsideViewFrustumBySphere(patchX, patchZ, frustum);
                    const plod = this.lodManager.getPatchLod(patchX, patchZ);
                    const info = this.lodInfo[plod.core].info[plod.left][plod.right][plod.top][plod.bottom];
                    const baseIndex = info.start;
                    const baseVertex = minZ * this.width + minX;
                    renderPreparer.preparePatch(visible, baseIndex, baseVertex, info.count, patchX, patchZ, minX, minZ, this.patchSize, plod);
                }
            }
        }
        isPatchInsideViewFrustumBySphere(patchBaseX, patchBaseZ, frustum) {
            const patchMinHeight = this.heightMap.getPatchMin(patchBaseX, patchBaseZ);
            const patchMaxHeight = this.heightMap.getPatchMax(patchBaseX, patchBaseZ);
            const patchRadiusBySize = this.patchSize / 2;
            const patchRediusByHeight = (patchMaxHeight - patchMinHeight) / 2;
            const patchCenterX = (patchBaseX * this.patchSize) + patchRadiusBySize;
            const patchCenterY = (patchMaxHeight + patchMinHeight) / 2;
            const patchCenterZ = (patchBaseZ * this.patchSize) + patchRadiusBySize;
            const radius = (patchRadiusBySize > patchRediusByHeight ? patchRadiusBySize : patchRediusByHeight) * Math.SQRT2;
            // center the patches relative to the entity center
            const patchCenteredX = (-this.width / 2) + patchCenterX;
            const patchCenteredZ = (-this.depth / 2) + patchCenterZ;
            return frustum.containsSphere(patchCenteredX, patchCenterY, patchCenteredZ, radius);
        }
    }
    exports.GeomipGridRenderPreparer = GeomipGridRenderPreparer;
    exports.default = GeomipGridRenderPreparer;
});
define("src/TerrainSystem/GeomipGrid", ["require", "exports", "src/TerrainSystem/GeomipGridRenderPreparer"], function (require, exports, GeomipGridRenderPreparer_mjs_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GeomipGrid = void 0;
    GeomipGridRenderPreparer_mjs_1 = __importDefault(GeomipGridRenderPreparer_mjs_1);
    class GeomipGrid extends GeomipGridRenderPreparer_mjs_1.default {
        setHeight(x, z, value) {
            this._heightMap.set(x, z, value);
        }
        appendToHeight(x, z, value) {
            this._heightMap.append(x, z, value);
        }
        multiplyToHeight(x, z, value, defaultHeight = 0) {
            this._heightMap.multiply(x, z, value, defaultHeight);
        }
        smoothHeightsZone(zone, np, radius) {
            this._heightMap.smoothZone(zone, np, radius);
        }
        loadHeightMapFromFile(buffer_1, options_1) {
            return __awaiter(this, arguments, void 0, function* (buffer, options, np = -1, radius = 0) {
                const header = yield this._heightMap.fromFile(buffer, options);
                this._heightMap.smooth(np, radius);
                this._heightMap.recalculateMinMax(this._heightMap);
                this._heightMap.recalculateAABB();
                return header;
            });
        }
        loadHeightMapFromImg(img, np = -1, radius = 0) {
            this._heightMap.fromImage(img);
            this._heightMap.smooth(np, radius);
            this._heightMap.recalculateMinMax(this._heightMap);
            this._heightMap.recalculateAABB();
        }
        normalizeHeightMap(maxHeight) {
            maxHeight !== null && maxHeight !== void 0 ? maxHeight : (maxHeight = this._heightMap.maxHeight);
            this._heightMap.normalize(maxHeight);
        }
        setMaxHeight(maxHeight) {
            this._heightMap.setMaxHeight(maxHeight);
        }
        appendHeightMap(heightMap, value, zone, minHeight = null, maxHeight = null) {
            this._heightMap.combineHeights('+', heightMap, value, zone, 0, minHeight, maxHeight);
        }
        recalculateMinMax(zone, aabb = true) {
            this._heightMap.recalculateMinMax(zone);
            if (aabb) {
                this._heightMap.recalculateAABB();
            }
        }
    }
    exports.GeomipGrid = GeomipGrid;
    exports.default = GeomipGrid;
});
define("src/TerrainSystem/Terrain", ["require", "exports", "src/TerrainSystem/GeomipGrid"], function (require, exports, GeomipGrid_mjs_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BaseTerrain = void 0;
    GeomipGrid_mjs_1 = __importDefault(GeomipGrid_mjs_1);
    class BaseTerrain extends GeomipGrid_mjs_1.default {
        get maxHeight() { return this.heightMap.maxHeight; }
    }
    exports.BaseTerrain = BaseTerrain;
    exports.default = BaseTerrain;
});
define("src/TerrainSystem/IPatch", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("src/TerrainSystem/IPatchesInstancing", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("src/TerrainHelpers/ITerrainPatchesInstancing", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("src/TerrainHelpers/TerrainPatchesBasic", ["require", "exports", "src/TerrainSystem/LodManager"], function (require, exports, LodManager_mjs_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TerrainPatchBufferBasic = void 0;
    class TerrainPatchBufferBasic {
        constructor(index, x, z, minX, minZ, size) {
            this.index = index;
            this.x = x;
            this.z = z;
            this.minX = minX;
            this.minZ = minZ;
            this.size = size;
            this.visible = false;
            this.hash = 0;
            this.lod = LodManager_mjs_3.defaultPatchLod;
            this.indicesBaseIndex = 0;
            this.indicesBaseVertex = 0;
            this.indicesCount = 0;
            this.dependencesUpdated = false;
            this.heightsUpdated = false;
            this.heightsUpdatedThisFrame = false;
            this.lastChangeTime = 0;
            this.lastChangeAttachTime = 0;
            this.lastChangeHeightsTime = 0;
        }
    }
    exports.TerrainPatchBufferBasic = TerrainPatchBufferBasic;
    class TerrainPatchesBasic {
        get instancing() { return this._instancing; }
        get bufferArray() { return this._bufferArray; }
        get meshInstanceArray() { return this._meshInstanceArray; }
        get aabb() { return this._aabb; }
        get customMeshInstance() { return this._customMeshInstance; }
        constructor(terrain, instancer) {
            this.customForwardRenderer = false;
            this.terrain = terrain;
            this.customForwardRenderer = false;
            this._useMashesBag = false;
            this._bufferArray = new Array(this.terrain.numPatchesX * this.terrain.numPatchesZ);
            this._meshInstanceArray = new Array(this.terrain.numPatchesX * this.terrain.numPatchesZ);
            this._customMeshInstance = undefined;
            this._patchAvalableCount = 0;
            this._changesIds = [];
            this._aabb = new pc.BoundingBox();
            this._init = false;
            this._instancing = instancer;
            this.updateAabb();
        }
        setMaterial(material) {
            this._material = material;
        }
        setInstancing(value, updateMeshes = true) {
            if (this._instancing === value) {
                return;
            }
            this._destroyMeshes();
            this._instancing = value;
            if (updateMeshes) {
                this.updateMeshes();
            }
        }
        updateAabb() {
            const halfWidth = this.terrain.width / 2;
            const halfDepth = this.terrain.depth / 2;
            this._aabb.setMinMax(new pc.Vec3(-halfWidth, 0, -halfDepth), new pc.Vec3(+halfWidth, this.terrain.maxHeight, +halfDepth));
            if (this._customMeshInstance) {
                this._customMeshInstance.setCustomAabb(this._aabb);
                this._customMeshInstance.mesh.aabb = this._aabb;
            }
            for (const meshInstance of this._meshInstanceArray) {
                if (meshInstance) {
                    meshInstance.setCustomAabb(this._aabb);
                    meshInstance.mesh.aabb = this._aabb;
                }
            }
            if (this.instancing) {
                this.instancing.forEach(item => {
                    if (item.object) {
                        item.object.setCustomAabb(this._aabb);
                        item.object.mesh.aabb = this._aabb;
                    }
                });
            }
        }
        startUpdate() {
        }
        _forceUpdateRenderComponent(entity) {
            let append = false; // destroy prev meshInstances by default
            let meshInstances;
            if (this.customForwardRenderer &&
                this._customMeshInstance) {
                this._useMashesBag = true;
                meshInstances = [this._customMeshInstance];
            }
            else {
                const count = this.instancing
                    ? this.instancing.meshInstanceCount
                    : this._patchAvalableCount;
                meshInstances = new Array(count);
                if (this.instancing) {
                    this.instancing.appendMeshInstances(meshInstances);
                }
                else {
                    // if instancing was used, then we delete all previous instances
                    // or use custom renderer
                    append = !this._useMashesBag;
                    let i = 0;
                    for (let patchIndex = 0; patchIndex < this._meshInstanceArray.length; patchIndex++) {
                        const patchMeshInstance = this._meshInstanceArray[patchIndex];
                        if (patchMeshInstance) {
                            meshInstances[i++] = patchMeshInstance;
                        }
                    }
                    this._changesIds.length = 0;
                }
                this._useMashesBag = !!this.instancing;
            }
            if (entity.render) {
                // TODO: https://github.com/playcanvas/engine/issues/6680
                if (append) {
                    // @ts-ignore
                    entity.render._meshInstances = [];
                }
                entity.render.meshInstances = meshInstances;
            }
            else {
                entity.addComponent('render', {
                    meshInstances: meshInstances,
                    cull: false,
                });
            }
            // Update shadows
            for (const meshInstance of meshInstances) {
                meshInstance.cull = false;
                meshInstance.castShadow = false;
                meshInstance.receiveShadow = false;
            }
        }
        _updateRenderComponent(entity) {
            if (this.customForwardRenderer ||
                this.instancing ||
                this._changesIds.length === 0 ||
                !entity.enabled) {
                return;
            }
            this._forceUpdateRenderComponent(entity);
        }
        updateLods() {
            this.updateIndexBuffer();
            this.updateMeshes();
        }
        _forEach(zone, quad, numQuadX, numQuadZ, callback) {
            if (zone.maxX < 0)
                return;
            if (zone.maxZ < 0)
                return;
            const minX = Math.max(zone.minX, 0);
            const minZ = Math.max(zone.minZ, 0);
            const maxX = Math.min(zone.maxX, this.terrain.width);
            const maxZ = Math.min(zone.maxZ, this.terrain.depth);
            const minPatchX = minX / quad | 0;
            const minPatchZ = minZ / quad | 0;
            const maxPatchX = maxX / quad | 0;
            const maxPatchZ = maxZ / quad | 0;
            const normalizeMinX = Math.max(minPatchX, 0);
            const normalizeMinZ = Math.max(minPatchZ, 0);
            const normalizeMaxX = Math.min(maxPatchX + 1, numQuadX);
            const normalizeMaxZ = Math.min(maxPatchZ + 1, numQuadZ);
            for (let z = normalizeMinZ; z < normalizeMaxZ; z++) {
                for (let x = normalizeMinX; x < normalizeMaxX; x++) {
                    const patchIndex = z * numQuadX + x;
                    if (callback(patchIndex, x, z) === false) {
                        return;
                    }
                }
            }
        }
        forEach(zone, callback) {
            this._forEach(zone, this.terrain.patchSize, this.terrain.numPatchesX, this.terrain.numPatchesZ, callback);
        }
        updateDependencies(zone) {
            const now = performance.now();
            this.forEach(zone, (patchIndex) => {
                const patchBuffer = this._bufferArray[patchIndex];
                patchBuffer.lastChangeTime = now;
                patchBuffer.lastChangeAttachTime = now;
            });
            this._lastChangeTime = now;
            this._lastChangeAttachTime = now;
        }
        updateHeights(zone) {
            const now = performance.now();
            this.forEach(zone, (patchIndex) => {
                const patchBuffer = this._bufferArray[patchIndex];
                patchBuffer.lastChangeTime = now;
                patchBuffer.lastChangeHeightsTime = now;
                patchBuffer.heightsUpdated = true;
            });
            this._lastChangeTime = now;
            this._lastChangeHeightsTime = now;
        }
        _addPatchBuffer(patchIndex, buffer) {
            if (this._bufferArray[patchIndex]) {
                throw new Error('Buffer has already been added');
            }
            this._bufferArray[patchIndex] = buffer;
        }
        _addPatchMeshInstance(patchIndex, meshInstance) {
            if (this._meshInstanceArray[patchIndex]) {
                throw new Error('Mesh instance has already been added');
            }
            this._meshInstanceArray[patchIndex] = meshInstance;
            this._changesIds.push(patchIndex);
            this._patchAvalableCount++;
        }
        endUpdate(hasUpdateHeights) {
            this._updateRenderComponent(this._entity);
        }
        getOrCreatePatchMesh(patchIndex) {
            let patch = this._meshInstanceArray[patchIndex];
            if (!patch) {
                patch = this._createPatchMesh(patchIndex, this._app, this._entity, this._material);
                this._addPatchMeshInstance(patchIndex, patch);
            }
            return patch;
        }
        destroyPatchMesh(patchIndex) {
            this._destroyPatchMesh(patchIndex);
            const patchMeshInstance = this._meshInstanceArray[patchIndex];
            if (patchMeshInstance) {
                this._patchAvalableCount--;
                this._changesIds.push(patchIndex);
                delete this._meshInstanceArray[patchIndex];
            }
        }
        destroyPatchesMesh() {
            for (let z = 0; z < this.terrain.numPatchesZ; z++) {
                for (let x = 0; x < this.terrain.numPatchesX; x++) {
                    const index = z * this.terrain.numPatchesX + x;
                    this.destroyPatchMesh(index);
                }
            }
        }
        updatePatchesMeshMaterial() {
            for (let z = 0; z < this.terrain.numPatchesZ; z++) {
                for (let x = 0; x < this.terrain.numPatchesX; x++) {
                    const index = z * this.terrain.numPatchesX + x;
                    const meshInstance = this._meshInstanceArray[index];
                    if (meshInstance) {
                        meshInstance.material = this._material;
                    }
                }
            }
        }
        _destroyMeshes() {
            var _a;
            if (this._customMeshInstance) {
                this._destroyCustomBagMesh(this._customMeshInstance);
                this._customMeshInstance = undefined;
            }
            (_a = this.instancing) === null || _a === void 0 ? void 0 : _a.destroy((mesh) => {
                this._destroyInstancingMesh(mesh);
            });
            if (this.customForwardRenderer || this.instancing) {
                this.destroyPatchesMesh();
            }
        }
        updateMeshes() {
            if (!this._init) {
                return;
            }
            this._destroyMeshes();
            if (this.customForwardRenderer) {
                this._customMeshInstance = this._createCustomBagMesh(this._app, this._entity, this._material, this.terrain);
            }
            else if (this.instancing) {
                this.instancing.buildFromTerrain(this.terrain, (lodInfo, primitiveInfo, data) => {
                    return this._createInstancingMesh(this._app, this._entity, this._material, lodInfo, primitiveInfo, this.instancing, data);
                });
            }
            else {
                this.updatePatchesMeshMaterial();
            }
            this._forceUpdateRenderComponent(this._entity);
        }
        init(app, entity, material) {
            if (this._init) {
                throw new Error('The terrain patches was initialized earlier');
            }
            this._init = true;
            this._app = app;
            this._entity = entity;
            // for other language use internal class
            const initializer = {
                initPatch: (baseIndex, baseVertex, count, patchX, patchZ, minX, minZ, size, lodInfo) => {
                    const patchIndex = patchZ * this.terrain.numPatchesX + patchX;
                    const buffer = this._createPatchBuffer(patchIndex, baseIndex, baseVertex, count, patchX, patchZ, minX, minZ, size, lodInfo);
                    this._addPatchBuffer(patchIndex, buffer);
                }
            };
            this.setMaterial(material);
            this.terrain.initPatches(initializer);
            this.updateMeshes();
        }
    }
    exports.default = TerrainPatchesBasic;
});
define("src/TerrainSystem/PatchesCombineInstancing", ["require", "exports", "src/TerrainSystem/LodInfo", "src/TerrainSystem/LodManager"], function (require, exports, LodInfo_mjs_2, LodManager_mjs_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PatchCombineInstancing = exports.TComInstCoordsOffsetArrType = exports.combineGroupLen = exports.comInstDataSize = void 0;
    exports.comInstDataSize = 4;
    exports.combineGroupLen = 6;
    exports.TComInstCoordsOffsetArrType = Uint8Array;
    class PatchCombineInstancing {
        get patchCount() { return this._patchCount; }
        constructor() {
            this.data = [];
            this._patchCount = 0;
        }
        forEach(fn) {
            for (let c = 0; c < this.data.length; c++) {
                for (let i = 0; i < exports.combineGroupLen; i++) {
                    const segment = this.data[c].groups[i];
                    fn(segment);
                }
            }
        }
        destroySegmentObjects(index, destructor) {
            for (let i = 0; i < exports.combineGroupLen; i++) {
                const segment = this.data[index].groups[i];
                if (segment.object) {
                    destructor(segment.object);
                    segment.object = null;
                }
            }
        }
        destroy(destructor) {
            for (let i = 0; i < this.data.length; i++) {
                this.destroySegmentObjects(i, destructor);
            }
            this.data.length = 0;
        }
        buildFromTerrain(terrain, objectBuilder) {
            this._patchCount = terrain.numPatchesX * terrain.numPatchesZ;
            this.data = new Array(terrain.lodInfo.length);
            for (let lodCore = 0; lodCore < this.data.length; lodCore++) {
                this.data[lodCore] = this._buildInfo(lodCore, terrain.lodInfo[lodCore], this._patchCount, objectBuilder);
            }
        }
        _buildInfo(lodCore, lodInfo, patchCount, objectBuilder) {
            const groups = new Array(exports.combineGroupLen);
            const items = new Array(LodInfo_mjs_2.LEFT);
            for (let l = 0; l < LodInfo_mjs_2.LEFT; l++) {
                items[l] = new Array(LodInfo_mjs_2.RIGHT);
                for (let r = 0; r < LodInfo_mjs_2.RIGHT; r++) {
                    items[l][r] = new Array(LodInfo_mjs_2.TOP);
                    for (let t = 0; t < LodInfo_mjs_2.TOP; t++) {
                        items[l][r][t] = new Array(LodInfo_mjs_2.BOTTOM);
                        for (let b = 0; b < LodInfo_mjs_2.BOTTOM; b++) {
                            const id = (0, LodManager_mjs_4.getLodId)(lodCore, l, r, t, b);
                            let mainId;
                            let groupId;
                            let angle;
                            if (l === 0 && r === 0 && t === 0 && b === 0) {
                                mainId = (0, LodManager_mjs_4.getLodId)(lodCore, 0, 0, 0, 0);
                                groupId = 0;
                                angle = 0;
                            }
                            else if (l === 1 && r === 0 && t === 0 && b === 0) {
                                mainId = (0, LodManager_mjs_4.getLodId)(lodCore, 1, 0, 0, 0);
                                groupId = 1;
                                angle = 0;
                            }
                            else if (l === 0 && r === 0 && t === 1 && b === 0) {
                                mainId = (0, LodManager_mjs_4.getLodId)(lodCore, 1, 0, 0, 0);
                                groupId = 1;
                                angle = 90;
                            }
                            else if (l === 0 && r === 1 && t === 0 && b === 0) {
                                mainId = (0, LodManager_mjs_4.getLodId)(lodCore, 1, 0, 0, 0);
                                groupId = 1;
                                angle = 180;
                            }
                            else if (l === 0 && r === 0 && t === 0 && b === 1) {
                                mainId = (0, LodManager_mjs_4.getLodId)(lodCore, 1, 0, 0, 0);
                                groupId = 1;
                                angle = 270;
                            }
                            else if (l === 1 && r === 0 && t === 1 && b === 0) {
                                mainId = (0, LodManager_mjs_4.getLodId)(lodCore, 1, 0, 1, 0);
                                groupId = 2;
                                angle = 0;
                            }
                            else if (l === 0 && r === 1 && t === 1 && b === 0) {
                                mainId = (0, LodManager_mjs_4.getLodId)(lodCore, 1, 0, 1, 0);
                                groupId = 2;
                                angle = 90;
                            }
                            else if (l === 0 && r === 1 && t === 0 && b === 1) {
                                mainId = (0, LodManager_mjs_4.getLodId)(lodCore, 1, 0, 1, 0);
                                groupId = 2;
                                angle = 180;
                            }
                            else if (l === 1 && r === 0 && t === 0 && b === 1) {
                                mainId = (0, LodManager_mjs_4.getLodId)(lodCore, 1, 0, 1, 0);
                                groupId = 2;
                                angle = 270;
                            }
                            else if (l === 1 && r === 1 && t === 0 && b === 0) {
                                mainId = (0, LodManager_mjs_4.getLodId)(lodCore, 1, 1, 0, 0);
                                groupId = 3;
                                angle = 0;
                            }
                            else if (l === 0 && r === 0 && t === 1 && b === 1) {
                                mainId = (0, LodManager_mjs_4.getLodId)(lodCore, 1, 1, 0, 0);
                                groupId = 3;
                                angle = 90;
                            }
                            else if (l === 1 && r === 0 && t === 1 && b === 1) {
                                mainId = (0, LodManager_mjs_4.getLodId)(lodCore, 1, 0, 1, 1);
                                groupId = 4;
                                angle = 0;
                            }
                            else if (l === 1 && r === 1 && t === 1 && b === 0) {
                                mainId = (0, LodManager_mjs_4.getLodId)(lodCore, 1, 0, 1, 1);
                                groupId = 4;
                                angle = 90;
                            }
                            else if (l === 0 && r === 1 && t === 1 && b === 1) {
                                mainId = (0, LodManager_mjs_4.getLodId)(lodCore, 1, 0, 1, 1);
                                groupId = 4;
                                angle = 180;
                            }
                            else if (l === 1 && r === 1 && t === 0 && b === 1) {
                                mainId = (0, LodManager_mjs_4.getLodId)(lodCore, 1, 0, 1, 1);
                                groupId = 4;
                                angle = 270;
                            }
                            else if (l === 1 && r === 1 && t === 1 && b === 1) {
                                mainId = (0, LodManager_mjs_4.getLodId)(lodCore, 1, 1, 1, 1);
                                groupId = 5;
                                angle = 0;
                            }
                            else {
                                throw new Error(`Can\'t combine ${l},${r},${t},${b}`);
                            }
                            items[l][r][t][b] = {
                                mainId,
                                groupId,
                                angle: angle / 90, // save for uint8
                            };
                            if (id === mainId) {
                                const info = lodInfo.info[l][r][t][b];
                                const lod = {
                                    core: lodCore,
                                    left: l,
                                    right: r,
                                    top: t,
                                    bottom: b
                                };
                                const data = new exports.TComInstCoordsOffsetArrType(patchCount * exports.comInstDataSize);
                                const object = objectBuilder ? objectBuilder(lod, info, data, patchCount) : null;
                                groups[groupId] = {
                                    vertexBaseIndex: info.start,
                                    vertexCount: info.count,
                                    count: 0,
                                    data: data,
                                    object: object,
                                    hasChanges: false,
                                };
                            }
                        }
                    }
                }
            }
            return {
                groups,
                items
            };
        }
        get(lod) {
            const data = this.data[lod.core];
            const groupId = data.items[lod.left][lod.right][lod.top][lod.bottom].groupId;
            return data.groups[groupId];
        }
        increment(lod, patch) {
            const data = this.data[lod.core];
            const item = data.items[lod.left][lod.right][lod.top][lod.bottom];
            const single = data.groups[item.groupId];
            const prevIndex = single.count;
            const index = prevIndex * exports.comInstDataSize;
            if (single.data[index + 0] !== patch.x ||
                single.data[index + 1] !== patch.z ||
                single.data[index + 2] !== item.angle) {
                single.data[index + 0] = patch.x;
                single.data[index + 1] = patch.z;
                single.data[index + 2] = item.angle;
                single.hasChanges = true;
            }
            single.count++;
            return single;
        }
        zeroAll() {
            for (let lodCore = 0; lodCore < this.data.length; lodCore++) {
                for (let i = 0; i < exports.combineGroupLen; i++) {
                    const single = this.data[lodCore].groups[i];
                    single.count = 0;
                }
            }
        }
    }
    exports.PatchCombineInstancing = PatchCombineInstancing;
});
define("src/TerrainHelpers/TerrainPatchesCombineInstancing", ["require", "exports", "src/TerrainSystem/PatchesCombineInstancing"], function (require, exports, PatchesCombineInstancing_mjs_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TerrainPathcesCombineInstancing = void 0;
    class TerrainPathcesCombineInstancing extends PatchesCombineInstancing_mjs_1.PatchCombineInstancing {
        constructor() {
            super(...arguments);
            this.bufferType = PatchesCombineInstancing_mjs_1.TComInstCoordsOffsetArrType;
            this.itemBufferSize = 4;
        }
        get meshInstanceCount() { return this.data.length * PatchesCombineInstancing_mjs_1.combineGroupLen; }
        appendMeshInstances(arr, offset = 0) {
            let meshIndex = 0;
            for (let c = 0; c < this.data.length; c++) {
                for (let i = 0; i < PatchesCombineInstancing_mjs_1.combineGroupLen; i++) {
                    const chunk = this.data[c].groups[i];
                    if (chunk.object) {
                        arr[meshIndex++ + offset] = chunk.object;
                    }
                }
            }
            return meshIndex;
        }
        begin(castShadow = false, receiveShadow = false) {
            for (let c = 0; c < this.data.length; c++) {
                for (let i = 0; i < PatchesCombineInstancing_mjs_1.combineGroupLen; i++) {
                    const chunk = this.data[c].groups[i];
                    const chunkObject = chunk.object;
                    chunk.count = 0;
                    chunk.hasChanges = false;
                    if (chunkObject) {
                        chunkObject.visible = false;
                        chunkObject.visibleThisFrame = false;
                        chunkObject.castShadow = castShadow;
                        chunkObject.receiveShadow = receiveShadow;
                    }
                }
            }
        }
        end() {
            for (let c = 0; c < this.data.length; c++) {
                for (let i = 0; i < PatchesCombineInstancing_mjs_1.combineGroupLen; i++) {
                    const chunk = this.data[c].groups[i];
                    const chunkObject = chunk.object;
                    if (chunkObject && chunk.count > 0) {
                        chunkObject.instancingCount = chunk.count;
                        if (chunk.hasChanges && chunkObject.instancingData) {
                            // TODO: performance improvement
                            //chunkObject.instancingData.vertexBuffer?.unlock();
                            const length = chunk.count * PatchesCombineInstancing_mjs_1.comInstDataSize;
                            const vertexBuffer = chunkObject.instancingData.vertexBuffer;
                            this._updateBuffer(vertexBuffer, chunk.data, length);
                        }
                    }
                }
            }
        }
        _updateBuffer(vertexBuffer, data, length) {
            if (vertexBuffer) {
                const device = vertexBuffer.device;
                if (device.isWebGL2) {
                    const gl = device.gl;
                    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer.impl.bufferId);
                    gl.bufferSubData(gl.ARRAY_BUFFER, 0, data, 0, length);
                }
                else if (device.isWebGPU) {
                    const wgpu = device.wgpu;
                    const buffer = vertexBuffer.impl.buffer;
                    wgpu.queue.writeBuffer(buffer, 0, data, 0, length);
                }
                else {
                    console.error('Unsupported device');
                }
            }
        }
    }
    exports.TerrainPathcesCombineInstancing = TerrainPathcesCombineInstancing;
});
define("src/TerrainSystem/PatchesInstancing", ["require", "exports", "src/TerrainSystem/LodInfo"], function (require, exports, LodInfo_mjs_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PatchInstancing = exports.TInstCoordsOffsetArrType = exports.instDataSize = void 0;
    exports.instDataSize = 2;
    exports.TInstCoordsOffsetArrType = Uint16Array;
    class PatchInstancing {
        get patchCount() { return this._patchCount; }
        constructor() {
            this.data = [];
            this._patchCount = 0;
        }
        forEach(fn) {
            for (let c = 0; c < this.data.length; c++) {
                for (let l = 0; l < LodInfo_mjs_3.LEFT; l++) {
                    for (let r = 0; r < LodInfo_mjs_3.RIGHT; r++) {
                        for (let t = 0; t < LodInfo_mjs_3.TOP; t++) {
                            for (let b = 0; b < LodInfo_mjs_3.BOTTOM; b++) {
                                const segment = this.data[c][l][r][t][b];
                                fn(segment);
                            }
                        }
                    }
                }
            }
        }
        destroySegmentObjects(index, destructor) {
            for (let l = 0; l < LodInfo_mjs_3.LEFT; l++) {
                for (let r = 0; r < LodInfo_mjs_3.RIGHT; r++) {
                    for (let t = 0; t < LodInfo_mjs_3.TOP; t++) {
                        for (let b = 0; b < LodInfo_mjs_3.BOTTOM; b++) {
                            const segment = this.data[index][l][r][t][b];
                            if (segment.object) {
                                destructor(segment.object);
                                segment.object = null;
                            }
                        }
                    }
                }
            }
        }
        destroy(destructor) {
            for (let i = 0; i < this.data.length; i++) {
                this.destroySegmentObjects(i, destructor);
            }
            this.data.length = 0;
        }
        buildFromTerrain(terrain, objectBuilder) {
            this._patchCount = terrain.numPatchesX * terrain.numPatchesZ;
            this.data = new Array(terrain.lodInfo.length);
            for (let lodCore = 0; lodCore < this.data.length; lodCore++) {
                this.data[lodCore] = this._buildInfo(lodCore, terrain.lodInfo[lodCore], this._patchCount, objectBuilder);
            }
        }
        _buildInfo(lodCore, lodInfo, patchCount, objectBuilder) {
            const arr = new Array(LodInfo_mjs_3.LEFT);
            for (let l = 0; l < LodInfo_mjs_3.LEFT; l++) {
                arr[l] = new Array(LodInfo_mjs_3.RIGHT);
                for (let r = 0; r < LodInfo_mjs_3.RIGHT; r++) {
                    arr[l][r] = new Array(LodInfo_mjs_3.TOP);
                    for (let t = 0; t < LodInfo_mjs_3.TOP; t++) {
                        arr[l][r][t] = new Array(LodInfo_mjs_3.BOTTOM);
                        for (let b = 0; b < LodInfo_mjs_3.BOTTOM; b++) {
                            const info = lodInfo.info[l][r][t][b];
                            const lod = {
                                core: lodCore,
                                left: l,
                                right: r,
                                top: t,
                                bottom: b
                            };
                            const data = new exports.TInstCoordsOffsetArrType(patchCount * exports.instDataSize);
                            const object = objectBuilder ? objectBuilder(lod, info, data, patchCount) : null;
                            arr[l][r][t][b] = {
                                vertexBaseIndex: info.start,
                                vertexCount: info.count,
                                count: 0,
                                data: data,
                                object: object,
                                hasChanges: false,
                            };
                        }
                    }
                }
            }
            return arr;
        }
        get(lod) {
            return this.data[lod.core][lod.left][lod.right][lod.top][lod.bottom];
        }
        increment(lod, patch) {
            const single = this.get(lod);
            const prevIndex = single.count;
            const index = prevIndex * exports.instDataSize;
            if (single.data[index + 0] !== patch.minX ||
                single.data[index + 1] !== patch.minZ) {
                single.data[index + 0] = patch.minX;
                single.data[index + 1] = patch.minZ;
                single.hasChanges = true;
            }
            single.count++;
            return single;
        }
        zeroAll() {
            for (let lodCore = 0; lodCore < this.data.length; lodCore++) {
                for (let l = 0; l < LodInfo_mjs_3.LEFT; l++) {
                    for (let r = 0; r < LodInfo_mjs_3.RIGHT; r++) {
                        for (let t = 0; t < LodInfo_mjs_3.TOP; t++) {
                            for (let b = 0; b < LodInfo_mjs_3.BOTTOM; b++) {
                                const single = this.data[lodCore][l][r][t][b];
                                single.count = 0;
                            }
                        }
                    }
                }
            }
        }
    }
    exports.PatchInstancing = PatchInstancing;
});
define("src/TerrainHelpers/TerrainPatchesInstancing", ["require", "exports", "src/TerrainSystem/LodInfo", "src/TerrainSystem/PatchesInstancing"], function (require, exports, LodInfo_mjs_4, PatchesInstancing_mjs_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TerrainPathcesInstancing = void 0;
    class TerrainPathcesInstancing extends PatchesInstancing_mjs_1.PatchInstancing {
        constructor() {
            super(...arguments);
            this.bufferType = PatchesInstancing_mjs_1.TInstCoordsOffsetArrType;
            this.itemBufferSize = 2;
        }
        get meshInstanceCount() { return this.data.length * LodInfo_mjs_4.LEFT * LodInfo_mjs_4.RIGHT * LodInfo_mjs_4.TOP * LodInfo_mjs_4.BOTTOM; }
        appendMeshInstances(arr, offset = 0) {
            let i = 0;
            for (let c = 0; c < this.data.length; c++) {
                for (let l = 0; l < LodInfo_mjs_4.LEFT; l++) {
                    for (let r = 0; r < LodInfo_mjs_4.RIGHT; r++) {
                        for (let t = 0; t < LodInfo_mjs_4.TOP; t++) {
                            for (let b = 0; b < LodInfo_mjs_4.BOTTOM; b++) {
                                const chunk = this.data[c][l][r][t][b];
                                if (chunk.object) {
                                    arr[i++ + offset] = chunk.object;
                                }
                            }
                        }
                    }
                }
            }
            return i;
        }
        begin(castShadow = false, receiveShadow = false) {
            for (let c = 0; c < this.data.length; c++) {
                for (let l = 0; l < LodInfo_mjs_4.LEFT; l++) {
                    for (let r = 0; r < LodInfo_mjs_4.RIGHT; r++) {
                        for (let t = 0; t < LodInfo_mjs_4.TOP; t++) {
                            for (let b = 0; b < LodInfo_mjs_4.BOTTOM; b++) {
                                const chunk = this.data[c][l][r][t][b];
                                const chunkObject = chunk.object;
                                chunk.count = 0;
                                chunk.hasChanges = false;
                                if (chunkObject) {
                                    chunkObject.visible = false;
                                    chunkObject.visibleThisFrame = false;
                                    chunkObject.castShadow = castShadow;
                                    chunkObject.receiveShadow = receiveShadow;
                                }
                            }
                        }
                    }
                }
            }
        }
        end() {
            for (let c = 0; c < this.data.length; c++) {
                for (let l = 0; l < LodInfo_mjs_4.LEFT; l++) {
                    for (let r = 0; r < LodInfo_mjs_4.RIGHT; r++) {
                        for (let t = 0; t < LodInfo_mjs_4.TOP; t++) {
                            for (let b = 0; b < LodInfo_mjs_4.BOTTOM; b++) {
                                const chunk = this.data[c][l][r][t][b];
                                const chunkObject = chunk.object;
                                if (chunkObject && chunk.count > 0) {
                                    chunkObject.instancingCount = chunk.count;
                                    if (chunk.hasChanges && chunkObject.instancingData) {
                                        // TODO: performance improvement
                                        //chunkObject.instancingData.vertexBuffer?.unlock();
                                        const length = chunk.count * PatchesInstancing_mjs_1.instDataSize;
                                        const vertexBuffer = chunkObject.instancingData.vertexBuffer;
                                        this._updateBuffer(vertexBuffer, chunk.data, length);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        _updateBuffer(vertexBuffer, data, length) {
            if (vertexBuffer) {
                const device = vertexBuffer.device;
                if (device.isWebGL2) {
                    const gl = device.gl;
                    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer.impl.bufferId);
                    gl.bufferSubData(gl.ARRAY_BUFFER, 0, data, 0, length);
                }
                else if (device.isWebGPU) {
                    const wgpu = device.wgpu;
                    const buffer = vertexBuffer.impl.buffer;
                    wgpu.queue.writeBuffer(buffer, 0, data, 0, length);
                }
                else {
                    console.error('Unsupported device');
                }
            }
        }
    }
    exports.TerrainPathcesInstancing = TerrainPathcesInstancing;
});
define("src/TerrainHelpers/TerrainPatches", ["require", "exports", "src/TerrainSystem/CoordsBuffer", "src/TerrainHelpers/TerrainPatchesBasic", "src/TerrainHelpers/TerrainPatchesShaderChunks", "src/TerrainSystem/CompressedPatchedHeightMap", "src/Shared/Utils", "src/TerrainHelpers/TerrainPatchesCombineInstancing", "src/TerrainHelpers/TerrainPatchesInstancing"], function (require, exports, CoordsBuffer_mjs_2, TerrainPatchesBasic_mjs_1, TerrainPatchesShaderChunks_mjs_2, CompressedPatchedHeightMap_mjs_1, Utils_mjs_3, TerrainPatchesCombineInstancing_mjs_1, TerrainPatchesInstancing_mjs_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getHeightMapFormat = getHeightMapFormat;
    exports.getHeightMapChunkBufferType = getHeightMapChunkBufferType;
    TerrainPatchesBasic_mjs_1 = __importStar(TerrainPatchesBasic_mjs_1);
    CompressedPatchedHeightMap_mjs_1 = __importDefault(CompressedPatchedHeightMap_mjs_1);
    function getHeightMapFormat(graphicsDevice, heightMap) {
        let hmFormat = (0, Utils_mjs_3.checkSupportR32FTexture)(graphicsDevice) ? 'r32f' : 'rgba';
        if (heightMap instanceof CompressedPatchedHeightMap_mjs_1.default) {
            hmFormat = heightMap.compressAlgoritm === 'x4' ? 'rgbaX4' : 'rgbaX2';
        }
        return hmFormat;
    }
    function getHeightMapChunkBufferType(graphicsDevice, format) {
        if (format === pc.PIXELFORMAT_R32F) {
            return Float32Array;
        }
        if (format === pc.PIXELFORMAT_RG16U) {
            return Uint16Array;
        }
        if (format === pc.PIXELFORMAT_RGBA8U) {
            return Uint8Array;
        }
        throw new Error('Unsupported format');
    }
    class TerrainPatches extends TerrainPatchesBasic_mjs_1.default {
        get heightMapTexture() { return this._heightMap; }
        _updatePatchHeightsOnGPU(dataChunkX, dataChunkZ) {
            // TODO: a batch update may be required.
            // TODO: transform in heightmap class
            const dataChunkSize = this.terrain.heightMap.dataChunkSize;
            const level = this.terrain.heightMap.getChunkIndex(dataChunkX, dataChunkZ);
            const buffer = this.terrain.heightMap.getChunkBuffer(this._heightMapLevelsType, dataChunkX, dataChunkZ);
            if (this._app.graphicsDevice.isWebGL2) {
                const gl = this._app.graphicsDevice.gl;
                const textureFormat = this._heightMap.impl._glFormat;
                const texturePixelT = this._heightMap.impl._glPixelType;
                const textureTarget = this._heightMap.impl._glTarget;
                const textureObject = this._heightMap.impl._glTexture;
                gl.bindTexture(textureTarget, textureObject);
                gl.texSubImage3D(gl.TEXTURE_2D_ARRAY, 0, 0, 0, level, dataChunkSize, dataChunkSize, 1, textureFormat, texturePixelT, buffer);
            }
            else if (this._app.graphicsDevice.isWebGPU) {
                const webgpu = this._app.graphicsDevice.wgpu;
                const texture = (this._heightMap.impl.gpuTexture);
                webgpu.queue.writeTexture({
                    texture: texture,
                    origin: [0, 0, level],
                    mipLevel: 0
                }, buffer, {
                    offset: 0,
                    bytesPerRow: dataChunkSize * 4, // always 4 for rgba format
                    rowsPerImage: dataChunkSize
                }, {
                    width: dataChunkSize,
                    height: dataChunkSize
                });
            }
        }
        _updateHeightMap(zone) {
            this._forEach(zone, this.terrain.heightMap.dataChunkSize, this.terrain.heightMap.dataNumChunksX, this.terrain.heightMap.dataNumChunksZ, (patchIndex, x, z) => {
                this._updatePatchHeightsOnGPU(x, z);
            });
        }
        _createPatchBuffer(patchIndex, baseIndex, baseVertex, count, patchX, patchZ, minX, minZ, size, lod) {
            const patchBuf = new TerrainPatchesBasic_mjs_1.TerrainPatchBufferBasic(patchIndex, patchX, patchZ, minX, minZ, size);
            patchBuf.lod = lod;
            patchBuf.indicesBaseIndex = baseIndex;
            patchBuf.indicesBaseVertex = baseVertex;
            patchBuf.indicesCount = count;
            patchBuf.dependencesUpdated = false;
            patchBuf.heightsUpdated = false;
            return patchBuf;
        }
        _buildVertexFormat(graphicsDevice, vertexBuffer) {
            const coordsFormat = (vertexBuffer.patchVertexBufferTyped instanceof Uint8Array) ? pc.TYPE_UINT8 : pc.TYPE_UINT16;
            const vertexDesc = [{
                    semantic: pc.SEMANTIC_POSITION,
                    components: CoordsBuffer_mjs_2.coordsVertexSize,
                    type: coordsFormat,
                    normalize: false,
                    asInt: true
                }];
            return new pc.VertexFormat(graphicsDevice, vertexDesc, vertexBuffer.patchVertexBufferLength);
        }
        _buildInstancingVertexFormat(graphicsDevice, instancer) {
            const type = instancer.bufferType === Uint16Array ? pc.TYPE_UINT16 :
                instancer.bufferType === Uint8Array ? pc.TYPE_UINT8 :
                    pc.TYPE_FLOAT32;
            return new pc.VertexFormat(graphicsDevice, [{
                    semantic: pc.SEMANTIC_ATTR10,
                    components: instancer.itemBufferSize,
                    type: type,
                    normalize: false,
                    asInt: true
                }]);
        }
        _buildInstancingVertexBuffer(graphicsDevice, instancer, data) {
            return new pc.VertexBuffer(graphicsDevice, this._buildInstancingVertexFormat(graphicsDevice, instancer), data.length / instancer.itemBufferSize, {
                usage: pc.BUFFER_GPUDYNAMIC,
                data: data,
                storage: false,
            });
        }
        _setCustomPrimitiveChunks(terrain, mesh) {
            const patches = new Array(terrain.numPatchesX * terrain.numPatchesZ);
            for (let patchZ = 0; patchZ < terrain.numPatchesZ; patchZ++) {
                for (let patchX = 0; patchX < terrain.numPatchesX; patchX++) {
                    const patchIndex = patchZ * terrain.numPatchesX + patchX;
                    const patchBuf = this.bufferArray[patchIndex];
                    patches[patchIndex] = {
                        type: pc.PRIMITIVE_TRIANGLES,
                        enabled: false,
                        base: 0,
                        count: 0,
                        indexed: true,
                        attributes: {
                            [TerrainPatchesShaderChunks_mjs_2.patchCoordOffsetParamName]: [patchBuf.minX, patchBuf.minZ],
                            [TerrainPatchesShaderChunks_mjs_2.patchLodCoreParamName]: patchBuf.lod.core,
                        }
                    };
                }
            }
            mesh.primitiveChunks = [patches];
        }
        _createCustomBagMesh(app, entity, material, terrain) {
            const patchMesh = new pc.Mesh(app.graphicsDevice);
            const primitive = patchMesh.primitive[0];
            patchMesh.aabb = this.aabb;
            patchMesh.indexBuffer[0] = this._sharedIndexBuffer;
            patchMesh.vertexBuffer = this._sharedVertexBuffer;
            this._setCustomPrimitiveChunks(terrain, patchMesh);
            primitive.type = pc.PRIMITIVE_TRIANGLES;
            primitive.base = 0;
            primitive.count = 0;
            primitive.indexed = true;
            const patchMeshInstance = new pc.MeshInstance(patchMesh, material, entity);
            patchMeshInstance.cull = false;
            patchMeshInstance.visible = false;
            patchMeshInstance.visibleThisFrame = false;
            patchMeshInstance.castShadow = false;
            patchMeshInstance.receiveShadow = false;
            patchMeshInstance.setParameter(TerrainPatchesShaderChunks_mjs_2.patchLodCoreParamName, 0, 0xffffffff);
            patchMeshInstance.setParameter(TerrainPatchesShaderChunks_mjs_2.patchCoordOffsetParamName, [0, 0], 0xffffffff);
            patchMeshInstance.setInstancing(null);
            patchMeshInstance.setCustomAabb(this.aabb);
            return patchMeshInstance;
        }
        _createInstancingMesh(app, entity, material, lodInfo, primitiveInfo, instancer, data) {
            const patchMesh = new pc.Mesh(app.graphicsDevice);
            const primitive = patchMesh.primitive[0];
            const instancingBuf = this._buildInstancingVertexBuffer(app.graphicsDevice, instancer, data);
            patchMesh.aabb = this.aabb;
            patchMesh.indexBuffer[0] = this._sharedIndexBuffer;
            patchMesh.vertexBuffer = this._sharedVertexBuffer;
            primitive.type = pc.PRIMITIVE_TRIANGLES;
            primitive.base = primitiveInfo.start;
            primitive.count = primitiveInfo.count;
            primitive.indexed = true;
            const patchMeshInstance = new pc.MeshInstance(patchMesh, material, entity);
            patchMeshInstance.cull = false;
            patchMeshInstance.visible = false;
            patchMeshInstance.visibleThisFrame = false;
            patchMeshInstance.castShadow = false;
            patchMeshInstance.receiveShadow = false;
            patchMeshInstance.setParameter(TerrainPatchesShaderChunks_mjs_2.patchLodCoreParamName, lodInfo.core, 0xffffffff);
            patchMeshInstance.setInstancing(instancingBuf, false);
            patchMeshInstance.setCustomAabb(this.aabb);
            return patchMeshInstance;
        }
        _createPatchMesh(patchIndex, app, entity, material) {
            const patchBuf = this.bufferArray[patchIndex];
            const patchMesh = new pc.Mesh(app.graphicsDevice);
            const primitive = patchMesh.primitive[0];
            patchMesh.aabb = this.aabb;
            patchMesh.indexBuffer[0] = this._sharedIndexBuffer;
            patchMesh.vertexBuffer = this._sharedVertexBuffer;
            primitive.type = pc.PRIMITIVE_TRIANGLES;
            primitive.base = 0;
            primitive.count = 0;
            primitive.indexed = true;
            const patchMeshInstance = new pc.MeshInstance(patchMesh, material, entity);
            patchMeshInstance.cull = false;
            patchMeshInstance.visible = false;
            patchMeshInstance.visibleThisFrame = false;
            patchMeshInstance.castShadow = false;
            patchMeshInstance.receiveShadow = false;
            patchMeshInstance.setParameter(TerrainPatchesShaderChunks_mjs_2.patchCoordOffsetParamName, [patchBuf.minX, patchBuf.minZ], 0xffffffff);
            patchMeshInstance.setInstancing(null);
            patchMeshInstance.setCustomAabb(this.aabb);
            return patchMeshInstance;
        }
        _destroyMesh(meshInstance) {
            var _a;
            // TODO: dont destroy shared index and vertex buffers
            if (meshInstance.mesh) {
                meshInstance.mesh.indexBuffer = [null];
                meshInstance.mesh.vertexBuffer = null;
            }
            meshInstance.destroy();
            if (meshInstance.mesh) {
                meshInstance.mesh.destroy();
            }
            if (meshInstance.instancingData) {
                // @ts-ignore
                if (meshInstance.instancingData.destroy) { // @ts-ignore
                    meshInstance.instancingData.destroy();
                }
                (_a = meshInstance.instancingData.vertexBuffer) === null || _a === void 0 ? void 0 : _a.destroy();
            }
        }
        _destroyInstancingMesh(mesh) {
            this._destroyMesh(mesh);
        }
        _destroyPatchMesh(patchIndex) {
            const patchMeshInstance = this.meshInstanceArray[patchIndex];
            if (patchMeshInstance) {
                this._destroyMesh(patchMeshInstance);
            }
        }
        _destroyCustomBagMesh(mesh) {
            this._destroyMesh(mesh);
        }
        _updateIndexBuffer(graphicsDevice) {
            var _a;
            (_a = this._sharedIndexBuffer) === null || _a === void 0 ? void 0 : _a.destroy();
            this._sharedIndexBuffer = new pc.IndexBuffer(graphicsDevice, pc.INDEXFORMAT_UINT32, this.terrain.patchIndices.length, pc.BUFFER_STATIC, this.terrain.patchIndices, { storage: false });
        }
        _updateVertexBuffer(graphicsDevice) {
            var _a;
            const format = this._buildVertexFormat(graphicsDevice, this.terrain.patchVertices);
            (_a = this._sharedVertexBuffer) === null || _a === void 0 ? void 0 : _a.destroy();
            this._sharedVertexBuffer = new pc.VertexBuffer(graphicsDevice, format, format.vertexCount, {
                usage: pc.BUFFER_STATIC,
                storage: false,
                data: this.terrain.patchVertices.patchVertexBufferData,
            });
        }
        _initHeightMapTexture(app) {
            var _a;
            (_a = this._heightMap) === null || _a === void 0 ? void 0 : _a.destroy();
            const heightFormat = getHeightMapFormat(app.graphicsDevice, this.terrain.heightMap);
            const format = (0, TerrainPatchesShaderChunks_mjs_2.getTextureType)(heightFormat);
            const bufFormat = getHeightMapChunkBufferType(app.graphicsDevice, format);
            const dataChunkSize = this.terrain.heightMap.dataChunkSize;
            const chunks = this.terrain.heightMap.getChunksBuffers(bufFormat);
            this._heightMapLevelsType = bufFormat;
            this._heightMap = new pc.Texture(app.graphicsDevice, {
                width: dataChunkSize,
                height: dataChunkSize,
                format: format,
                mipmaps: false,
                minFilter: pc.FILTER_NEAREST,
                magFilter: pc.FILTER_NEAREST,
                addressU: pc.ADDRESS_CLAMP_TO_EDGE,
                addressV: pc.ADDRESS_CLAMP_TO_EDGE,
                addressW: pc.ADDRESS_CLAMP_TO_EDGE,
                flipY: app.graphicsDevice.isWebGPU,
                arrayLength: chunks.length,
                levels: [chunks]
            });
        }
        updateIndexBuffer() {
            this._updateIndexBuffer(this._app.graphicsDevice);
            if (this.customForwardRenderer || this.instancing) {
                this.updateMeshes();
            }
            else {
                for (const item of this.meshInstanceArray) {
                    if (item) {
                        item.mesh.indexBuffer[0] = this._sharedIndexBuffer;
                    }
                }
            }
        }
        static createMaterial() {
            const material = new pc.StandardMaterial();
            material.name = 'TerrainMaterial';
            material.setAttribute(TerrainPatchesShaderChunks_mjs_2.patchInstCoordOffsetParamName, pc.SEMANTIC_ATTR10);
            material.setAttribute(TerrainPatchesShaderChunks_mjs_2.vertexCoordAttrName, pc.SEMANTIC_POSITION);
            return material;
        }
        _bindDependenciesToMaterial(material) {
            material.setAttribute(TerrainPatchesShaderChunks_mjs_2.patchInstCoordOffsetParamName, pc.SEMANTIC_ATTR10);
            material.setAttribute(TerrainPatchesShaderChunks_mjs_2.vertexCoordAttrName, pc.SEMANTIC_POSITION);
            material.setParameter(TerrainPatchesShaderChunks_mjs_2.patchLodCoreParamName, 0);
            material.setParameter(TerrainPatchesShaderChunks_mjs_2.patchCoordOffsetParamName, [0, 0]);
            material.setParameter(TerrainPatchesShaderChunks_mjs_2.terrainHeightMapParamName, this._heightMap);
            const format = getHeightMapFormat(this._app.graphicsDevice, this.terrain.heightMap);
            const instancing = this.instancing instanceof TerrainPatchesCombineInstancing_mjs_1.TerrainPathcesCombineInstancing ? 'combine' :
                this.instancing instanceof TerrainPatchesInstancing_mjs_1.TerrainPathcesInstancing ? 'simple' :
                    false;
            const chunksStore = (0, TerrainPatchesShaderChunks_mjs_2.getTerrainShaderChunks)({
                width: this.terrain.width,
                depth: this.terrain.depth,
                patchSize: this.terrain.patchSize,
                heightMapChunkSize: this.terrain.heightMap.dataChunkSize,
                instancing: instancing,
                heightMapFormat: format,
                engineVersion: `v${pc.version[0]}`,
            });
            const chunkNames = Object.keys(chunksStore);
            for (let chunkName of chunkNames) {
                // @ts-ignore
                material.chunks[chunkName] = chunksStore[chunkName];
            }
            // @ts-ignore
            material.chunks.APIVersion = pc.CHUNKAPI_1_70;
            material.update();
        }
        setInstancing(value, updateMeshes = true) {
            if (value === this.instancing) {
                return;
            }
            super.setInstancing(value, false);
            if (this._material) {
                this._bindDependenciesToMaterial(this._material);
                if (updateMeshes) {
                    this.updateMeshes();
                }
            }
        }
        setMaterial(material) {
            this._bindDependenciesToMaterial(material);
            super.setMaterial(material);
        }
        updateHeights(zone) {
            super.updateHeights(zone);
            this._updateHeightMap(zone);
        }
        init(app, entity, material) {
            this._initHeightMapTexture(app);
            this._updateIndexBuffer(app.graphicsDevice);
            this._updateVertexBuffer(app.graphicsDevice);
            super.init(app, entity, material);
        }
    }
    exports.default = TerrainPatches;
});
define("src/TerrainSystem/MidpointDispTerrain", ["require", "exports", "src/Shared/Utils", "src/TerrainSystem/Terrain"], function (require, exports, Utils_mjs_4, Terrain_mjs_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MidpointDispTerrain = void 0;
    Terrain_mjs_1 = __importDefault(Terrain_mjs_1);
    class MidpointDispTerrain extends Terrain_mjs_1.default {
        createMidpointDisplacement(roughness) {
            if (roughness < 0.0) {
                throw Error("roughness must be positive");
            }
            this._createMidpointDisplacementF32(roughness);
            this.normalizeHeightMap();
        }
        _createMidpointDisplacementF32(roughness) {
            let rectSize = (0, Utils_mjs_4.calcNextPowerOfTwo)(this.width);
            let curHeight = rectSize / 2.0;
            const heightReduce = Math.pow(2.0, -roughness);
            while (rectSize > 0) {
                this._diamondStep(rectSize, curHeight);
                this._squareStep(rectSize, curHeight);
                rectSize = (rectSize / 2) | 0;
                curHeight *= heightReduce;
            }
        }
        _diamondStep(rectSize, curHeight) {
            const HalfRectSize = Math.floor(rectSize / 2);
            for (let y = 0; y < this.depth; y += rectSize) {
                for (let x = 0; x < this.width; x += rectSize) {
                    let nextX = (x + rectSize) % this.width;
                    let nextY = (y + rectSize) % this.depth;
                    if (nextX < x) {
                        nextX = this.width - 1;
                    }
                    if (nextY < y) {
                        nextY = this.depth - 1;
                    }
                    const topLeft = this.heightMap.get(x, y);
                    const topRight = this.heightMap.get(nextX, y);
                    const bottomLeft = this.heightMap.get(x, nextY);
                    const bottomRight = this.heightMap.get(nextX, nextY);
                    const midX = (x + HalfRectSize) % this.width;
                    const midY = (y + HalfRectSize) % this.depth;
                    const randValue = (0, Utils_mjs_4.randomFloatRange)(curHeight, -curHeight);
                    const midPoint = (topLeft + topRight + bottomLeft + bottomRight) / 4.0;
                    this.setHeight(midX, midY, midPoint + randValue);
                }
            }
        }
        _squareStep(rectSize, curHeight) {
            const halfRectSize = (rectSize / 2) | 0;
            for (let y = 0; y < this.depth; y += rectSize) {
                for (let x = 0; x < this.width; x += rectSize) {
                    let nextX = (x + rectSize) % this.width;
                    let nextY = (y + rectSize) % this.depth;
                    if (nextX < x) {
                        nextX = this.width - 1;
                    }
                    if (nextY < y) {
                        nextY = this.depth - 1;
                    }
                    const midX = (x + halfRectSize) % this.width;
                    const midY = (y + halfRectSize) % this.depth;
                    const prevMidX = (x - halfRectSize + this.width) % this.width;
                    const prevMidY = (y - halfRectSize + this.depth) % this.depth;
                    const curTopLeft = this.heightMap.get(x, y);
                    const curTopRight = this.heightMap.get(nextX, y);
                    const curCenter = this.heightMap.get(midX, midY);
                    const prevYCenter = this.heightMap.get(midX, prevMidY);
                    const curBotLeft = this.heightMap.get(x, nextY);
                    const prevXCenter = this.heightMap.get(prevMidX, midY);
                    const curLeftMid = (curTopLeft + curCenter + curBotLeft + prevXCenter) / 4.0 + (0, Utils_mjs_4.randomFloatRange)(-curHeight, curHeight);
                    const curTopMid = (curTopLeft + curCenter + curTopRight + prevYCenter) / 4.0 + (0, Utils_mjs_4.randomFloatRange)(-curHeight, curHeight);
                    this.setHeight(midX, y, curTopMid);
                    this.setHeight(x, midY, curLeftMid);
                }
            }
        }
    }
    exports.MidpointDispTerrain = MidpointDispTerrain;
});
define("src/TerrainSystem/TerrainRaycastResult", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TerrainRaycastResult = void 0;
    class TerrainRaycastResult {
        constructor() {
            this.vertexIndex = 0;
            this.distance = Number.MAX_VALUE;
            this.localNormal = new pc.Vec3(0, 1, 0);
            this.normal = new pc.Vec3(0, 1, 0);
            this.localPoint = new pc.Vec3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);
            this.point = new pc.Vec3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);
        }
        clear() {
            this.vertexIndex = 0;
            this.distance = Number.MAX_VALUE;
            this.localNormal.set(0, 1, 0);
            this.normal.set(0, 1, 0);
            this.localPoint.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);
            this.point.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);
        }
    }
    exports.TerrainRaycastResult = TerrainRaycastResult;
    exports.default = TerrainRaycastResult;
});
define("src/TerrainHelpers/TerrainRenderPreparer", ["require", "exports", "src/TerrainHelpers/TerrainPatchesShaderChunks"], function (require, exports, TerrainPatchesShaderChunks_mjs_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class TerrainRenderPreparer {
        get wireframe() { return this._wireframe; }
        set wireframe(v) {
            this._wireframe = v;
            this._updateMeshes();
        }
        get castShadow() { return this._castShadow; }
        set castShadow(v) {
            this._castShadow = v;
            this._updateMeshes();
        }
        get receiveShadow() { return this._receiveShadow; }
        set receiveShadow(v) {
            this._receiveShadow = v;
            this._updateMeshes();
        }
        constructor(patchesStore, options) {
            var _a, _b, _c;
            this.patchesStore = patchesStore;
            this._wireframe = (_a = options.wireframe) !== null && _a !== void 0 ? _a : false;
            this._castShadow = (_b = options.castShadow) !== null && _b !== void 0 ? _b : false;
            this._receiveShadow = (_c = options.receiveShadow) !== null && _c !== void 0 ? _c : false;
            this._hasUpdatedHeights = false;
        }
        _updateMeshes() {
            var _a;
            const customMeshInstance = this.patchesStore.customMeshInstance;
            if (customMeshInstance) {
                this._updateMesh(customMeshInstance);
            }
            for (const meshInstance of this.patchesStore.meshInstanceArray) {
                this._updateMesh(meshInstance);
            }
            (_a = this.patchesStore.instancing) === null || _a === void 0 ? void 0 : _a.forEach(item => {
                this._updateMesh(item.object);
            });
        }
        _updateMesh(meshInstance) {
            if (meshInstance) {
                meshInstance.mesh.primitive[0].type = this._wireframe ? pc.PRIMITIVE_LINES : pc.PRIMITIVE_TRIANGLES;
                meshInstance.castShadow = this._castShadow;
                meshInstance.receiveShadow = this._receiveShadow;
            }
        }
        preparePatch(visible, baseIndex, baseVertex, count, patchX, patchZ, minX, minZ, size, lodInfo) {
            const terrain = this.patchesStore.terrain;
            const patchIndex = patchZ * terrain.numPatchesX + patchX;
            const buffer = this.patchesStore.bufferArray[patchIndex];
            const currHash = baseIndex / count;
            buffer.hash = currHash;
            buffer.visible = visible;
            buffer.indicesBaseIndex = baseIndex;
            buffer.indicesBaseVertex = baseVertex;
            buffer.indicesCount = count;
            buffer.lod = lodInfo;
            if (buffer.heightsUpdated) {
                buffer.heightsUpdated = false;
                buffer.heightsUpdatedThisFrame = visible;
                this._hasUpdatedHeights = true;
            }
            if (this.patchesStore.customForwardRenderer) {
                const primitive = this.patchesStore.customMeshInstance.mesh.primitiveChunks[0][patchIndex];
                primitive.enabled = visible;
                primitive.base = baseIndex;
                primitive.count = count;
                primitive.type = this._wireframe ? pc.PRIMITIVE_LINES : pc.PRIMITIVE_TRIANGLES;
                primitive.attributes[TerrainPatchesShaderChunks_mjs_3.patchLodCoreParamName] = lodInfo.core;
            }
            else if (this.patchesStore.instancing) {
                if (visible) {
                    const inst = this.patchesStore.instancing.increment(lodInfo, buffer);
                    if (inst.count === 1 && inst.object) {
                        const meshInstance = inst.object;
                        const primitive = meshInstance.mesh.primitive[0];
                        meshInstance.visible = true;
                        meshInstance.visibleThisFrame = true;
                        meshInstance.castShadow = this._castShadow;
                        meshInstance.receiveShadow = this._receiveShadow;
                        primitive.type = this._wireframe ? pc.PRIMITIVE_LINES : pc.PRIMITIVE_TRIANGLES;
                    }
                }
            }
            else {
                const meshInstance = this.patchesStore.getOrCreatePatchMesh(patchIndex);
                const mesh = meshInstance.mesh;
                const primitive = mesh.primitive[0];
                if (meshInstance) {
                    meshInstance.visible = visible;
                    meshInstance.visibleThisFrame = visible;
                    meshInstance.castShadow = this._castShadow;
                    meshInstance.receiveShadow = this._receiveShadow;
                }
                primitive.base = baseIndex;
                primitive.count = count;
                primitive.type = this._wireframe ? pc.PRIMITIVE_LINES : pc.PRIMITIVE_TRIANGLES;
                meshInstance.setParameter(TerrainPatchesShaderChunks_mjs_3.patchLodCoreParamName, lodInfo.core);
            }
        }
        update(frustum) {
            // TODO: In theory we can control the quality of the model for shadows
            // TODO: Add support for Occlusion culling
            var _a, _b;
            this._hasUpdatedHeights = false;
            if (this.patchesStore.customForwardRenderer) {
                const customMeshInstance = this.patchesStore.customMeshInstance;
                if (customMeshInstance) {
                    customMeshInstance.visible = true;
                    customMeshInstance.castShadow = this._castShadow;
                    customMeshInstance.receiveShadow = this._receiveShadow;
                    const mesh = customMeshInstance.mesh;
                    const primitive = mesh.primitive[0];
                    primitive.type = this._wireframe ? pc.PRIMITIVE_LINES : pc.PRIMITIVE_TRIANGLES;
                }
            }
            (_a = this.patchesStore.instancing) === null || _a === void 0 ? void 0 : _a.begin(false, false);
            this.patchesStore.startUpdate();
            this.patchesStore.terrain.eachPatches(this, frustum);
            this.patchesStore.endUpdate(this._hasUpdatedHeights);
            (_b = this.patchesStore.instancing) === null || _b === void 0 ? void 0 : _b.end();
        }
    }
    exports.default = TerrainRenderPreparer;
});
define("src/TerrainHelpers/Brush", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("src/TerrainHelpers/ColorPainterShaders", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fragmentInvertShader = exports.fragmentShader = exports.factorMethod = exports.vertexShader = void 0;
    exports.vertexShader = `
    attribute vec3 aPosition;
    attribute vec2 aUv0;

    uniform mat4 matrix_model;
    uniform mat4 matrix_viewProjection;

    varying vec2 vUv0;

    void main(void)
    {
        vUv0 = aUv0;
        gl_Position = matrix_viewProjection * matrix_model * vec4(aPosition, 1.0);
    }
`;
    exports.factorMethod = `
    varying vec2 vUv0;

    uniform sampler2D uHeightMap;
    uniform float uBrushOpacity;
    uniform vec4 uBrushMask;

    float getFactor() {
        vec4 heightMap = texture2D(uHeightMap, vUv0);
        float height   = (heightMap.r + heightMap.g + heightMap.b) / 3.0 / heightMap.a;
        float factor   = height * uBrushOpacity;
        return factor;
    }
`;
    exports.fragmentShader = `
    ${exports.factorMethod}

    void main(void)
    {
        float factor = getFactor();
        vec4 color = vec4(uBrushMask * factor);

        gl_FragColor = color;
    }
`;
    exports.fragmentInvertShader = `
    ${exports.factorMethod}

    void main(void)
    {
        float levels = 4.0;
        float factor = getFactor();
        vec4 color   = vec4(factor);

        if (uBrushMask.r > 0.0) { color.r = 0.0; levels -= 1.0; }
        if (uBrushMask.g > 0.0) { color.g = 0.0; levels -= 1.0; }
        if (uBrushMask.b > 0.0) { color.b = 0.0; levels -= 1.0; }
        if (uBrushMask.a > 0.0) { color.a = 0.0; levels -= 1.0; }

        gl_FragColor = color / levels;
    }
`;
});
define("src/TerrainHelpers/ColorPainter", ["require", "exports", "src/TerrainHelpers/ColorPainterShaders", "src/Shared/Utils"], function (require, exports, ColorPainterShaders_mjs_1, Utils_mjs_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.painterLayerName = exports.painterCameraFar = void 0;
    exports.painterCameraFar = 10;
    exports.painterLayerName = 'TerrainEditor';
    class ColorPainter {
        get painting() { return this._painting; }
        get cameraFar() { return exports.painterCameraFar; }
        get background() { return this._buffer; }
        constructor(app, buffer) {
            this._painting = false;
            this._painterMask = new Float32Array(4);
            this._buffer = buffer;
            this._app = app;
            this._initCamera();
            this._initShaders();
            this._initMaterials();
            this._initEntities();
        }
        _initCamera() {
            const painterLayer = this._app.scene.layers.getLayerByName(exports.painterLayerName);
            this._painterRenderTarget = new pc.RenderTarget({
                colorBuffer: this._buffer,
                flipY: this._app.graphicsDevice.isWebGPU,
                depth: false,
            });
            this._painterCameraEntity = new pc.Entity('TerrainPainterCamera');
            this._painterCameraEntity.setLocalPosition(0, 0, exports.painterCameraFar);
            this._painterCameraEntity.lookAt(0, 0, 0);
            this._painterCameraEntity.addComponent('camera', {
                projection: pc.PROJECTION_ORTHOGRAPHIC,
                clearColorBuffer: false,
                clearDepthBuffer: false,
                priority: -1,
                layers: [painterLayer.id],
                nearClip: 0.1,
                farClip: exports.painterCameraFar * 2,
                renderTarget: this._painterRenderTarget,
            });
            this._app.root.addChild(this._painterCameraEntity);
            this._painterCameraEntity.enabled = false;
            this._painterCameraEntity.camera.frustumCulling = false;
            this._painterCameraEntity.camera.orthoHeight = exports.painterCameraFar;
        }
        _initEntities() {
            const painterLayer = this._app.scene.layers.getLayerByName(exports.painterLayerName);
            painterLayer.transparentSortMode = pc.SORTMODE_MANUAL;
            this._painterEntity = new pc.Entity('TerrainBrushPainter');
            this._painterEntity.addComponent('render', {
                type: 'plane',
                layers: [painterLayer.id],
                material: this._painterMaterial,
                castShadows: false,
                castShadowsLightmap: false,
                receiveShadows: false
            });
            this._painterInvertEntity = new pc.Entity('TerrainBrushPainterInvert');
            this._painterInvertEntity.addComponent('render', {
                type: 'plane',
                layers: [painterLayer.id],
                material: this._painterInvertMaterial,
                castShadows: false,
                castShadowsLightmap: false,
                receiveShadows: false,
            });
            this._painterEntity.render.meshInstances[0].drawOrder = 1;
            this._painterInvertEntity.render.meshInstances[0].drawOrder = 0;
            this._app.root.addChild(this._painterInvertEntity);
            this._app.root.addChild(this._painterEntity);
            this._painterInvertEntity.setLocalEulerAngles(90, 0, 0);
            this._painterEntity.setLocalEulerAngles(90, 0, 0);
            this._painterInvertEntity.enabled = false;
            this._painterEntity.enabled = false;
        }
        _initShaders() {
            const vertex = ColorPainterShaders_mjs_1.vertexShader;
            const fragment = (0, Utils_mjs_5.setPrecision)(this._app.graphicsDevice, ColorPainterShaders_mjs_1.fragmentShader);
            const fragmentInvert = (0, Utils_mjs_5.setPrecision)(this._app.graphicsDevice, ColorPainterShaders_mjs_1.fragmentInvertShader);
            if (pc.ShaderMaterial) {
                this._painterMaterial = new pc.ShaderMaterial({
                    uniqueName: 'PainterFragmentShader',
                    // @ts-ignore
                    vertexCode: vertex,
                    fragmentCode: fragment,
                    attributes: {
                        aPosition: pc.SEMANTIC_POSITION,
                        aUv0: pc.SEMANTIC_TEXCOORD0
                    }
                });
                this._painterInvertMaterial = new pc.ShaderMaterial({
                    uniqueName: 'PainterInvertFragmentShader',
                    // @ts-ignore
                    vertexCode: vertex,
                    fragmentCode: fragmentInvert,
                    attributes: {
                        aPosition: pc.SEMANTIC_POSITION,
                        aUv0: pc.SEMANTIC_TEXCOORD0
                    }
                });
                return;
            }
            this._painterShader = pc.createShaderFromCode(this._app.graphicsDevice, vertex, fragment, 'PainterFragmentShader', {
                aPosition: pc.SEMANTIC_POSITION,
                aUv0: pc.SEMANTIC_TEXCOORD0
            });
            this._painterInvertShader = pc.createShaderFromCode(this._app.graphicsDevice, vertex, fragmentInvert, 'PainterInvertFragmentShader', {
                aPosition: pc.SEMANTIC_POSITION,
                aUv0: pc.SEMANTIC_TEXCOORD0
            });
        }
        _initMaterials() {
            if (!pc.ShaderMaterial) {
                this._painterMaterial = new pc.Material();
                this._painterInvertMaterial = new pc.Material();
                /* @ts-ignore */
                this._painterMaterial.shader = this._painterShader;
                /* @ts-ignore */
                this._painterInvertMaterial.shader = this._painterInvertShader;
            }
            this._painterMaterial.name = 'BrushPainterMaterial';
            this._painterMaterial.blendType = pc.BLEND_ADDITIVE;
            this._painterMaterial.update();
            this._painterInvertMaterial.name = 'BrushPainterInvertMaterial';
            this._painterInvertMaterial.blendType = pc.BLEND_SUBTRACTIVE;
            this._painterInvertMaterial.update();
        }
        _updateRuntimeSettings(dt) {
            const originalOpacity = this._brushSettings.opacity;
            const opacity = originalOpacity;
            this._painterMaterial.setParameter('uBrushOpacity', opacity);
            this._painterInvertMaterial.setParameter('uBrushOpacity', opacity);
        }
        _updatePositionAndScale(x, y, scaleWidth, scaleHeight) {
            const far = this.cameraFar * 2;
            const ration = this.background.width / this.background.height;
            x = x * far * ration - this.cameraFar * ration;
            y = y * far - this.cameraFar;
            scaleWidth = scaleWidth * this.background.width / far / 2.5;
            scaleHeight = scaleHeight * this.background.height / far / 2.5;
            this._setScale(scaleWidth, scaleHeight);
            this._setPosition(x, y);
        }
        startPaint(dt, x, y, scaleWidth, scaleHeight) {
            this._updateRuntimeSettings(dt);
            this._updatePositionAndScale(x, y, scaleWidth, scaleHeight);
            this._painting = true;
            this._painterInvertEntity.enabled = true;
            this._painterEntity.enabled = true;
            this._painterCameraEntity.enabled = true;
        }
        stopPaint() {
            this._painting = false;
            this._painterInvertEntity.enabled = false;
            this._painterEntity.enabled = false;
            this._painterCameraEntity.enabled = false;
        }
        _setScale(x, y) {
            this._painterEntity.setLocalScale(x, 1, y);
            this._painterInvertEntity.setLocalScale(x, 1, y);
        }
        _setPosition(x, y) {
            this._painterEntity.setLocalPosition(x, y, 0);
            this._painterInvertEntity.setLocalPosition(x, y, 0);
        }
        updateSettings(brushSettings, activeLayer) {
            this._painterMask.fill(0);
            if (activeLayer > 0) {
                this._painterMask[activeLayer - 1] = 1;
            }
            const brushTexture = brushSettings.textures[brushSettings.active].resource;
            this._painterMaterial.setParameter('uBrushMask', this._painterMask);
            this._painterMaterial.setParameter('uHeightMap', brushTexture);
            this._painterInvertMaterial.setParameter('uBrushMask', this._painterMask);
            this._painterInvertMaterial.setParameter('uHeightMap', brushTexture);
            this._brushSettings = brushSettings;
        }
    }
    exports.default = ColorPainter;
});
define("src/Shared/EnumConverter", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isNumeric = isNumeric;
    exports.mapTitleEnum = mapTitleEnum;
    exports.mapEnum = mapEnum;
    function isNumeric(value) {
        return /^-?\d+$/.test(value);
    }
    function mapTitleEnum(someEnum) {
        const result = [];
        for (let value in someEnum) {
            if (!someEnum.hasOwnProperty(value) ||
                isNumeric(value)) {
                continue;
            }
            const enumEntry = {};
            enumEntry[value] = someEnum[value];
            result.push(enumEntry);
        }
        return result;
    }
    function mapEnum(someEnum) {
        const result = [];
        for (let value in someEnum) {
            if (!someEnum.hasOwnProperty(value)) {
                continue;
            }
            const enumEntry = {};
            enumEntry[value] = someEnum[value];
            result.push(enumEntry);
        }
        return result;
    }
});
define("src/TerrainHelpers/Enums", ["require", "exports", "src/Shared/EnumConverter"], function (require, exports, EnumConverter_mjs_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.terrainHeightsCompressAlgoritm = exports.terrainHeightsCompressAlgoritmDefault = exports.terrainPatchSizeEnum = exports.terrainPatchSizeEnumDefault = exports.terrainSizeEnum = exports.terrainSizeEnumDefault = void 0;
    exports.terrainSizeEnumDefault = 513;
    exports.terrainSizeEnum = (0, EnumConverter_mjs_1.mapEnum)({
        '128': 129,
        '256': 257,
        '512': 513,
        '1024': 1025,
        '2048': 2049,
        '4096': 4097,
        '8192': 8193,
        '16384': 16385,
    });
    exports.terrainPatchSizeEnumDefault = 33;
    exports.terrainPatchSizeEnum = (0, EnumConverter_mjs_1.mapEnum)({
        '16': 17,
        '32': 33,
        '64': 65,
        '128': 129,
        '256': 257,
        '512': 513,
        '1024': 1025,
        '2048': 2049,
    });
    exports.terrainHeightsCompressAlgoritmDefault = 'none';
    exports.terrainHeightsCompressAlgoritm = (0, EnumConverter_mjs_1.mapEnum)({
        'None': 'none',
        'X2': 'x2',
        'X4': 'x4'
    });
});
define("src/TerrainSystem/Triangle", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Triangle = void 0;
    const tmpTriVecA = new pc.Vec3();
    const tmpTriVecB = new pc.Vec3();
    class Triangle extends pc.Tri {
        getNormal(rsh) {
            tmpTriVecA.sub2(this.v1, this.v0);
            tmpTriVecB.sub2(this.v2, this.v0);
            rsh.cross(tmpTriVecA, tmpTriVecB).normalize();
        }
    }
    exports.Triangle = Triangle;
    exports.default = Triangle;
});
define("src/TerrainSystem/HeightfieldShape", ["require", "exports", "src/TerrainSystem/TerrainRaycastResult", "src/TerrainSystem/Triangle"], function (require, exports, TerrainRaycastResult_mjs_1, Triangle_mjs_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.intersectsRayBox = intersectsRayBox;
    TerrainRaycastResult_mjs_1 = __importDefault(TerrainRaycastResult_mjs_1);
    Triangle_mjs_1 = __importDefault(Triangle_mjs_1);
    const infinite = 9999999;
    const modelTransform = new pc.Mat4();
    const tmpRay = new pc.Ray();
    const tmpRaycastVec = new pc.Vec3();
    const tmpPos1 = new pc.Vec3();
    const tmpPos2 = new pc.Vec3();
    const tmpPos3 = new pc.Vec3();
    const triangle = new Triangle_mjs_1.default();
    const debugTmpVec = new pc.Vec3();
    const debugTransform = new pc.Mat4();
    const debugPositions = new Array(16);
    let debugTransformIsIdentity = true;
    function debugDrawTriangleLines(tri, color = pc.Color.YELLOW) {
        var _a;
        /*
        [
            tri.v0.x, tri.v0.y, tri.v0.z, tri.v1.x, tri.v1.y, tri.v1.z,
            tri.v1.x, tri.v1.y, tri.v1.z, tri.v2.x, tri.v2.y, tri.v2.z,
            tri.v2.x, tri.v2.y, tri.v2.z, tri.v0.x, tri.v0.y, tri.v0.z,
        ], color, false);
        ]
        */
        debugTransform.transformPoint(tri.v0, debugTmpVec);
        debugPositions[0] = debugPositions[15] = debugTmpVec.x;
        debugPositions[1] = debugPositions[16] = debugTmpVec.y;
        debugPositions[2] = debugPositions[17] = debugTmpVec.z;
        debugTransform.transformPoint(tri.v1, debugTmpVec);
        debugPositions[3] = debugPositions[6] = debugTmpVec.x;
        debugPositions[4] = debugPositions[7] = debugTmpVec.y;
        debugPositions[5] = debugPositions[8] = debugTmpVec.z;
        debugTransform.transformPoint(tri.v2, debugTmpVec);
        debugPositions[9] = debugPositions[12] = debugTmpVec.x;
        debugPositions[10] = debugPositions[13] = debugTmpVec.y;
        debugPositions[11] = debugPositions[14] = debugTmpVec.z;
        (_a = pc.app) === null || _a === void 0 ? void 0 : _a.drawLineArrays(debugPositions, color, false);
    }
    function intersectsRayBox(aabb, ray) {
        const rayOrigin = ray.origin;
        const rayDirection = ray.direction;
        const minX = aabb.minX;
        const maxX = aabb.maxX;
        const minY = aabb.minY;
        const maxY = aabb.maxY;
        const minZ = aabb.minZ;
        const maxZ = aabb.maxZ;
        let tmin = (minX - rayOrigin.x) / rayDirection.x;
        let tmax = (maxX - rayOrigin.x) / rayDirection.x;
        if (tmin > tmax) {
            let temp = tmin;
            tmin = tmax;
            tmax = temp;
        }
        let tymin = (minY - rayOrigin.y) / rayDirection.y;
        let tymax = (maxY - rayOrigin.y) / rayDirection.y;
        if (tymin > tymax) {
            let temp = tymin;
            tymin = tymax;
            tymax = temp;
        }
        if ((tmin > tymax) || (tymin > tmax)) {
            return false;
        }
        if (tymin > tmin) {
            tmin = tymin;
        }
        if (tymax < tmax) {
            tmax = tymax;
        }
        let tzmin = (minZ - rayOrigin.z) / rayDirection.z;
        let tzmax = (maxZ - rayOrigin.z) / rayDirection.z;
        if (tzmin > tzmax) {
            let temp = tzmin;
            tzmin = tzmax;
            tzmax = temp;
        }
        if ((tmin > tzmax) || (tzmin > tmax)) {
            return false;
        }
        return true;
    }
    class HeightfieldShape {
        constructor(heightMap) {
            this._heightMap = heightMap;
            this._beginPos = new pc.Vec3();
            this._endPos = new pc.Vec3();
            this.updateBoundingBox();
        }
        updateBoundingBox() {
            const halfWidth = this._heightMap.width / 2;
            const halfDepth = this._heightMap.depth / 2;
            this._boundingBox = {
                minX: -halfWidth,
                minY: 0,
                minZ: -halfDepth,
                maxX: halfWidth,
                maxY: this._heightMap.maxHeight,
                maxZ: halfDepth,
            };
        }
        _triangleIntersectsRay(tri, ray, bestResult) {
            if (tri.intersectsRay(ray, tmpRaycastVec)) {
                const distance = tmpRaycastVec.distance(ray.origin);
                if (bestResult.distance > distance) {
                    bestResult.distance = distance;
                    tri.getNormal(bestResult.localNormal);
                    bestResult.normal.copy(bestResult.localNormal);
                    bestResult.localPoint.copy(tmpRaycastVec);
                    bestResult.point.copy(tmpRaycastVec);
                    debugDrawTriangleLines(tri, pc.Color.RED);
                    const distanceP0 = bestResult.point.distance(tri.v0);
                    const distanceP1 = bestResult.point.distance(tri.v1);
                    const distanceP2 = bestResult.point.distance(tri.v2);
                    if (distanceP0 > distanceP1) {
                        if (distanceP1 > distanceP2) {
                            bestResult.vertexIndex = tri.index2;
                        }
                        else {
                            bestResult.vertexIndex = tri.index1;
                        }
                    }
                    else {
                        if (distanceP0 > distanceP2) {
                            bestResult.vertexIndex = tri.index2;
                        }
                        else {
                            bestResult.vertexIndex = tri.index0;
                        }
                    }
                    return true;
                }
            }
            //debugDrawTriangleLines(tri);
            return false;
        }
        _assignPosition(index, buf) {
            const x = index % this._heightMap.width | 0;
            const z = index / this._heightMap.width | 0;
            buf.x = (-this._heightMap.width / 2) + x;
            buf.y = this._heightMap.get(x, z);
            buf.z = (-this._heightMap.depth / 2) + z;
        }
        _quadAction(rs, ray, result) {
            const x = rs.prevX;
            const z = rs.prevZ;
            if (x < 0 || z < 0 || x >= this._heightMap.width - 1 || z >= this._heightMap.depth - 1) {
                return false;
            }
            const xFan2 = x % 2 === 0;
            const zFan2 = z % 2 === 0;
            let index0, index1, index2;
            {
                if (xFan2 !== zFan2) {
                    index0 = (z + 0) * this._heightMap.width + (x + 0);
                    index1 = (z + 1) * this._heightMap.width + (x + 0);
                    index2 = (z + 0) * this._heightMap.width + (x + 1);
                }
                else {
                    index0 = (z + 0) * this._heightMap.width + (x + 0);
                    index1 = (z + 1) * this._heightMap.width + (x + 1);
                    index2 = (z + 0) * this._heightMap.width + (x + 1);
                }
                this._assignPosition(index0, tmpPos1);
                this._assignPosition(index1, tmpPos2);
                this._assignPosition(index2, tmpPos3);
                triangle.index0 = index0;
                triangle.index1 = index1;
                triangle.index2 = index2;
                triangle.set(tmpPos1, tmpPos2, tmpPos3);
            }
            if (this._triangleIntersectsRay(triangle, ray, result)) {
                return true;
            }
            {
                if (xFan2 !== zFan2) {
                    index0 = (z + 0) * this._heightMap.width + (x + 1);
                    index1 = (z + 1) * this._heightMap.width + (x + 0);
                    index2 = (z + 1) * this._heightMap.width + (x + 1);
                }
                else {
                    index0 = (z + 0) * this._heightMap.width + (x + 0);
                    index1 = (z + 1) * this._heightMap.width + (x + 0);
                    index2 = (z + 1) * this._heightMap.width + (x + 1);
                }
                this._assignPosition(index0, tmpPos1);
                this._assignPosition(index1, tmpPos2);
                this._assignPosition(index2, tmpPos3);
                triangle.index0 = index0;
                triangle.index1 = index1;
                triangle.index2 = index2;
                triangle.set(tmpPos1, tmpPos2, tmpPos3);
            }
            if (this._triangleIntersectsRay(triangle, ray, result)) {
                return true;
            }
            return false;
        }
        _intersectsRay(localRay, result = new TerrainRaycastResult_mjs_1.default()) {
            if (!intersectsRayBox(this._boundingBox, localRay)) {
                return false;
            }
            this._beginPos.copy(localRay.origin);
            this._beginPos.x += this._boundingBox.maxX;
            this._beginPos.z += this._boundingBox.maxZ;
            this._endPos.copy(localRay.direction).add(this._beginPos);
            let rayDirectionFlatX = this._endPos.x - this._beginPos.x;
            let rayDirectionFlatZ = this._endPos.z - this._beginPos.z;
            const maxDistanceFlat = Math.sqrt(Math.pow(rayDirectionFlatX, 2) + Math.pow(rayDirectionFlatZ, 2));
            if (maxDistanceFlat < 0.0001) {
                // Consider the ray vertical
                rayDirectionFlatX = 0;
                rayDirectionFlatZ = 0;
            }
            else {
                rayDirectionFlatX /= maxDistanceFlat;
                rayDirectionFlatZ /= maxDistanceFlat;
            }
            const xiStep = rayDirectionFlatX > 0 ? 1 : rayDirectionFlatX < 0 ? -1 : 0;
            const ziStep = rayDirectionFlatZ > 0 ? 1 : rayDirectionFlatZ < 0 ? -1 : 0;
            const paramDeltaX = xiStep !== 0 ? 1 / Math.abs(rayDirectionFlatX) : infinite;
            const paramDeltaZ = ziStep !== 0 ? 1 / Math.abs(rayDirectionFlatZ) : infinite;
            let paramCrossX;
            let paramCrossZ;
            if (xiStep !== 0) {
                paramCrossX = xiStep === 1
                    ? (Math.ceil(this._beginPos.x) - this._beginPos.x) * paramDeltaX
                    : (this._beginPos.x - Math.floor(this._beginPos.x)) * paramDeltaX;
            }
            else {
                paramCrossX = infinite; // Will never cross on X
            }
            if (ziStep !== 0) {
                paramCrossZ = ziStep === 1
                    ? (Math.ceil(this._beginPos.z) - this._beginPos.z) * paramDeltaZ
                    : (this._beginPos.z - Math.floor(this._beginPos.z)) * paramDeltaZ;
            }
            else {
                paramCrossZ = infinite; // Will never cross on Z
            }
            const rs = {
                x: this._beginPos.x | 0,
                z: this._beginPos.z | 0,
                param: 0,
                prevX: 0,
                prevZ: 0,
                prevParam: 0,
                maxDistanceFlat: maxDistanceFlat,
            };
            // Workaround cases where the ray starts at an integer position
            if (paramCrossX === 0.0) {
                paramCrossX += paramDeltaX;
                // If going backwards, we should ignore the position we would get by the above flooring,
                // because the ray is not heading in that direction
                if (xiStep === -1) {
                    rs.x -= 1;
                }
            }
            if (paramCrossZ === 0.0) {
                paramCrossZ += paramDeltaZ;
                if (ziStep === -1)
                    rs.z -= 1;
            }
            let hasHit = false;
            while (!hasHit) {
                rs.prevX = rs.x;
                rs.prevZ = rs.z;
                rs.prevParam = rs.param;
                if (paramCrossX < paramCrossZ) {
                    // X lane
                    rs.x += xiStep;
                    // Assign before advancing the param,
                    // to be in sync with the initialization step
                    rs.param = paramCrossX;
                    paramCrossX += paramDeltaX;
                }
                else {
                    // Z lane
                    rs.z += ziStep;
                    rs.param = paramCrossZ;
                    paramCrossZ += paramDeltaZ;
                }
                if (this._quadAction(rs, localRay, result)) {
                    hasHit = true;
                }
                if (rs.param > rs.maxDistanceFlat) {
                    rs.param = rs.maxDistanceFlat;
                    break;
                }
            }
            return hasHit;
        }
        intersectsRay(worldTranform, ray, result = new TerrainRaycastResult_mjs_1.default()) {
            if (worldTranform) {
                modelTransform.copy(worldTranform).invert();
                modelTransform.transformPoint(ray.origin, tmpRay.origin);
                modelTransform.transformVector(ray.direction, tmpRay.direction);
                debugTransform.copy(worldTranform);
                debugTransformIsIdentity = false;
            }
            else if (!debugTransformIsIdentity) {
                debugTransform.setIdentity();
                debugTransformIsIdentity = true;
            }
            const hit = this._intersectsRay(worldTranform ? tmpRay : ray, result);
            if (hit && worldTranform) {
                // update world point and normal, but save local
                worldTranform.transformPoint(result.point, result.point);
                worldTranform.transformVector(result.normal, result.normal);
            }
            return !!hit;
        }
    }
    exports.default = HeightfieldShape;
});
define("src/TerrainSystem/PatchedHeightMap", ["require", "exports", "src/TerrainSystem/AbsPatchedHeightMap"], function (require, exports, AbsPatchedHeightMap_mjs_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PatchedHeightMap = void 0;
    AbsPatchedHeightMap_mjs_3 = __importStar(AbsPatchedHeightMap_mjs_3);
    class PatchedHeightMap extends AbsPatchedHeightMap_mjs_3.default {
        static createBuffer(width, depth, chunkSize) {
            const numChunksX = ((width - 1) / (chunkSize - 1)) | 0;
            const numChunksZ = ((depth - 1) / (chunkSize - 1)) | 0;
            const chunkArrSize = Math.pow(chunkSize, 2);
            const chunkCount = numChunksX * numChunksZ;
            return new Float32Array(chunkArrSize * chunkCount);
        }
        constructor(width, depth, patchSize, dataChunkSize, maxHeight, buffer) {
            const validDataChunkSize = (0, AbsPatchedHeightMap_mjs_3.getOrThrowDataChunkSize)(patchSize, dataChunkSize);
            const tmpBuffer = buffer !== null && buffer !== void 0 ? buffer : PatchedHeightMap.createBuffer(width, depth, validDataChunkSize);
            super(width, depth, patchSize, dataChunkSize, maxHeight, tmpBuffer, 1, 0);
        }
    }
    exports.PatchedHeightMap = PatchedHeightMap;
    exports.default = PatchedHeightMap;
});
define("src/Shared/Frustum", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Frustum = void 0;
    const tmpVec = new pc.Vec3();
    const tmpRad = new pc.Vec3();
    const tmpSphere = new pc.BoundingSphere();
    class Frustum {
        get margin() { return this._margin; }
        set margin(value) { this._margin = value; }
        get frustum() { return this._frustum; }
        set frustum(value) { this._frustum = value; }
        get transform() { return this._mat; }
        set transform(value) {
            this._mat.copy(value);
            this._mat.getScale(this._scale);
        }
        constructor() {
            this._margin = 1;
            this._mat = new pc.Mat4();
            this._scale = new pc.Vec3();
        }
        containsSphere(localX, localY, localZ, radius) {
            tmpVec.set(localX, localY, localZ);
            tmpRad.copy(this._scale).mulScalar(radius);
            this._mat.transformPoint(tmpVec, tmpVec);
            // @ts-ignore [PLAYCANVAS:DOC]: center private in v2
            tmpSphere.center = tmpVec;
            tmpSphere.radius = tmpRad.distance(pc.Vec3.ZERO) * this._margin;
            return this._frustum.containsSphere(tmpSphere) > 0;
        }
    }
    exports.Frustum = Frustum;
});
define("src/Scripts/Terrain", ["require", "exports", "src/Shared/Debug", "src/TerrainSystem/MidpointDispTerrain", "src/TerrainSystem/TerrainRaycastResult", "src/TerrainSystem/HeightMap", "src/TerrainHelpers/TerrainRenderPreparer", "src/TerrainHelpers/ColorPainter", "src/TerrainHelpers/TerrainPatches", "src/TerrainHelpers/Enums", "src/TerrainHelpers/TerrainPatchesShaderChunks", "src/TerrainSystem/HeightfieldShape", "src/TerrainSystem/PatchedHeightMap", "src/TerrainSystem/CompressedPatchedHeightMap", "src/Shared/Frustum", "src/Shared/EnumConverter", "src/AmmoIntegration/AmmoIntegration", "src/TerrainHelpers/TerrainPatchesInstancing", "src/TerrainHelpers/TerrainPatchesCombineInstancing"], function (require, exports, Debug_mjs_1, MidpointDispTerrain_mjs_1, TerrainRaycastResult_mjs_2, HeightMap_mjs_3, TerrainRenderPreparer_mjs_1, ColorPainter_mjs_1, TerrainPatches_mjs_1, Enums_mjs_1, TerrainPatchesShaderChunks_mjs_4, HeightfieldShape_mjs_1, PatchedHeightMap_mjs_1, CompressedPatchedHeightMap_mjs_2, Frustum_mjs_1, EnumConverter_mjs_2, AmmoIntegration_mjs_1, TerrainPatchesInstancing_mjs_2, TerrainPatchesCombineInstancing_mjs_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bigTerrainEditorScriptName = exports.terrainScriptName = exports.Terrain = exports.RenderMode = void 0;
    TerrainRaycastResult_mjs_2 = __importDefault(TerrainRaycastResult_mjs_2);
    HeightMap_mjs_3 = __importDefault(HeightMap_mjs_3);
    TerrainRenderPreparer_mjs_1 = __importDefault(TerrainRenderPreparer_mjs_1);
    ColorPainter_mjs_1 = __importDefault(ColorPainter_mjs_1);
    TerrainPatches_mjs_1 = __importDefault(TerrainPatches_mjs_1);
    HeightfieldShape_mjs_1 = __importDefault(HeightfieldShape_mjs_1);
    PatchedHeightMap_mjs_1 = __importDefault(PatchedHeightMap_mjs_1);
    CompressedPatchedHeightMap_mjs_2 = __importDefault(CompressedPatchedHeightMap_mjs_2);
    const brushMinSize = 2;
    const brushMaxSize = 250;
    const tmpMat = new pc.Mat4();
    const terrainLocalVertexPos = new pc.Vec3();
    const heightMapExt = '.hm';
    var RenderMode;
    (function (RenderMode) {
        RenderMode[RenderMode["Standard"] = 1] = "Standard";
        RenderMode[RenderMode["InstancingAccelerator"] = 2] = "InstancingAccelerator";
        RenderMode[RenderMode["CombineInstancingAccelerator"] = 3] = "CombineInstancingAccelerator";
        RenderMode[RenderMode["CustomForwardRenderer"] = 4] = "CustomForwardRenderer";
    })(RenderMode || (exports.RenderMode = RenderMode = {}));
    class Terrain extends pc.ScriptType {
        constructor() {
            super(...arguments);
            this._lock = 0;
            this._localCameraPosition = new pc.Vec3();
            this._roughness = 1.0;
            this._rayStart = new pc.Vec3();
            this._rayEnd = new pc.Vec3();
            this._rayDirection = new pc.Vec3();
            this._ray = new pc.Ray();
            this._lastLodGridUpdate = 0;
            this._brushSizeStep = 1;
            this._brushOpacityStep = 0.01;
            this._intersectsRayResult = false;
            this._keyAddLock = true;
            this._keySubLock = true;
        }
        get shape() { return this._heightFieldShape; }
        get object() { return this._terrain; }
        get patches() { return this._patchesStore; }
        get renderPreparer() { return this._renderPreparer; }
        get lock() { return this._lock; }
        addLock() {
            this._lock++;
        }
        freeLock() {
            this._lock--;
        }
        postInitialize() {
            this._initializeMouse();
            this._initializeKeyboard();
            this._initBrush();
            this._initTerrain();
            this._createTerrainMaterial();
            this._updateTerrainMaterialParameters();
            this._updateLayers();
            this._updateHeightMapFromAttr();
            this._updateBrush();
            this._updatePainterMaterial();
            this._updateMesh();
            this.on('attr:renderMode', () => {
                this._renderPreparer.patchesStore.customForwardRenderer = this.renderMode === RenderMode.CustomForwardRenderer;
                this._renderPreparer.patchesStore.setMaterial(this._material);
                this._renderPreparer.patchesStore.setInstancing(this.renderMode === RenderMode.InstancingAccelerator ? new TerrainPatchesInstancing_mjs_2.TerrainPathcesInstancing() :
                    this.renderMode === RenderMode.CombineInstancingAccelerator ? new TerrainPatchesCombineInstancing_mjs_2.TerrainPathcesCombineInstancing() :
                        undefined);
            });
            this.on('attr:wireframe', () => { this._renderPreparer.wireframe = this.wireframe; });
            this.on('attr:castShadow', () => { this._renderPreparer.castShadow = this.castShadow; });
            this.on('attr:receiveShadow', () => { this._renderPreparer.receiveShadow = this.receiveShadow; });
            this.on('attr:activeLayer', () => {
                this._updatePainterMaterial();
            });
            this.on('attr:layers', () => {
                this._updateLayers();
            });
            this.on('attr:brush', () => {
                this._updateBrush();
                this._updatePainterMaterial();
            });
            this.on('attr:height', () => {
                this._terrain.setMaxHeight(this.height);
                this._updateTerrainMaterialParameters();
            });
            this.on('attr:zFar', () => {
                this._terrain.setZFar(this.zFar);
            });
        }
        _initBrush() {
            const splatMap = this.painterSettings.splatMap.resource;
            this._brushHeightMap = new HeightMap_mjs_3.default(256, 256, 100);
            this._colorPainter = new ColorPainter_mjs_1.default(this.app, splatMap);
        }
        _updatePainterMaterial() {
            this._colorPainter.updateSettings(this.brush, this.activeLayer);
        }
        _updateBrush() {
            this._brushSize = this.brush.size | 0;
            this._brushOpacity = this.brush.opacity;
            const activeBrush = this.brush.active | 0;
            if (activeBrush === this._activeBrush) {
                return;
            }
            if (!this.brush.textures[activeBrush]) {
                console.error('Brush image unset.');
                return;
            }
            const brushTexture = this.brush.textures[activeBrush].resource;
            const brushImg = brushTexture.getSource();
            if (!brushImg) {
                console.error('Brush image unset.');
                return;
            }
            this._activeBrush = activeBrush;
            this._brushHeightMap.fromImage(brushImg);
            this._brushHeightMap.smooth(1, 1);
            console.log(this._brushHeightMap);
        }
        _initHeightMapBuffer(chunkSize) {
            // TODO: Move to terrain collider
            // TODO: Ammo js integration
            const buffer = (window.Ammo) ? (0, AmmoIntegration_mjs_1.getBuffer)(this.width, this.depth, this.patchSize, chunkSize, this.compressAlgoritm) : undefined;
            if ((window.Ammo)) {
                const ht = this.compressAlgoritm === 'none' ? 0 :
                    this.compressAlgoritm === 'x2' ? 1 :
                        2;
                const hm = new Ammo.btAlexTerrainPatchedHeightMap(this.width, this.depth, this.patchSize, chunkSize, 0, this.height, ht, buffer.byteOffset);
                const shape = new Ammo.btAlexHeightfieldTerrainShape(hm, false);
                const groundTransform = new Ammo.btTransform();
                groundTransform.setIdentity();
                groundTransform.setOrigin(new Ammo.btVector3(0, this.height / 2, 0));
                const groundMass = 0;
                const groundLocalInertia = new Ammo.btVector3(0, 0, 0);
                const groundMotionState = new Ammo.btDefaultMotionState(groundTransform);
                const groundBody = new Ammo.btRigidBody(new Ammo.btRigidBodyConstructionInfo(groundMass, groundMotionState, shape, groundLocalInertia));
                this.app.systems.rigidbody.dynamicsWorld.addRigidBody(groundBody);
            }
            return buffer;
        }
        _initTerrain() {
            const tmpChunkSize = this.patchSize * 2 - 1; // 257, 513, ...
            const chunkSize = Math.min(this.width, this.depth, tmpChunkSize);
            const buffer = this._initHeightMapBuffer(chunkSize);
            const heightMap = this.compressAlgoritm !== 'none'
                ? new CompressedPatchedHeightMap_mjs_2.default(this.width, this.depth, this.patchSize, chunkSize, this.height, this.compressAlgoritm, buffer)
                : new PatchedHeightMap_mjs_1.default(this.width, this.depth, this.patchSize, chunkSize, this.height, buffer);
            this._terrain = new MidpointDispTerrain_mjs_1.MidpointDispTerrain(heightMap, this.zFar);
            this._heightFieldShape = new HeightfieldShape_mjs_1.default(heightMap);
            this._raycastResult = new TerrainRaycastResult_mjs_2.default();
            this._frustum = new Frustum_mjs_1.Frustum();
            this._patchesStore = new TerrainPatches_mjs_1.default(this._terrain);
            this._renderPreparer = new TerrainRenderPreparer_mjs_1.default(this._patchesStore, {
                wireframe: this.wireframe,
                castShadow: this.castShadow,
                receiveShadow: this.receiveShadow,
            });
            console.log(this._terrain, this._heightFieldShape, this._renderPreparer);
        }
        _createTerrainMaterial() {
            this._material = TerrainPatches_mjs_1.default.createMaterial();
        }
        _updateTerrainMaterialParameters() {
            this._material.setParameter(TerrainPatchesShaderChunks_mjs_4.terrainSplatMapParamName, this._colorPainter.background);
            this._material.setParameter(TerrainPatchesShaderChunks_mjs_4.terrainMaxHeightParamName, this._terrain.maxHeight);
        }
        _updateLayers() {
            var _a;
            // TODO
            const maxCount = 5;
            const width = 1024;
            const height = 1024;
            let length = 0;
            let flags = [];
            let scales = [];
            let offsets = [];
            let diffuses = [];
            let normals = [];
            for (let i = 0; i < maxCount; i++) {
                let flag = 0;
                if (i < this.layers.length) {
                    const layer = this.layers[i];
                    const diffuse = layer.diffuse;
                    const normalMap = layer.normalMap;
                    if (diffuse) {
                        const texture = diffuse.resource;
                        flag++;
                        length++;
                        diffuses.push(texture.getSource());
                        scales.push(layer.size.x, layer.size.y);
                        offsets.push(layer.offset.x, layer.offset.y);
                        if (normalMap) {
                            flag++;
                            normals.push(normalMap.resource.getSource());
                        }
                    }
                }
                flags.push(flag);
            }
            (_a = this._layersDiffuse) === null || _a === void 0 ? void 0 : _a.destroy();
            //this._layersDiffuse = this.layers[0].diffuse.resource as pcx.Texture;
            this._layersDiffuse = new pc.Texture(this.app.graphicsDevice, {
                name: 'terrainLayersDiffuse',
                format: pc.PIXELFORMAT_RGBA8,
                width: width,
                height: height,
                arrayLength: length,
                flipY: this.app.graphicsDevice.isWebGPU,
                //magFilter: pc.FILTER_LINEAR,
                //minFilter: pc.FILTER_LINEAR_MIPMAP_LINEAR,
                mipmaps: true,
                addressU: pc.ADDRESS_REPEAT,
                addressV: pc.ADDRESS_REPEAT,
                addressW: pc.ADDRESS_CLAMP_TO_EDGE,
                levels: [diffuses]
            });
            this._layersDiffuse.upload();
            console.log(this._layersDiffuse);
            this._material.setParameter(`uTerrainLayersCount`, length);
            this._material.setParameter(`uTerrainLayersDiffuse`, this._layersDiffuse);
            this._material.setParameter(`uTerrainLayersFlags[0]`, flags);
            this._material.setParameter(`uTerrainLayersScale[0]`, scales);
            this._material.setParameter(`uTerrainLayersOffset[0]`, offsets);
        }
        _updateMesh() {
            this._renderPreparer.patchesStore.customForwardRenderer = this.renderMode === RenderMode.CustomForwardRenderer;
            this._renderPreparer.patchesStore.setInstancing(this.renderMode === RenderMode.InstancingAccelerator ? new TerrainPatchesInstancing_mjs_2.TerrainPathcesInstancing() :
                this.renderMode === RenderMode.CombineInstancingAccelerator ? new TerrainPatchesCombineInstancing_mjs_2.TerrainPathcesCombineInstancing() :
                    undefined);
            this._renderPreparer.patchesStore.init(this.app, this.entity, this._material);
        }
        _initializeMouse() {
            var _a, _b;
            (_a = this.app.mouse) === null || _a === void 0 ? void 0 : _a.on(pc.EVENT_MOUSEMOVE, this._onMouseMove, this);
            (_b = this.app.mouse) === null || _b === void 0 ? void 0 : _b.on(pc.EVENT_MOUSEWHEEL, this._onMouseWheel, this);
            this.on('destroy', () => {
                var _a, _b;
                (_a = this.app.mouse) === null || _a === void 0 ? void 0 : _a.off(pc.EVENT_MOUSEMOVE, this._onMouseMove, this);
                (_b = this.app.mouse) === null || _b === void 0 ? void 0 : _b.off(pc.EVENT_MOUSEWHEEL, this._onMouseWheel, this);
            });
        }
        _onMouseMove(event) {
            this._lastMouseMoveEvent = event;
        }
        _onMouseWheel(event) {
            const candidate = this._brushSize + event.wheelDelta * this._brushSizeStep;
            this._brushSize = Math.min(Math.max(candidate, brushMinSize), brushMaxSize);
        }
        _initializeKeyboard() {
            var _a, _b;
            (_a = this.app.keyboard) === null || _a === void 0 ? void 0 : _a.on(pc.EVENT_KEYDOWN, this._onKeyboardDown, this);
            (_b = this.app.keyboard) === null || _b === void 0 ? void 0 : _b.on(pc.EVENT_KEYUP, this._onKeyboardUp, this);
            this.on('destroy', () => {
                var _a, _b;
                (_a = this.app.mouse) === null || _a === void 0 ? void 0 : _a.off(pc.EVENT_KEYDOWN, this._onKeyboardDown, this);
                (_b = this.app.mouse) === null || _b === void 0 ? void 0 : _b.off(pc.EVENT_KEYUP, this._onKeyboardUp, this);
            });
        }
        _onKeyboardDown(event) {
            if (this._keyAddLock === false && event.key === pc.KEY_ADD) {
                this._keyAddLock = true;
                this._brushOpacity = Math.max(this._brushOpacity + this._brushOpacityStep, 0);
            }
            if (this._keySubLock === false && event.key === pc.KEY_SUBTRACT) {
                this._keySubLock = true;
                this._brushOpacity = Math.min(this._brushOpacity - this._brushOpacityStep, 1);
            }
        }
        _onKeyboardUp(event) {
            if (event.key === pc.KEY_ADD) {
                this._keyAddLock = false;
            }
            else if (event.key === pc.KEY_SUBTRACT) {
                this._keySubLock = false;
            }
        }
        _updateHeightMapFromAttr() {
            return __awaiter(this, void 0, void 0, function* () {
                if (this.heightMap.file) {
                    if (!this.heightMap.file.resource) {
                        console.warn('Height map file unset.');
                        return;
                    }
                    const data = this.heightMap.file.resource;
                    yield this._terrain.loadHeightMapFromFile(data, {
                        adaptiveMaxHeight: true,
                        adaptiveWidthAndDepth: true,
                    });
                }
                else {
                    const texture = this.heightMap.texture;
                    if (!texture) {
                        console.warn('Height map image unset.');
                        return;
                    }
                    const resource = texture.resource;
                    const img = resource.getSource();
                    if (!img) {
                        console.warn('Height map image unset.');
                        return;
                    }
                    this._terrain.loadHeightMapFromImg(img, this.heightMap.smoothFactor, this.heightMap.smoothRadius);
                    // TODO: clear heightmap
                    resource.destroy();
                }
                this._renderPreparer.patchesStore.updateAabb();
                this._renderPreparer.patchesStore.updateHeights({
                    minX: 0,
                    minZ: 0,
                    maxX: this.width,
                    maxZ: this.depth
                });
            });
        }
        _saveHeightMapToImg() {
            const base64 = this._terrain.heightMap.toImage();
            const image = new Image();
            image.src = base64;
            const w = window.open(undefined, '_blank');
            w.document.write(image.outerHTML);
        }
        _saveHeightMapToFile() {
            return __awaiter(this, void 0, void 0, function* () {
                const blob = yield this._terrain.heightMap.toFile();
                const blobUrl = URL.createObjectURL(blob);
                const a = document.createElement("a");
                const timestamp = new Date();
                document.body.appendChild(a);
                a.href = blobUrl;
                a.download = `hm_${+timestamp}${heightMapExt}`;
                a.click();
                URL.revokeObjectURL(blobUrl);
            });
        }
        update(dt) {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            if (this._colorPainter.painting) {
                this._colorPainter.stopPaint();
            }
            if (this.autoRender &&
                this.cameraEntity &&
                this.cameraEntity.camera) {
                const camera = this.cameraEntity.camera;
                const mat = this.entity.getWorldTransform();
                const scale = mat.getScale();
                if (this._lastMouseMoveEvent) {
                    let hasChanges = false;
                    camera.screenToWorld(this._lastMouseMoveEvent.x, this._lastMouseMoveEvent.y, camera.nearClip, this._rayStart);
                    camera.screenToWorld(this._lastMouseMoveEvent.x, this._lastMouseMoveEvent.y, camera.farClip, this._rayEnd);
                    this._rayDirection.sub2(this._rayEnd, this._rayStart);
                    const changeRay = !this._ray.origin.equals(this._rayStart) || !this._ray.direction.equals(this._rayDirection);
                    if (changeRay) {
                        this._ray.set(this._rayStart, this._rayDirection);
                        this._raycastResult.clear();
                        this._intersectsRayResult = this._heightFieldShape.intersectsRay(mat, this._ray, this._raycastResult);
                    }
                    if (this._intersectsRayResult) {
                        const brushSizeX = this._brushSize / scale.x | 0;
                        const brushSizeZ = this._brushSize / scale.z | 0;
                        this._terrain.patchVertices.getPosition(this._raycastResult.vertexIndex, terrainLocalVertexPos);
                        if ((_a = this.app.keyboard) === null || _a === void 0 ? void 0 : _a.wasPressed(pc.KEY_I)) {
                            console.log(this._raycastResult, this._localCameraPosition, terrainLocalVertexPos);
                        }
                        (0, Debug_mjs_1.drawPoint)({ center: this._raycastResult.point, radius: this._brushSize, numSegments: 10, depthTest: true, color: pc.Color.GRAY });
                        (0, Debug_mjs_1.drawDirectionVector)(this._raycastResult.point, this._raycastResult.normal, pc.Color.MAGENTA);
                        if (this._lock < 1 &&
                            ((_b = this.app.mouse) === null || _b === void 0 ? void 0 : _b.isPressed(pc.MOUSEBUTTON_LEFT))) {
                            if (this.painting) {
                                const width = this._terrain.width - 1;
                                const depth = this._terrain.depth - 1;
                                const x = terrainLocalVertexPos.x / width;
                                const y = terrainLocalVertexPos.z / depth;
                                const scaleW = brushSizeX / width;
                                const scaleH = brushSizeZ / depth;
                                this._colorPainter.startPaint(dt, x, y, scaleW, scaleH);
                            }
                            else {
                                const average = (brushSizeX + brushSizeZ) / 2;
                                const centerX = terrainLocalVertexPos.x | 0;
                                const centerZ = terrainLocalVertexPos.z | 0;
                                const zone = {
                                    minX: centerX - brushSizeX,
                                    maxX: centerX + brushSizeX + 1,
                                    minZ: centerZ - brushSizeZ,
                                    maxZ: centerZ + brushSizeZ + 1,
                                };
                                if ((_c = this.app.keyboard) === null || _c === void 0 ? void 0 : _c.isPressed(pc.KEY_ALT)) {
                                    this._terrain.smoothHeightsZone(zone, average * this._brushOpacity * dt / 10, 1);
                                }
                                else {
                                    const negative = !!((_d = this.app.keyboard) === null || _d === void 0 ? void 0 : _d.isPressed(pc.KEY_CONTROL));
                                    const appendValue = (negative ? -average : average) * this._brushOpacity * dt / 10;
                                    this._terrain.appendHeightMap(this._brushHeightMap, appendValue, zone);
                                }
                                if ((_e = this.app.keyboard) === null || _e === void 0 ? void 0 : _e.wasPressed(pc.KEY_I)) {
                                    console.log(zone);
                                }
                                this._terrain.recalculateMinMax(zone);
                                this._renderPreparer.patchesStore.updateHeights(zone);
                                hasChanges = true;
                            }
                        }
                    }
                }
                tmpMat.invert(mat);
                tmpMat.transformPoint(camera.entity.getPosition(), this._localCameraPosition);
                this._frustum.frustum = camera.frustum;
                this._frustum.transform = mat;
                this._terrain.updateLods(this._localCameraPosition, this.lodByYPos, true);
                this._renderPreparer.update(this._frustum);
            }
            if ((_f = this.app.keyboard) === null || _f === void 0 ? void 0 : _f.wasPressed(pc.KEY_L)) {
                this._terrain.printLodMap();
            }
            if ((_g = this.app.keyboard) === null || _g === void 0 ? void 0 : _g.wasPressed(pc.KEY_P)) {
                this._saveHeightMapToImg();
            }
            if ((_h = this.app.keyboard) === null || _h === void 0 ? void 0 : _h.wasPressed(pc.KEY_O)) {
                this._saveHeightMapToFile();
            }
            // Debug
            //this.app.drawTexture( 0.5, -0.6, 0.5, 0.3, this.painterSettings.splatMap.resource, undefined as any);
        }
    }
    exports.Terrain = Terrain;
    exports.default = Terrain;
    exports.terrainScriptName = "Terrain";
    exports.bigTerrainEditorScriptName = "bigTerrainEditor";
    pc.registerScript(Terrain, exports.terrainScriptName);
    pc.registerScript(Terrain, exports.bigTerrainEditorScriptName);
    Terrain.attributes.add("renderMode", { type: "number", enum: (0, EnumConverter_mjs_2.mapTitleEnum)(RenderMode), default: RenderMode.Standard, });
    Terrain.attributes.add("castShadow", { type: "boolean", default: true, });
    Terrain.attributes.add("receiveShadow", { type: "boolean", default: true, });
    Terrain.attributes.add("lodByYPos", { type: "boolean", default: true, });
    Terrain.attributes.add("zFar", { type: "number", default: 5000, min: 1, step: 1, precision: 0, });
    Terrain.attributes.add("width", { type: "number", enum: Enums_mjs_1.terrainSizeEnum, default: Enums_mjs_1.terrainSizeEnumDefault, });
    Terrain.attributes.add("depth", { type: "number", enum: Enums_mjs_1.terrainSizeEnum, default: Enums_mjs_1.terrainSizeEnumDefault, });
    Terrain.attributes.add("patchSize", { type: "number", enum: Enums_mjs_1.terrainPatchSizeEnum, default: Enums_mjs_1.terrainPatchSizeEnumDefault, });
    Terrain.attributes.add("height", { type: "number", default: 10, min: 1, });
    Terrain.attributes.add("compressAlgoritm", { type: "string", enum: Enums_mjs_1.terrainHeightsCompressAlgoritm, default: Enums_mjs_1.terrainHeightsCompressAlgoritmDefault, });
    Terrain.attributes.add("layer", { type: "string", default: 'TerrainEditor', });
    Terrain.attributes.add("cameraEntity", { type: "entity" });
    Terrain.attributes.add("autoRender", { type: "boolean", default: true, });
    Terrain.attributes.add("painting", { type: "boolean", default: false, });
    Terrain.attributes.add("wireframe", { type: "boolean", default: false, });
    Terrain.attributes.add("heightMap", {
        type: 'json',
        schema: [
            {
                name: 'file',
                type: 'asset',
                assetType: 'binary',
            },
            {
                name: 'texture',
                type: "asset",
                assetType: 'texture',
            },
            {
                name: 'smoothFactor',
                description: `
                To what extent neighbors influence the new height:
                Value of 0 will ignore neighbors (no smoothing).
                Value of 1 will ignore the node old height.
            `,
                type: "number",
                default: 1,
                min: 0,
                max: 1,
            },
            {
                name: 'smoothRadius',
                description: `The radius of factor smooth.`,
                type: "number",
                default: 1,
                step: 1,
                min: 1,
            }
        ]
    });
    Terrain.attributes.add("brush", {
        type: "json",
        schema: [
            {
                name: "active",
                description: "The brush texture index.",
                type: "number",
                default: 0,
                min: 0,
                step: 1,
                precision: 0,
            },
            {
                name: "size",
                description: "The brush size",
                type: "number",
                default: 10,
                min: brushMinSize,
                max: brushMaxSize,
                step: 1,
                precision: 0,
            },
            {
                name: "opacity",
                description: "The brush opacity",
                type: "number",
                default: 0.5,
                min: 0,
                max: 1,
            },
            {
                name: "textures",
                description: "The brush textures",
                type: "asset",
                assetType: 'texture',
                array: true,
            }
        ]
    });
    Terrain.attributes.add("activeLayer", { type: 'number', default: 0, min: 0, max: 32, step: 1, precision: 0, });
    Terrain.attributes.add("layers", {
        type: "json",
        array: true,
        schema: [
            {
                name: "name",
                title: "Name",
                type: "string",
            },
            {
                name: "diffuse",
                title: "Diffuse",
                type: "asset",
                assetType: "texture",
            },
            {
                name: "normalMap",
                title: "Normal Map",
                type: "asset",
                assetType: "texture",
            },
            {
                name: "size",
                title: "Size",
                type: "vec2",
                default: [1, 1]
            },
            {
                name: "offset",
                title: "Offset",
                type: "vec2",
                default: [0, 0]
            },
        ]
    });
    Terrain.attributes.add("painterSettings", {
        type: "json",
        schema: [
            {
                name: "splatMap",
                type: "asset",
                assetType: "texture",
                title: "Splat Map",
            },
        ]
    });
});
define("src/Scripts/GrassField", ["require", "exports", "src/GrassFieldHelpers/GrassFieldTexture", "src/GrassFieldHelpers/GrassShaderChunk", "src/Shared/Debug", "src/Shared/Random", "src/TerrainHelpers/TerrainPatches", "src/TerrainHelpers/TerrainPatchesShaderChunks", "src/Scripts/Terrain"], function (require, exports, GrassFieldTexture_mjs_1, GrassShaderChunk_mjs_1, Debug_mjs_2, Random_mjs_1, TerrainPatches_mjs_2, TerrainPatchesShaderChunks_mjs_5, Terrain_mjs_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.grassFieldScriptName = exports.GrassField = exports.quadMatrixIndexes = exports.quad2Matrix = exports.quad1Matrix = void 0;
    Random_mjs_1 = __importDefault(Random_mjs_1);
    Terrain_mjs_2 = __importDefault(Terrain_mjs_2);
    exports.quad1Matrix = [
        2, 2, 1, 2, 0, 2,
        0, 1, 0, 0, 1, 0,
        2, 0, 2, 1, 1, 1
    ];
    exports.quad2Matrix = [
        4, 4, 3, 4, 2, 4, 1, 4,
        0, 4, 0, 3, 0, 2, 0, 1,
        0, 0, 1, 0, 2, 0, 3, 0,
        4, 0, 4, 1, 4, 2, 4, 3
    ];
    exports.quadMatrixIndexes = [
        [4, 3, 2], // 0
        [5, 8, 1], // 1
        [6, 7, 0], // 2
    ];
    const lod1QuadCount = 8;
    const lod2QuadCount = 16;
    const tmpMat = new pc.Mat4();
    class GrassField extends pc.ScriptType {
        constructor() {
            super(...arguments);
            this.transitionLow = 0.31;
            this.transitionHigh = 0.36;
            this._bufferStore = {};
            this._time = 0;
            this._lastDrawPos = new pc.Vec3();
            this._lod1MinMaxStore = [];
            this._lod2MinMaxStore = [];
            this._offsetLod1Arr = [
                0, 0, 0, 0,
                0, 0, 0, 0,
                0, 0, 0, 0,
                0, 0, 0, 0,
            ];
            this._offsetLod2Arr = [
                0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0,
            ];
        }
        get checkRadius() { return this.radius / 2; }
        get patchRadius() { return this.radius / 2; }
        destroy() {
            var _a, _b, _c, _d, _e;
            (_a = this._sharedIndexBuffer) === null || _a === void 0 ? void 0 : _a.destroy();
            (_b = this._sharedVertexBuffer) === null || _b === void 0 ? void 0 : _b.destroy();
            (_c = this._sharedInstancingBuffer) === null || _c === void 0 ? void 0 : _c.destroy();
            if (this._meshInst) {
                (_e = (_d = this._meshInst.instancingData) === null || _d === void 0 ? void 0 : _d.vertexBuffer) === null || _e === void 0 ? void 0 : _e.destroy();
                this._meshInst.destroy();
                if (this._meshInst.mesh) {
                    this._meshInst.mesh.destroy();
                }
                if (this._material) {
                    this._material.destroy();
                }
            }
            if (this.entity.render) {
                this.entity.render.meshInstances = [];
            }
        }
        _initBladesAndEditMode() {
            this._updateGrassMesh(this.app.graphicsDevice, this.patchRadius);
            if (this.painting) {
                this._terrain.addLock();
            }
        }
        postInitialize() {
            var _a;
            const terrainEntity = this.entity.root.findByName('Terrain');
            const terrainScript = (_a = terrainEntity.script) === null || _a === void 0 ? void 0 : _a.get(Terrain_mjs_2.default);
            this._terrain = terrainScript;
            this._cameraEntity = terrainScript.cameraEntity;
            this._dataTexture = new GrassFieldTexture_mjs_1.GrassFieldTexture(this.app.graphicsDevice, this._terrain.width, this._terrain.depth);
            this._initBladesAndEditMode();
            this.on('enable', () => this._initBladesAndEditMode());
            this.on('disable', () => {
                this.destroy();
                this._terrain.freeLock();
            });
            this.on('attr:painting', () => {
                if (this.painting) {
                    this._terrain.addLock();
                }
                else {
                    this._terrain.freeLock();
                }
            });
            this.on('attr:wireframe', () => {
                var _a, _b;
                const primitive = (_b = (_a = this._meshInst) === null || _a === void 0 ? void 0 : _a.mesh) === null || _b === void 0 ? void 0 : _b.primitive;
                if (primitive && primitive[0]) {
                    primitive[0].type = this.wireframe ? pc.PRIMITIVE_LINES : pc.PRIMITIVE_TRIANGLES;
                }
            });
            this.on('attr:castShadow', () => {
                this._meshInst.castShadow = this.castShadow;
            });
            this.on('attr:receiveShadow', () => {
                this._meshInst.receiveShadow = this.receiveShadow;
            });
            this.on('attr:seed', () => this._updateMeshInstancing(this.app.graphicsDevice, this.patchRadius));
            this.on('attr:numBlades', () => this._updateMeshInstancing(this.app.graphicsDevice, this.patchRadius));
            this.on('attr:bladeWidth', () => this._updateMeshInstancing(this.app.graphicsDevice, this.patchRadius));
            this.on('attr:bladeMinHeight', () => this._updateMeshInstancing(this.app.graphicsDevice, this.patchRadius));
            this.on('attr:bladeMaxHeight', () => this._updateMeshInstancing(this.app.graphicsDevice, this.patchRadius));
            this.on('attr:radius', () => this._updateGrassMesh(this.app.graphicsDevice, this.patchRadius));
            this.on('attr:lod0BladeSegs', () => this._updateGrassMesh(this.app.graphicsDevice, this.patchRadius));
            this.on('attr:lod1BladeSegs', () => this._updateGrassMesh(this.app.graphicsDevice, this.patchRadius));
        }
        update(dt) {
            const cameraPos = this._cameraEntity.getPosition();
            const existsTexs = !!this.textures && this.textures.length > 0;
            const color = existsTexs ? this.textures[0].color : pc.Color.WHITE;
            const rand = existsTexs ? this.textures[0].colorRandom : pc.Vec3.ZERO;
            const tex = existsTexs ? this.textures[0].diffuse.resource : null;
            if (!this.freezeDrawPos) {
                const mat = this.entity.getWorldTransform();
                tmpMat.invert(mat);
                tmpMat.transformPoint(cameraPos, this._lastDrawPos);
            }
            this._time += dt;
            this._material.setParameter(GrassShaderChunk_mjs_1.timeParamName, this._time);
            this._material.setParameter(GrassShaderChunk_mjs_1.windIntensityParamName, this.windIntensity);
            this._material.setParameter(GrassShaderChunk_mjs_1.drawPosParamName, [this._lastDrawPos.x, this._lastDrawPos.y, this._lastDrawPos.z]);
            this._material.setParameter('uDiffuseColor', [color.r, color.g, color.b]);
            this._material.setParameter('uDiffuseColorRandom', [rand.x, rand.y, rand.z]);
            this._material.setParameter('uDiffuseTex', tex);
            this._frustum(cameraPos, this._cameraEntity.camera.camera, this.freezeDrawPos);
        }
        updateAabb() {
            const patchesAabb = this._terrain.renderPreparer.patchesStore.aabb;
            if (this._meshInst) {
                this._meshInst.mesh.aabb = patchesAabb;
                this._meshInst.aabb = patchesAabb;
                this._meshInst.setCustomAabb(patchesAabb);
            }
        }
        _frustumHelper(count, quadMatrix, quadOffset, minMaxStore, offsetArr, inverse, cameraPos, camera, freeze) {
            const scale = this.entity.getScale();
            const terrainScale = this._terrain.entity.getScale();
            const checkRadius = this.checkRadius * Math.max(scale.x, scale.z);
            const maxHeight = this._terrain.object.maxHeight * terrainScale.y;
            const frustumPlanes = camera.frustum.planes;
            const checkIsVisible = (min, max) => {
                for (let p = 0; p < 6; p++) {
                    const frustumPlane = frustumPlanes[p];
                    const d = Math.max(min.x * frustumPlane[0], max.x * frustumPlane[0])
                        + Math.max(min.y * frustumPlane[1], max.y * frustumPlane[1])
                        + Math.max(min.z * frustumPlane[2], max.z * frustumPlane[2])
                        + frustumPlane[3];
                    if (d <= 0) {
                        return false;
                    }
                }
                return true;
            };
            let visibleCount = 0;
            for (let i = 0; i < count; i++) {
                if (!minMaxStore[i])
                    minMaxStore[i] = [new pc.Vec3(), new pc.Vec3(), false];
                if (!freeze) {
                    const quadMatrixX = quadMatrix[i * 2 + 0];
                    const quadMatrixZ = quadMatrix[i * 2 + 1];
                    const localCenterX = this.radius * (quadMatrixX - quadOffset);
                    const localCenterZ = this.radius * (quadMatrixZ - quadOffset);
                    const worldCenterX = cameraPos.x + localCenterX * scale.x;
                    const worldCenterZ = cameraPos.z + localCenterZ * scale.z;
                    minMaxStore[i][0].set(worldCenterX - checkRadius, 0, worldCenterZ - checkRadius);
                    minMaxStore[i][1].set(worldCenterX + checkRadius, maxHeight, worldCenterZ + checkRadius);
                    const visible = checkIsVisible(minMaxStore[i][0], minMaxStore[i][1]);
                    if (visible) {
                        offsetArr[visibleCount * 2 + 0] = localCenterX;
                        offsetArr[visibleCount * 2 + 1] = localCenterZ;
                    }
                    minMaxStore[i][2] = visible;
                }
                const min = minMaxStore[i][0];
                const max = minMaxStore[i][1];
                const vis = minMaxStore[i][2];
                if (freeze) {
                    (0, Debug_mjs_2.drawBox)({ min, max, color: vis ? pc.Color.GREEN : pc.Color.RED });
                }
                visibleCount += Number(vis);
            }
            if (!freeze && inverse && visibleCount > 0) {
                const hiddenCount = count - visibleCount;
                for (let i = visibleCount; i > -1; i--) {
                    const indexIn = (hiddenCount + i) * 2;
                    const indexOr = i * 2;
                    offsetArr[indexIn + 0] = offsetArr[indexOr + 0];
                    offsetArr[indexIn + 1] = offsetArr[indexOr + 1];
                }
            }
            return visibleCount;
        }
        _frustum(cameraPos, camera, freeze) {
            var _a;
            const visibleLod1Count = this._frustumHelper(lod1QuadCount, exports.quad1Matrix, 1, this._lod1MinMaxStore, this._offsetLod1Arr, false, cameraPos, camera, freeze);
            const visibleLod2Count = this._frustumHelper(lod2QuadCount, exports.quad2Matrix, 2, this._lod2MinMaxStore, this._offsetLod2Arr, true, cameraPos, camera, freeze);
            const meshInst = this._meshInst;
            const mesh = meshInst.mesh;
            const primitive = mesh.primitive[0];
            const base = this.lod2BladeSegs * 12 * (lod2QuadCount - visibleLod2Count);
            const count = this.lod0BladeSegs * 12
                + this.lod1BladeSegs * 12 * visibleLod1Count
                + this.lod2BladeSegs * 12 * visibleLod2Count;
            meshInst.setParameter(`${GrassShaderChunk_mjs_1.lod1OffsetXZParamName}[0]`, this._offsetLod1Arr);
            meshInst.setParameter(`${GrassShaderChunk_mjs_1.lod2OffsetXZParamName}[0]`, this._offsetLod2Arr);
            // always true for lod 0
            meshInst.visible = this.autoRender || freeze;
            meshInst.visibleThisFrame = this.autoRender || freeze;
            primitive.base = base;
            primitive.count = count;
            if ((_a = this.app.keyboard) === null || _a === void 0 ? void 0 : _a.wasReleased(pc.KEY_V)) {
                console.log(visibleLod1Count);
                console.log(visibleLod2Count);
                console.log(this._offsetLod1Arr);
                console.log(this._offsetLod2Arr);
            }
        }
        _updateGrassMesh(graphicsDevice, radius) {
            this._updateMeshBuffers(graphicsDevice);
            this._updateMeshMaterial(graphicsDevice);
            this._updateMeshInstance(graphicsDevice);
            this._updateMeshInstancing(graphicsDevice, radius);
            this.updateAabb();
            const meshInstances = [this._meshInst];
            if (this.entity.render) {
                this.entity.render.meshInstances = meshInstances;
            }
            else {
                this.entity.addComponent('render', {
                    meshInstances: meshInstances,
                    castShadows: this.castShadow,
                    receiveShadows: this.receiveShadow,
                    cull: false,
                });
            }
            this._meshInst.castShadow = this.castShadow;
            this._meshInst.receiveShadow = this.receiveShadow;
        }
        _updateMeshInstancing(graphicsDevice, radius) {
            var _a, _b, _c;
            if (this._meshInst) {
                this._updateInstancingBuffer(graphicsDevice, radius);
                (_c = (_b = (_a = this._meshInst) === null || _a === void 0 ? void 0 : _a.instancingData) === null || _b === void 0 ? void 0 : _b.vertexBuffer) === null || _c === void 0 ? void 0 : _c.destroy();
                this._meshInst.setInstancing(this._sharedInstancingBuffer);
            }
        }
        _updateMeshInstance(graphicsDevice) {
            var _a, _b, _c, _d;
            (_c = (_b = (_a = this._meshInst) === null || _a === void 0 ? void 0 : _a.instancingData) === null || _b === void 0 ? void 0 : _b.vertexBuffer) === null || _c === void 0 ? void 0 : _c.destroy();
            (_d = this._meshInst) === null || _d === void 0 ? void 0 : _d.destroy();
            const mesh = new pc.Mesh(graphicsDevice);
            const primitive = mesh.primitive[0];
            mesh.indexBuffer[0] = this._sharedIndexBuffer;
            mesh.vertexBuffer = this._sharedVertexBuffer;
            primitive.type = this.wireframe ? pc.PRIMITIVE_LINES : pc.PRIMITIVE_TRIANGLES;
            primitive.base = 0;
            primitive.count = this._bufferStore.index.length;
            primitive.indexed = true;
            this._meshInst = new pc.MeshInstance(mesh, this._material, this.entity);
        }
        /**
        * Sets up indices for single blade mesh.
        * @param id array of indices
        * @param vc1 vertex start offset for front side of blade
        * @param vc2 vertex start offset for back side of blade
        * @param i index offset
        */
        _initBladeIndices(id, vc1, vc2, i, bladeSegs) {
            let seg;
            // blade front side
            for (seg = 0; seg < bladeSegs; ++seg) {
                id[i++] = vc1 + 0; // tri 1
                id[i++] = vc1 + 1;
                id[i++] = vc1 + 2;
                id[i++] = vc1 + 2; // tri 2
                id[i++] = vc1 + 1;
                id[i++] = vc1 + 3;
                vc1 += 2;
            }
            // blade back side
            for (seg = 0; seg < bladeSegs; ++seg) {
                id[i++] = vc2 + 2; // tri 1
                id[i++] = vc2 + 1;
                id[i++] = vc2 + 0;
                id[i++] = vc2 + 3; // tri 2
                id[i++] = vc2 + 1;
                id[i++] = vc2 + 2;
                vc2 += 2;
            }
            return i;
        }
        /** Set up indices for 1 blade */
        _initBladeIndexVerts(vindex) {
            for (let i = 0; i < vindex.length; ++i) {
                vindex[i] = i;
            }
        }
        _initBladeOffsetShapeVerts(offsetShape, radius, numBlades) {
            const normalizeValue = offsetShape instanceof Uint16Array ? pc.FloatPacking.float2Half : (x) => x;
            const random = new Random_mjs_1.default(this.seed);
            const heightFactor = this.bladeMaxHeight - this.bladeMinHeight;
            //let noise = 0;
            for (let i = 0; i < numBlades; ++i) {
                //noise = Math.abs(simplex(offsetShape[i * 8 + 0] * 0.03, offsetShape[i * 8 + 2] * 0.03));
                //noise = noise * noise * noise;
                //noise *= 5.0;
                const x = random.nrand() * radius;
                const y = random.nrand() * radius;
                const z = 0;
                const rotation = Math.PI * 2.0 * random.random();
                const width = this.bladeWidth + random.random() * this.bladeWidth * 0.5;
                const height = this.bladeMinHeight + Math.pow(random.random(), 4.0) * heightFactor;
                const lean = 0.01 + random.random() * 0.3;
                const curve = 0.05 + random.random() * 0.3;
                offsetShape[i * 8 + 0] = normalizeValue(x); // x
                offsetShape[i * 8 + 1] = normalizeValue(y); // y
                offsetShape[i * 8 + 2] = normalizeValue(z); // z
                offsetShape[i * 8 + 3] = normalizeValue(rotation); // rot
                offsetShape[i * 8 + 4] = normalizeValue(width); // width
                offsetShape[i * 8 + 5] = normalizeValue(height); //+ noise; //+ height
                offsetShape[i * 8 + 6] = normalizeValue(lean); // lean
                offsetShape[i * 8 + 7] = normalizeValue(curve); // curve
            }
        }
        _updateInstancingBuffer(graphicsDevice, radius) {
            var _a;
            (_a = this._sharedInstancingBuffer) === null || _a === void 0 ? void 0 : _a.destroy();
            const lod0PatchCount = 1;
            const lod1PatchCount = 8;
            const lod2PatchCount = 16;
            const patchNumBlades = (this.numBlades / (lod0PatchCount + lod1PatchCount + lod2PatchCount)) | 0;
            const offsetAndShapeLength = patchNumBlades * 8;
            if (this._bufferStore.offsetAndShape === undefined ||
                this._bufferStore.offsetAndShape.length !== offsetAndShapeLength) {
                this._bufferStore.offsetAndShape = new Float32Array(offsetAndShapeLength);
            }
            this._initBladeOffsetShapeVerts(this._bufferStore.offsetAndShape, radius, patchNumBlades);
            const type = this._bufferStore.offsetAndShape instanceof Uint16Array ? pc.TYPE_FLOAT16 : pc.TYPE_FLOAT32;
            const instancingFormat = new pc.VertexFormat(graphicsDevice, [
                {
                    semantic: pc.SEMANTIC_ATTR10,
                    components: 4,
                    type: type,
                    normalize: false,
                    asInt: false
                },
                {
                    semantic: pc.SEMANTIC_ATTR11,
                    components: 4,
                    type: type,
                    normalize: false,
                    asInt: false,
                },
            ]);
            this._sharedInstancingBuffer = new pc.VertexBuffer(graphicsDevice, instancingFormat, patchNumBlades, {
                usage: pc.BUFFER_STATIC,
                data: this._bufferStore.offsetAndShape,
                storage: false,
            });
        }
        _getVertexFormat(graphicsDevice) {
            return new pc.VertexFormat(graphicsDevice, [{
                    semantic: pc.SEMANTIC_POSITION,
                    components: 1,
                    type: pc.TYPE_FLOAT32,
                    normalize: false,
                    asInt: false
                }]);
        }
        _updateMeshBuffers(graphicsDevice) {
            var _a, _b;
            (_a = this._sharedIndexBuffer) === null || _a === void 0 ? void 0 : _a.destroy();
            (_b = this._sharedVertexBuffer) === null || _b === void 0 ? void 0 : _b.destroy();
            const lod0VC = (this.lod0BladeSegs + 1) * 2;
            const lod1VC = (this.lod1BladeSegs + 1) * 2;
            const lod2VC = (this.lod2BladeSegs + 1) * 2;
            const indexLength = this.lod0BladeSegs * 12 + this.lod1BladeSegs * 12 * lod1QuadCount + this.lod2BladeSegs * 12 * lod2QuadCount;
            const indexVertsLength = lod0VC * 2 + lod1VC * 2 * lod1QuadCount + lod2VC * 2 * lod2QuadCount;
            if (this._bufferStore.index === undefined ||
                this._bufferStore.index.length !== indexLength) {
                this._bufferStore.index = new Uint16Array(indexLength);
                let index = 0;
                for (let i = 0; i < lod2QuadCount; i++) {
                    const lod2VC1 = i * lod2VC * 2;
                    const lod2VC2 = lod2VC1 + lod2VC;
                    index = this._initBladeIndices(this._bufferStore.index, lod2VC1, lod2VC2, index, this.lod2BladeSegs);
                }
                const lod0VC1 = lod2QuadCount * lod2VC * 2;
                const lod0VC2 = lod0VC1 + lod0VC;
                index = this._initBladeIndices(this._bufferStore.index, lod0VC1, lod0VC2, index, this.lod0BladeSegs);
                for (let i = 0; i < lod1QuadCount; i++) {
                    const lod1VC1 = lod0VC2 + lod0VC + i * lod1VC * 2;
                    const lod1VC2 = lod1VC1 + lod1VC;
                    index = this._initBladeIndices(this._bufferStore.index, lod1VC1, lod1VC2, index, this.lod1BladeSegs);
                }
            }
            if (this._bufferStore.indexVerts === undefined ||
                this._bufferStore.indexVerts.length !== indexVertsLength) {
                this._bufferStore.indexVerts = new Float32Array(indexVertsLength);
                this._initBladeIndexVerts(this._bufferStore.indexVerts);
            }
            this._sharedIndexBuffer = new pc.IndexBuffer(graphicsDevice, pc.INDEXFORMAT_UINT16, this._bufferStore.index.length, pc.BUFFER_STATIC, this._bufferStore.index, { storage: false });
            this._sharedVertexBuffer = new pc.VertexBuffer(graphicsDevice, this._getVertexFormat(graphicsDevice), this._bufferStore.indexVerts.length, {
                usage: pc.BUFFER_STATIC,
                data: this._bufferStore.indexVerts,
                storage: false,
            });
        }
        _updateMeshMaterial(graphicsDevice) {
            var _a;
            (_a = this._material) === null || _a === void 0 ? void 0 : _a.destroy();
            this._material = new pc.StandardMaterial();
            this._material.name = "GrassFieldMaterial";
            /*
            this._material.depthTest = false;
            this._material.depthWrite = true;
            this._material.blendType = pc.BLEND_NONE;
            this._material.alphaTest = 0;
            this._material.alphaWrite = false;
            this._material.alphaFade = false;
            this._material.alphaToCoverage = false;
            */
            const terrain = this._terrain.object;
            const patches = this._terrain.renderPreparer.patchesStore;
            const heightMap = patches.heightMapTexture;
            const terrainScale = this._terrain.entity.getScale();
            this._material.setAttribute(GrassShaderChunk_mjs_1.vindexAttrName, pc.SEMANTIC_POSITION);
            this._material.setAttribute(GrassShaderChunk_mjs_1.offsetAttrName, pc.SEMANTIC_ATTR10);
            this._material.setAttribute(GrassShaderChunk_mjs_1.shapeAttrName, pc.SEMANTIC_ATTR11);
            this._material.setParameter('uDataMap', this._dataTexture.texture);
            this._material.setParameter(TerrainPatchesShaderChunks_mjs_5.terrainHeightMapParamName, heightMap);
            this._material.setParameter(GrassShaderChunk_mjs_1.terrainScaleParamName, [terrainScale.x, terrainScale.y, terrainScale.z]);
            this._material.setParameter(TerrainPatchesShaderChunks_mjs_5.terrainMaxHeightParamName, terrain.maxHeight);
            this._material.setParameter(`${GrassShaderChunk_mjs_1.lod1OffsetXZParamName}[0]`, this._offsetLod1Arr);
            this._material.setParameter(`${GrassShaderChunk_mjs_1.lod2OffsetXZParamName}[0]`, this._offsetLod2Arr);
            this._material.setParameter(GrassShaderChunk_mjs_1.drawPosParamName, [0, 0, 0]);
            this._material.setParameter(GrassShaderChunk_mjs_1.timeParamName, this._time);
            this._material.setParameter(GrassShaderChunk_mjs_1.windIntensityParamName, 0);
            const hmFormat = (0, TerrainPatches_mjs_2.getHeightMapFormat)(graphicsDevice, terrain.heightMap);
            const chunks = (0, GrassShaderChunk_mjs_1.getGrassShaderChunks)({
                width: terrain.width,
                depth: terrain.depth,
                heightMapChunkSize: terrain.heightMap.dataChunkSize,
                heightMapFormat: hmFormat,
                bladeMaxHeight: this.bladeMaxHeight * 1.5,
                lod0BladeSegs: this.lod0BladeSegs,
                lod1BladeSegs: this.lod1BladeSegs,
                lod2BladeSegs: this.lod2BladeSegs,
                radius: this.radius,
                transitionLow: this.transitionLow,
                transitionHigh: this.transitionHigh,
                engineVersion: `v${pc.version[0]}`,
            });
            const chunkNames = Object.keys(chunks);
            for (let chunkName of chunkNames) {
                // @ts-ignore
                this._material.chunks[chunkName] = chunks[chunkName];
            }
            // @ts-ignore
            this._material.chunks.APIVersion = pc.CHUNKAPI_1_70;
            this._material.update();
        }
    }
    exports.GrassField = GrassField;
    exports.default = GrassField;
    exports.grassFieldScriptName = "grassField";
    pc.registerScript(GrassField, exports.grassFieldScriptName);
    GrassField.attributes.add("painting", { type: "boolean", default: false });
    GrassField.attributes.add("castShadow", { type: "boolean", default: true, });
    GrassField.attributes.add("receiveShadow", { type: "boolean", default: true, });
    GrassField.attributes.add("wireframe", { type: "boolean", default: false });
    GrassField.attributes.add("freezeDrawPos", { type: "boolean", default: false });
    GrassField.attributes.add("autoRender", { type: "boolean", default: true });
    GrassField.attributes.add("seed", { type: "number", default: 53464546455, min: 1, step: 1, precision: 0 });
    GrassField.attributes.add("windIntensity", { type: "number", default: 0, min: -30, max: 30 });
    GrassField.attributes.add("numBlades", { type: "number", default: 4000, min: 0, max: 8000000, step: 1, precision: 0 });
    GrassField.attributes.add("radius", { type: "number", default: 80, min: 1, max: 10000 });
    GrassField.attributes.add("lod0BladeSegs", { type: "number", default: 3, min: 1, max: 10, step: 1, precision: 0 });
    GrassField.attributes.add("lod1BladeSegs", { type: "number", default: 2, min: 1, max: 10, step: 1, precision: 0 });
    GrassField.attributes.add("lod2BladeSegs", { type: "number", default: 1, min: 1, max: 10, step: 1, precision: 0 });
    GrassField.attributes.add("bladeWidth", { type: "number", default: 0.04, min: 0.01, max: 5 });
    GrassField.attributes.add("bladeMinHeight", { type: "number", default: 0.25, min: 0.01, max: 10 });
    GrassField.attributes.add("bladeMaxHeight", { type: "number", default: 1, min: 0.01, max: 10 });
    GrassField.attributes.add("textures", {
        type: "json",
        array: true,
        schema: [
            {
                name: "name",
                title: "Name",
                type: "string",
            },
            {
                name: "diffuse",
                title: "Diffuse",
                type: "asset",
                assetType: "texture",
            },
            {
                name: "color",
                title: "Color",
                type: "rgb"
            },
            {
                name: "colorRandom",
                title: "Color Random",
                type: "vec3",
                default: [0.01, 0.01, 0.01]
            }
        ]
    });
});
define("src/Scripts/TerrainCollider", ["require", "exports", "src/Scripts/Terrain"], function (require, exports, Terrain_mjs_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.terrainColliderScriptName = exports.TerrainCollider = void 0;
    class TerrainCollider extends pc.ScriptType {
        initialize() {
            var _a;
            const terrain = (_a = this.entity.script) === null || _a === void 0 ? void 0 : _a.get(Terrain_mjs_3.terrainScriptName);
            // TODO
        }
    }
    exports.TerrainCollider = TerrainCollider;
    exports.default = TerrainCollider;
    exports.terrainColliderScriptName = "terrainCollider";
    pc.registerScript(TerrainCollider, exports.terrainColliderScriptName);
});
define("src/TreeFieldHelpers/InstancedMesh", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InstancedMesh = void 0;
    class InstancedMesh {
        constructor() {
            /**
             * Attribute storing indices of the instances to be rendered.
             */
            this.instanceIndex = null;
            this._count = 0;
            this._capacity = 0;
        }
        _initIndexAttribute() {
            if (!this._graphicsDevice) {
                this._count = 0;
                return;
            }
            const capacity = this._capacity;
            const array = new Uint32Array(capacity);
            for (let i = 0; i < capacity; i++) {
                array[i] = i;
            }
            this.instanceIndex = new pc.VertexFormat(this._graphicsDevice, [{
                    semantic: pc.SEMANTIC_ATTR10,
                    components: 1,
                    type: pc.TYPE_UINT32,
                    normalize: false,
                    asInt: true
                }]);
        }
    }
    exports.InstancedMesh = InstancedMesh;
});
define("src/TreeFieldHelpers/TreeField", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TreeField = exports.A = void 0;
    class A {
    }
    exports.A = A;
    class TreeField {
        constructor() {
        }
        addTree(x, z, angle, height) {
        }
        removeTree(index) {
        }
    }
    exports.TreeField = TreeField;
});
;
(() => {
    if (window.___amd___requireResolver) {
        window.___amd___requireResolver();
    }
})();
//# sourceMappingURL=data:application/json;base64,