"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
;
(() => {
    const defs = {};
    const resolved = {};
    // save original define and require
    window.___amd___OriginalDefine = window.define;
    window.___amd___OriginalRequire = window.require;
    if (!window.define && !window.require) {
        const define = (id, deps, factory) => {
            if (defs[id]) {
                throw new Error('Duplicate definition for ' + id);
            }
            defs[id] = [deps, factory];
        };
        define.amd = {
            bundle: true, // this implementation works only with bundled amd modules
            dynamic: false, // does not support dynamic or async loading
        };
        const require = (id) => {
            if (id === 'require')
                return require;
            if (id === 'exports')
                return {};
            if (resolved[id])
                return resolved[id];
            if (!defs[id]) {
                console.log(defs, id);
                throw new Error('No definition for ' + id);
            }
            const moduleExports = {};
            const deps = defs[id][0];
            const factory = defs[id][1];
            const args = deps.map(dep => {
                if (dep === 'exports') {
                    return moduleExports;
                }
                return require(dep);
            });
            factory.apply(null, args);
            return resolved[id] = moduleExports;
        };
        window.define = define;
        window.require = require;
    }
    window.___amd___requireResolver = () => {
        for (const id in defs) {
            if (defs.hasOwnProperty(id)) {
                const deps = defs[id][0];
                if (deps) {
                    deps.map(dep => {
                        if (dep !== 'require' &&
                            dep !== 'exports') {
                            if (!resolved.hasOwnProperty(dep)) {
                                require(dep);
                            }
                            if (!defs.hasOwnProperty(dep) &&
                                !resolved.hasOwnProperty(dep)) {
                                throw new Error(`Failed define '${id}' dep not found '${dep}'`);
                            }
                        }
                    });
                }
                require(id);
                delete defs[id];
            }
        }
        // return original define and require
        window.define = window.___amd___OriginalDefine;
        window.require = window.___amd___OriginalRequire;
        // clear
        delete window.___amd___requireResolver;
        delete window.___amd___OriginalDefine;
        delete window.___amd___OriginalRequire;
    };
})();
define("src/Extras/Types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("src/Core/IZone", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("src/Extras/Compressor", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class Compressor {
        static _concatChunks(chunks, totalLength) {
            let position = 0;
            // Concatenate all Uint8Array chunks into a single ArrayBuffer
            const resultBuffer = new Uint8Array(totalLength);
            for (const chunk of chunks) {
                resultBuffer.set(chunk, position);
                position += chunk.length;
            }
            return resultBuffer.buffer;
        }
        static _getResult(reader) {
            return __awaiter(this, void 0, void 0, function* () {
                let totalLength = 0;
                const chunks = [];
                while (true) {
                    const { done, value } = yield reader.read();
                    if (done)
                        break;
                    chunks.push(value);
                    totalLength += value.length;
                }
                return this._concatChunks(chunks, totalLength);
            });
        }
        static compressBuffer(buffer_1) {
            return __awaiter(this, arguments, void 0, function* (buffer, format = 'gzip') {
                const compressedStream = new CompressionStream(format);
                const writer = compressedStream.writable.getWriter();
                writer.write(new Uint8Array(buffer));
                writer.close();
                const reader = compressedStream.readable.getReader();
                return this._getResult(reader);
            });
        }
        static decompressBuffer(buffer_1) {
            return __awaiter(this, arguments, void 0, function* (buffer, format = 'gzip') {
                const decompressedStream = new DecompressionStream(format);
                const reader = decompressedStream.readable.getReader();
                const writer = decompressedStream.writable.getWriter();
                // Write the compressed buffer to the writer
                writer.write(new Uint8Array(buffer));
                writer.close();
                return this._getResult(reader);
            });
        }
    }
    exports.default = Compressor;
});
define("src/Core/AbsHeightMapFileIO", ["require", "exports", "src/Extras/Compressor"], function (require, exports, Compressor_mjs_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AbsHeightMapFileIO = exports.heightMapFileCompressedFormat = exports.factorSize = exports.heightMapVersion = void 0;
    Compressor_mjs_1 = __importDefault(Compressor_mjs_1);
    exports.heightMapVersion = 99;
    exports.factorSize = 3;
    exports.heightMapFileCompressedFormat = 'gzip';
    class AbsHeightMapFileIO {
        __readHeightFactor(view, headerSize, width, x, z) {
            const index = z * width + x;
            const r = view.getUint8(headerSize + index * exports.factorSize + 0);
            const g = view.getUint8(headerSize + index * exports.factorSize + 1);
            const b = view.getUint8(headerSize + index * exports.factorSize + 2);
            const scaled = (r << 16) | (g << 8) | b;
            const factor = scaled / 0xffffff;
            return factor;
        }
        __writeHeightFactor(view, headerSize, heightMap, x, z) {
            const index = z * heightMap.width + x;
            const factor = heightMap.getFactor(x, z);
            const scaled = Math.floor(factor * 0xffffff);
            const r = (scaled >> 16) & 0xff;
            const g = (scaled >> 8) & 0xff;
            const b = (scaled & 0xff);
            view.setUint8(headerSize + index * exports.factorSize + 0, r);
            view.setUint8(headerSize + index * exports.factorSize + 1, g);
            view.setUint8(headerSize + index * exports.factorSize + 2, b);
        }
        __importFromFile(heightMap, buffer, options) {
            return __awaiter(this, void 0, void 0, function* () {
                // TODO:
                // header version 99
                // headerByteSize, version, width, depth, maxHeight
                const nBuffer = yield Compressor_mjs_1.default.decompressBuffer(buffer, exports.heightMapFileCompressedFormat);
                const view = new DataView(nBuffer);
                const version = view.getUint32(1, true);
                if (version !== exports.heightMapVersion) {
                    console.warn('Height map version: %f no support.', version);
                    return null;
                }
                const headerSize = view.getUint8(0);
                const width = view.getUint32(5, true);
                const depth = view.getUint32(9, true);
                const maxHeight = view.getFloat32(13, true);
                const finalMaxHeight = (options === null || options === void 0 ? void 0 : options.adaptiveMaxHeight) ? heightMap.maxHeight : maxHeight;
                if ((heightMap.width !== width || heightMap.depth !== depth) && (options === null || options === void 0 ? void 0 : options.adaptiveWidthAndDepth)) {
                    // TODO: its work for x^n + 1, z^n + 1
                    const factorX = (width - 1) / (heightMap.width - 1);
                    const factorZ = (depth - 1) / (heightMap.depth - 1);
                    for (let z = 0; z < depth; z += factorZ) {
                        for (let x = 0; x < width; x += factorX) {
                            // TODO: smooth for heightMap more import data
                            const factor = this.__readHeightFactor(view, headerSize, width, x | 0, z | 0);
                            const height = factor * finalMaxHeight;
                            heightMap.set(x / factorX, z / factorZ, height);
                        }
                    }
                }
                else {
                    for (let z = 0; (z < depth) && (z < heightMap.depth); z++) {
                        for (let x = 0; (x < width) && (x < heightMap.width); x++) {
                            const factor = this.__readHeightFactor(view, headerSize, width, x, z);
                            const height = factor * finalMaxHeight;
                            heightMap.set(x, z, height);
                        }
                    }
                }
                return {
                    width,
                    depth,
                    maxHeight
                };
            });
        }
        __exportToBuffer(heightMap) {
            return __awaiter(this, void 0, void 0, function* () {
                // TODO:
                // header version 99
                // headerByteSize, version, width, depth, maxHeight
                const headerSize = 1 + 4 + 4 + 4 + 4;
                const buffer = new ArrayBuffer(headerSize + exports.factorSize * heightMap.width * heightMap.depth);
                const view = new DataView(buffer);
                view.setUint8(0, headerSize);
                view.setUint32(1, exports.heightMapVersion, true);
                view.setUint32(5, heightMap.width, true);
                view.setUint32(9, heightMap.depth, true);
                view.setFloat32(13, heightMap.maxHeight, true);
                for (let z = 0; z < heightMap.depth; z++) {
                    for (let x = 0; x < heightMap.width; x++) {
                        this.__writeHeightFactor(view, headerSize, heightMap, x, z);
                    }
                }
                return Compressor_mjs_1.default.compressBuffer(buffer, exports.heightMapFileCompressedFormat);
            });
        }
    }
    exports.AbsHeightMapFileIO = AbsHeightMapFileIO;
    exports.default = AbsHeightMapFileIO;
});
define("src/Core/AbsHeightMap", ["require", "exports", "src/Core/AbsHeightMapFileIO"], function (require, exports, AbsHeightMapFileIO_mjs_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AbsHeightMap = void 0;
    AbsHeightMapFileIO_mjs_1 = __importDefault(AbsHeightMapFileIO_mjs_1);
    class AbsHeightMap extends AbsHeightMapFileIO_mjs_1.default {
        constructor() {
            super(...arguments);
            this.minX = 0;
            this.minZ = 0;
        }
        get maxX() { return this.width; }
        get maxZ() { return this.depth; }
        getHeightInterpolated(x, z) {
            const intX = x | 0;
            const intZ = z | 0;
            const x0z0 = this.get(intX, intZ);
            if ((intX + 1 >= this.width) ||
                (intZ + 1 >= this.depth)) {
                return x0z0;
            }
            const x1z0 = this.get(intX + 1, intZ);
            const x0z1 = this.get(intX, intZ + 1);
            const x1z1 = this.get(intX + 1, intZ + 1);
            const factorX = x - intX;
            const interpolatedBottom = (x1z0 - x0z0) * factorX + x0z0;
            const interpolatedTop = (x1z1 - x0z1) * factorX + x0z1;
            const factorZ = z - intZ;
            const finalHeight = (interpolatedTop - interpolatedBottom) * factorZ + interpolatedBottom;
            return finalHeight;
        }
        substract(x, z, value) {
            return this.append(x, z, -value);
        }
        divide(x, z, value, heightIfZero = 0) {
            return this.multiply(x, z, 1 / value, heightIfZero);
        }
        fromFile(buffer, options) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield this.__importFromFile(this, buffer, options);
            });
        }
        toFile() {
            return __awaiter(this, void 0, void 0, function* () {
                const buffer = yield this.__exportToBuffer(this);
                return new Blob([buffer], { type: "application/octet-stream" });
            });
        }
        toBuffer(buffer) {
            const width = this.width;
            for (let z = 0; z < this.depth; z++) {
                for (let x = 0; x < this.width; x++) {
                    const f = this.getFactor(x, z);
                    const v = f * 255;
                    const pos = (x + z * width) * 4;
                    buffer[pos + 0] = v;
                    buffer[pos + 1] = v;
                    buffer[pos + 2] = v;
                    buffer[pos + 3] = 255;
                }
            }
        }
        toCanvas() {
            const canvas = document.createElement('canvas');
            const width = this.width;
            const height = this.depth;
            canvas.width = width;
            canvas.height = height;
            const ctx = canvas.getContext('2d');
            if (!ctx) {
                throw new Error('Failed create canvas 2d context');
            }
            const imageData = ctx.getImageData(0, 0, width, height);
            const buffer = imageData.data;
            this.toBuffer(buffer);
            ctx.putImageData(imageData, 0, 0);
            return canvas;
        }
        /**
         * Save height map to image of base64
         */
        toImage(type, quality) {
            const canvas = this.toCanvas();
            return canvas.toDataURL(type, quality);
        }
        /**
         * Load height map from image
         * @param img
         */
        fromImage(img) {
            const bufferWidth = img.width;
            const bufferHeight = img.height;
            if (bufferWidth % 2 !== 0 || bufferHeight % 2 !== 0) {
                throw new Error("Map sizes not divisible by 2 are not supported");
            }
            const canvas = document.createElement("canvas");
            const context = canvas.getContext("2d");
            canvas.width = bufferWidth;
            canvas.height = bufferHeight;
            context.drawImage(img, 0, 0);
            const imageData = context.getImageData(0, 0, bufferWidth, bufferHeight);
            const imageBuffer = imageData.data;
            const maxSegmentX = this.width - 1;
            const maxSegmentZ = this.depth - 1;
            const factorX = bufferWidth / maxSegmentX;
            const factorZ = bufferHeight / maxSegmentZ;
            for (let z = 0; z < this.depth; z++) {
                for (let x = 0; x < this.width; x++) {
                    let normalizeX = x === maxSegmentX ? x - 1 : x;
                    let normalizeZ = z === maxSegmentZ ? z - 1 : z;
                    const heightMapX = (normalizeX * factorX) | 0;
                    const heightMapZ = (normalizeZ * factorZ) | 0;
                    const pos = (heightMapX + heightMapZ * bufferWidth) * 4;
                    const r = imageBuffer[pos];
                    const g = imageBuffer[pos + 1];
                    const b = imageBuffer[pos + 2];
                    const a = imageBuffer[pos + 3];
                    const coeff = (r + g + b) / 3 / a;
                    const height = coeff * this.maxHeight;
                    this.set(x, z, height);
                }
            }
        }
        smoothZone(zone, np, radius) {
            if (zone.maxX < 0)
                return;
            if (zone.maxZ < 0)
                return;
            if (np < 0 || np > 1)
                return;
            if (radius < 0)
                return;
            const minX = Math.max(zone.minX, 0);
            const minZ = Math.max(zone.minZ, 0);
            const maxX = Math.min(zone.maxX, this.width);
            const maxZ = Math.min(zone.maxZ, this.depth);
            const cp = 1 - np;
            for (let x = minX; x < maxX; x++) {
                for (let z = minZ; z < maxZ; z++) {
                    const prevHeight = this.get(x, z);
                    let updtHeight;
                    let neighNumber = 0;
                    let neighAverage = 0;
                    for (let rx = -radius; rx <= radius; rx++) {
                        for (let rz = -radius; rz <= radius; rz++) {
                            const innerX = (x + rx);
                            const innerZ = (z + rz);
                            if (innerX < 0 || innerX >= this.width)
                                continue;
                            if (innerZ < 0 || innerZ >= this.depth)
                                continue;
                            const height = (innerX === x && innerZ === z)
                                ? prevHeight
                                : this.get(innerX, innerZ);
                            neighNumber++;
                            neighAverage += height;
                        }
                    }
                    neighAverage /= neighNumber;
                    updtHeight = neighAverage * np + prevHeight * cp;
                    this.set(x, z, updtHeight);
                }
            }
        }
        smooth(np, radius) {
            this.smoothZone(this, np, radius);
        }
        normalize(maxHeight) {
            for (let z = 0; z < this.depth; z++) {
                for (let x = 0; x < this.width; x++) {
                    const currentHeight = this.get(x, z);
                    const normalizeHeight = (currentHeight / this.maxHeight) * maxHeight;
                    this.set(x, z, normalizeHeight);
                }
            }
        }
        combineHeights(type, heightMap, value, zone, heightIfZero = 0, minHeight = null, maxHeight = null) {
            if (zone.maxX < 0)
                return;
            if (zone.maxZ < 0)
                return;
            const lenX = zone.maxX - zone.minX;
            const lenZ = zone.maxZ - zone.minZ;
            if (lenX < 1 || lenZ < 1 || value === 0) {
                return;
            }
            const fixedMinX = Math.max(zone.minX, 0);
            const fixedMinZ = Math.max(zone.minZ, 0);
            const fixedMaxX = Math.min(zone.maxX, this.width);
            const fixedMaxZ = Math.min(zone.maxZ, this.depth);
            const coeffFactorX = (heightMap.width - 1) / lenX;
            const coeffFactorZ = (heightMap.depth - 1) / lenZ;
            for (let z = fixedMinZ; z < fixedMaxZ; z++) {
                for (let x = fixedMinX; x < fixedMaxX; x++) {
                    const x2 = (coeffFactorX * (x - zone.minX)) | 0;
                    const z2 = (coeffFactorZ * (z - zone.minZ)) | 0;
                    const height = heightMap.get(x2, z2);
                    const smoothAppendValue = height * value;
                    const oldHeight = this.get(x, z) || heightIfZero;
                    let candidate = type === '+' ? oldHeight + smoothAppendValue :
                        type === '-' ? oldHeight - smoothAppendValue :
                            type === '*' ? oldHeight * smoothAppendValue :
                                type === '/' ? oldHeight / smoothAppendValue :
                                    oldHeight;
                    if (minHeight !== null && candidate < minHeight) {
                        candidate = minHeight;
                    }
                    if (maxHeight !== null && candidate > maxHeight) {
                        candidate = maxHeight;
                    }
                    this.set(x, z, candidate);
                }
            }
        }
    }
    exports.AbsHeightMap = AbsHeightMap;
    exports.default = AbsHeightMap;
});
define("src/Core/HeightMap", ["require", "exports", "src/Core/AbsHeightMap"], function (require, exports, AbsHeightMap_mjs_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HeightMap = exports.defaultHeightVertexSize = exports.HeightMapArrType = void 0;
    AbsHeightMap_mjs_1 = __importDefault(AbsHeightMap_mjs_1);
    exports.HeightMapArrType = Float32Array;
    exports.defaultHeightVertexSize = 1;
    class HeightMap extends AbsHeightMap_mjs_1.default {
        get size() { return this._width * this._depth; }
        get width() { return this._width; }
        get depth() { return this._depth; }
        get data() { return this._data; }
        get format() { return 'rgba'; }
        get itemSize() { return this._itemSize; }
        get itemHeightIndexOffset() { return this._itemHeightIndexOffset; }
        get maxHeight() { return this._maxHeight; }
        constructor(width, depth, maxHeight, buffer, itemSize = exports.defaultHeightVertexSize, itemHeightIndexOffset = 0) {
            super();
            this._width = 0;
            this._depth = 0;
            this._maxHeight = 0;
            this._init(width, depth, maxHeight, buffer, itemSize, itemHeightIndexOffset);
        }
        _init(width, depth, maxHeight, buffer, itemSize = exports.defaultHeightVertexSize, itemHeightIndexOffset = 0) {
            this._width = width;
            this._depth = depth;
            this._maxHeight = maxHeight;
            if (buffer) {
                if (itemSize < itemHeightIndexOffset) {
                    throw new Error("ItemSize can't less or eq ItemHeightIndexOffset");
                }
                if (buffer.length < (width * depth) * itemSize) {
                    throw new Error("Buffer has invalid length");
                }
                this._data = buffer;
                this._itemSize = itemSize;
                this._itemHeightIndexOffset = itemHeightIndexOffset;
            }
            else {
                // TODO: type checker
                this._data = new exports.HeightMapArrType(width * depth * exports.defaultHeightVertexSize);
                this._itemSize = exports.defaultHeightVertexSize;
                this._itemHeightIndexOffset = 0;
            }
        }
        _encodeHeightFactor(store, index, value) {
            store[index] = value;
        }
        _decodeHeightFactor(store, index) {
            return store[index];
        }
        _decodeHeight(store, index, max) {
            return this._decodeHeightFactor(store, index) * max;
        }
        _encodeAndSetHeightFactor(store, index, realHeight, max) {
            const normalize = Math.max(Math.min(realHeight, max), 0);
            const factor = normalize / max;
            this._encodeHeightFactor(store, index, factor);
            return this._decodeHeightFactor(store, index);
        }
        getIndex(x, z) {
            return (z * this._width + x) * this._itemSize + this._itemHeightIndexOffset;
        }
        getFactor(x, z) {
            const index = this.getIndex(x, z);
            return this._decodeHeightFactor(this._data, index);
        }
        get(x, z) {
            const index = this.getIndex(x, z);
            return this._decodeHeight(this._data, index, this._maxHeight);
        }
        set(x, z, value) {
            const index = this.getIndex(x, z);
            return this._encodeAndSetHeightFactor(this._data, index, value, this._maxHeight);
        }
        setMaxHeight(maxHeight) {
            this._maxHeight = maxHeight;
        }
        append(x, z, value) {
            const index = this.getIndex(x, z);
            const oldValue = this._decodeHeight(this._data, index, this._maxHeight);
            const canValue = oldValue + value;
            return this._encodeAndSetHeightFactor(this._data, index, canValue, this._maxHeight);
        }
        multiply(x, z, value, heightIfZero = 0) {
            const index = this.getIndex(x, z);
            const oldValue = this._decodeHeight(this._data, index, this._maxHeight) || heightIfZero;
            const canValue = oldValue * value;
            return this._encodeAndSetHeightFactor(this._data, index, canValue, this._maxHeight);
        }
    }
    exports.HeightMap = HeightMap;
    exports.default = HeightMap;
});
define("src/Core/AbsShatteredHeightMap", ["require", "exports", "src/Core/HeightMap"], function (require, exports, HeightMap_mjs_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AbsShatteredHeightMap = exports.minMaxGlobalSize = exports.minMaxStackSize = void 0;
    HeightMap_mjs_1 = __importStar(HeightMap_mjs_1);
    exports.minMaxStackSize = 2;
    exports.minMaxGlobalSize = 2 * exports.minMaxStackSize;
    class AbsShatteredHeightMap extends HeightMap_mjs_1.default {
        get patchSize() { return this._patchSize; }
        get numPatchesX() { return this._numPatchesX; }
        get numPatchesZ() { return this._numPatchesZ; }
        constructor(width, depth, patchSize, maxHeight, buffer, itemSize = HeightMap_mjs_1.defaultHeightVertexSize, itemHeightIndexOffset = 0) {
            super(width, depth, maxHeight, buffer /** TS huck */, itemSize, itemHeightIndexOffset);
            this._setPatchSize(patchSize);
            this._clearMinMaxHeightCoords();
        }
        _setPatchSize(patchSize) {
            this._patchSize = patchSize;
            this._numPatchesX = ((this.width - 1) / (this._patchSize - 1)) | 0;
            this._numPatchesZ = ((this.depth - 1) / (this._patchSize - 1)) | 0;
            this._patchesSegmentSize = this._numPatchesX * this._numPatchesZ * exports.minMaxStackSize;
            this._minMaxHeightCoords = new Array(exports.minMaxGlobalSize + this._patchesSegmentSize * 2);
        }
        _clearMinMaxHeightCoords() {
            this._minMaxHeightCoords.fill(0);
        }
        getEntriesPatchMin(x, z) {
            const patchX = x / this._patchSize | 0;
            const patchZ = z / this._patchSize | 0;
            return this.getPatchMin(patchX, patchZ);
        }
        getEntriesPatchMax(x, z) {
            const patchX = x / this._patchSize | 0;
            const patchZ = z / this._patchSize | 0;
            return this.getPatchMax(patchX, patchZ);
        }
        getEntriesPatchMinFactor(x, z) {
            const patchX = x / this._patchSize | 0;
            const patchZ = z / this._patchSize | 0;
            return this.getPatchMinFactor(patchX, patchZ);
        }
        getEntriesPatchMaxFactor(x, z) {
            const patchX = x / this._patchSize | 0;
            const patchZ = z / this._patchSize | 0;
            return this.getPatchMaxFactor(patchX, patchZ);
        }
        getMin() {
            return this.get(this._minMaxHeightCoords[0], this._minMaxHeightCoords[1]);
        }
        getMax() {
            return this.get(this._minMaxHeightCoords[2], this._minMaxHeightCoords[3]);
        }
        getMinFactor() {
            return this.getFactor(this._minMaxHeightCoords[0], this._minMaxHeightCoords[1]);
        }
        getMaxFactor() {
            return this.getFactor(this._minMaxHeightCoords[2], this._minMaxHeightCoords[3]);
        }
        getPatchMin(patchBaseX, patchBaseZ) {
            const index = exports.minMaxGlobalSize + (patchBaseZ * this._numPatchesX + patchBaseX) * exports.minMaxStackSize;
            return this.get(this._minMaxHeightCoords[index], this._minMaxHeightCoords[index + 1]);
        }
        getPatchMax(patchBaseX, patchBaseZ) {
            const index = exports.minMaxGlobalSize + (patchBaseZ * this._numPatchesX + patchBaseX) * exports.minMaxStackSize + this._patchesSegmentSize;
            return this.get(this._minMaxHeightCoords[index], this._minMaxHeightCoords[index + 1]);
        }
        getPatchMinFactor(patchBaseX, patchBaseZ) {
            const index = exports.minMaxGlobalSize + (patchBaseZ * this._numPatchesX + patchBaseX) * exports.minMaxStackSize;
            return this.getFactor(this._minMaxHeightCoords[index], this._minMaxHeightCoords[index + 1]);
        }
        getPatchMaxFactor(patchBaseX, patchBaseZ) {
            const index = exports.minMaxGlobalSize + (patchBaseZ * this._numPatchesX + patchBaseX) * exports.minMaxStackSize + this._patchesSegmentSize;
            return this.getFactor(this._minMaxHeightCoords[index], this._minMaxHeightCoords[index + 1]);
        }
        recalculateAABB() {
            this._minMaxHeightCoords[0] = 0;
            this._minMaxHeightCoords[1] = 0;
            this._minMaxHeightCoords[2] = 0;
            this._minMaxHeightCoords[3] = 0;
            let minFactor = Number.MAX_SAFE_INTEGER;
            let maxFactor = Number.MIN_SAFE_INTEGER;
            for (let patchZ = 0; patchZ < this._numPatchesZ; patchZ++) {
                for (let patchX = 0; patchX < this._numPatchesX; patchX++) {
                    const minIndex = exports.minMaxGlobalSize + (patchZ * this._numPatchesX + patchX) * exports.minMaxStackSize;
                    const maxIndex = minIndex + this._patchesSegmentSize;
                    const patchMinFactor = this.getFactor(this._minMaxHeightCoords[minIndex], this._minMaxHeightCoords[minIndex + 1]);
                    const patchMaxfactor = this.getFactor(this._minMaxHeightCoords[maxIndex], this._minMaxHeightCoords[maxIndex + 1]);
                    if (minFactor > patchMinFactor) {
                        minFactor = patchMinFactor;
                        this._minMaxHeightCoords[0] = this._minMaxHeightCoords[minIndex];
                        this._minMaxHeightCoords[1] = this._minMaxHeightCoords[minIndex + 1];
                    }
                    if (maxFactor < patchMaxfactor) {
                        maxFactor = patchMaxfactor;
                        this._minMaxHeightCoords[2] = this._minMaxHeightCoords[maxIndex];
                        this._minMaxHeightCoords[3] = this._minMaxHeightCoords[maxIndex + 1];
                    }
                }
            }
        }
        recalculateMinMax(zone) {
            if (zone.maxX < 0)
                return;
            if (zone.maxZ < 0)
                return;
            const fixedMinX = Math.max(zone.minX, 0);
            const fixedMinZ = Math.max(zone.minZ, 0);
            const fixedMaxX = Math.min(zone.maxX, this.width);
            const fixedMaxZ = Math.min(zone.maxZ, this.depth);
            let globalMinF = Number.MAX_SAFE_INTEGER;
            let globalMaxF = Number.MIN_SAFE_INTEGER;
            let globalMinX = 0;
            let globalMinZ = 0;
            let globalMaxX = 0;
            let globalMaxZ = 0;
            for (let z = fixedMinZ; z < fixedMaxZ; z += this._patchSize) {
                for (let x = fixedMinX; x < fixedMaxX; x += this._patchSize) {
                    const patchX = x / this._patchSize | 0;
                    const patchZ = z / this._patchSize | 0;
                    const patchI = patchZ * this._numPatchesX + patchX;
                    const minIndex = exports.minMaxGlobalSize + patchI * exports.minMaxStackSize;
                    const maxIndex = minIndex + this._patchesSegmentSize;
                    const firstPatchX = patchX * this._patchSize;
                    const firstPatchZ = patchZ * this._patchSize;
                    const lastPatchX = firstPatchX + this._patchSize;
                    const lastPatchZ = firstPatchZ + this._patchSize;
                    let minF = Number.MAX_SAFE_INTEGER;
                    let maxF = Number.MIN_SAFE_INTEGER;
                    let minX = firstPatchX;
                    let minZ = firstPatchZ;
                    let maxX = firstPatchX;
                    let maxZ = firstPatchZ;
                    for (let innerZ = firstPatchZ + 1; innerZ < lastPatchZ; innerZ++) {
                        for (let innerX = firstPatchX + 1; innerX < lastPatchX; innerX++) {
                            const factor = this.getFactor(innerX, innerZ);
                            if (minF > factor) {
                                minF = factor;
                                minX = innerX;
                                minZ = innerZ;
                            }
                            if (maxF < factor) {
                                maxF = factor;
                                maxX = innerX;
                                maxZ = innerZ;
                            }
                        }
                    }
                    if (globalMinF > minF) {
                        globalMinF = minF;
                        globalMinX = minX;
                        globalMinZ = minZ;
                    }
                    if (globalMaxF < maxF) {
                        globalMaxF = maxF;
                        globalMaxX = maxX;
                        globalMaxZ = maxZ;
                    }
                    this._minMaxHeightCoords[minIndex] = minX;
                    this._minMaxHeightCoords[minIndex + 1] = minZ;
                    this._minMaxHeightCoords[maxIndex] = maxX;
                    this._minMaxHeightCoords[maxIndex + 1] = maxZ;
                }
            }
            if (this.getMinFactor() > globalMinF) {
                this._minMaxHeightCoords[0] = globalMinX;
                this._minMaxHeightCoords[1] = globalMinZ;
            }
            if (this.getMaxFactor() < globalMaxF) {
                this._minMaxHeightCoords[2] = globalMaxX;
                this._minMaxHeightCoords[3] = globalMaxZ;
            }
        }
    }
    exports.AbsShatteredHeightMap = AbsShatteredHeightMap;
});
define("src/Core/AbsChunkedHeightMap", ["require", "exports", "src/Core/HeightMap", "src/Core/AbsShatteredHeightMap"], function (require, exports, HeightMap_mjs_2, AbsShatteredHeightMap_mjs_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AbsChunkedHeightMap = exports.minMaxStackSize = void 0;
    exports.getOrThrowDataChunkSize = getOrThrowDataChunkSize;
    exports.minMaxStackSize = 2;
    function getOrThrowDataChunkSize(patchSize, dataChunkSize) {
        if ((dataChunkSize - 1) % (patchSize - 1) !== 0) {
            const recommendedWidth = ((dataChunkSize - 1 + patchSize - 1) / (dataChunkSize - 1)) * (patchSize - 1) + 1;
            console.error("DataChunkSize minus 1 (%d) must be divisible by patchSize minus 1 (%d)\n", dataChunkSize, patchSize);
            console.error("Try using DataChunkSize = %d\n", recommendedWidth);
            throw new Error();
        }
        return dataChunkSize;
    }
    class AbsChunkedHeightMap extends AbsShatteredHeightMap_mjs_1.AbsShatteredHeightMap {
        get dataChunkSize() { return this._dataChunkSize; }
        get dataNumChunksX() { return this._dataNumChunksX; }
        get dataNumChunksZ() { return this._dataNumChunksZ; }
        get dataChunkSizeFactor() { return this._dataChunkSizeFactor; }
        constructor(width, depth, patchSize, dataChunkSize, maxHeight, buffer, itemSize = HeightMap_mjs_2.defaultHeightVertexSize, itemHeightIndexOffset = 0) {
            super(width, depth, patchSize, maxHeight, buffer /** TS huck */, itemSize, itemHeightIndexOffset);
            this._setDataChunkSize(dataChunkSize);
        }
        _setDataChunkSize(value) {
            this._dataChunkSize = getOrThrowDataChunkSize(this._patchSize, value);
            this._dataNumChunksX = ((this.width - 1) / (this._dataChunkSize - 1)) | 0;
            this._dataNumChunksZ = ((this.depth - 1) / (this._dataChunkSize - 1)) | 0;
            this._dataChunkSizeFactor = this._patchSize === this._dataChunkSize
                ? 1.0
                : this._patchSize / (this._dataChunkSize + this._patchSize - (this._dataChunkSize % this._patchSize));
        }
        getIndex(x, z) {
            const localX = x % this._dataChunkSize;
            const localZ = z % this._dataChunkSize;
            const chunkX = x / this._dataChunkSize | 0;
            const chunkZ = z / this._dataChunkSize | 0;
            const chunkOffset = (chunkZ * this._dataNumChunksX + chunkX) * (Math.pow(this._dataChunkSize, 2));
            const localIndex = (localZ * this._dataChunkSize + localX);
            return chunkOffset + localIndex;
        }
        getChunkIndex(chunkX, chunkZ) {
            return chunkZ * this._dataNumChunksX + chunkX;
        }
        getChunkBuffer(type, chunkX, chunkZ) {
            const size = Math.pow(this.dataChunkSize, 2);
            const chunkLevel = chunkZ * this.dataNumChunksX + chunkX;
            const chunkOffset = chunkLevel * size * this.data.BYTES_PER_ELEMENT;
            const count = size * (this.data.BYTES_PER_ELEMENT / type.BYTES_PER_ELEMENT);
            return new type(this.data.buffer, this.data.byteOffset + chunkOffset, count);
        }
        getChunksBuffers(type) {
            const result = new Array(this._dataNumChunksX * this._dataNumChunksZ);
            for (let chunkZ = 0; chunkZ < this._dataNumChunksZ; chunkZ++) {
                for (let chunkX = 0; chunkX < this._dataNumChunksX; chunkX++) {
                    const index = chunkZ * this._dataNumChunksX + chunkX;
                    result[index] = this.getChunkBuffer(type, chunkX, chunkZ);
                }
            }
            return result;
        }
    }
    exports.AbsChunkedHeightMap = AbsChunkedHeightMap;
    exports.default = AbsChunkedHeightMap;
});
define("src/Core/CompressedPatchedHeightMap", ["require", "exports", "src/Core/AbsChunkedHeightMap", "src/Core/HeightMap"], function (require, exports, AbsChunkedHeightMap_mjs_1, HeightMap_mjs_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CompressedPatchedHeightMap = void 0;
    AbsChunkedHeightMap_mjs_1 = __importStar(AbsChunkedHeightMap_mjs_1);
    class CompressedPatchedHeightMap extends AbsChunkedHeightMap_mjs_1.default {
        get compressAlgoritm() { return this._compressAlgoritm; }
        static createBuffer(width, depth, chunkSize, algoritm) {
            const numChunksX = ((width - 1) / (chunkSize - 1)) | 0;
            const numChunksZ = ((depth - 1) / (chunkSize - 1)) | 0;
            const chunkArrSize = Math.pow(chunkSize, 2);
            const chunkCount = numChunksX * numChunksZ;
            const patchXBatchingCount = algoritm === "x4" ? 4 : 2;
            if (numChunksX < patchXBatchingCount) {
                console.error("The chunkSize (%d) should be at least (%d) times smaller than the width (%d)\n", chunkSize, patchXBatchingCount, width);
                throw new Error();
            }
            return (algoritm === "x2"
                ? new Uint16Array(chunkArrSize * chunkCount)
                : new Uint8Array(chunkArrSize * chunkCount));
        }
        constructor(width, depth, patchSize, dataChunkSize, maxHeight, algoritm, buffer, itemSize = HeightMap_mjs_3.defaultHeightVertexSize, itemHeightIndexOffset = 0) {
            const validDataChunkSize = (0, AbsChunkedHeightMap_mjs_1.getOrThrowDataChunkSize)(patchSize, dataChunkSize);
            const tmpBuffer = buffer !== null && buffer !== void 0 ? buffer : CompressedPatchedHeightMap.createBuffer(width, depth, validDataChunkSize, algoritm);
            super(width, depth, patchSize, dataChunkSize, maxHeight, tmpBuffer, itemSize, itemHeightIndexOffset);
            this._compressAlgoritm = algoritm;
            this._patchXBatchSize = algoritm === "x4" ? 4 : 2;
            this._maxSafeFactor = algoritm === "x4" ? 0xff : 0xffff;
        }
        getChunkIndex(chunkX, chunkZ) {
            return (chunkZ * this.dataNumChunksX + chunkX) / this._patchXBatchSize | 0;
        }
        getChunkBuffer(type, chunkX, chunkZ) {
            const size = Math.pow(this.dataChunkSize, 2);
            const chunkLevel = (chunkZ * this.dataNumChunksX + chunkX) / this._patchXBatchSize | 0;
            const chunkOffset = chunkLevel * size * this.data.BYTES_PER_ELEMENT * this._patchXBatchSize;
            const count = size * this._patchXBatchSize * (this.data.BYTES_PER_ELEMENT / type.BYTES_PER_ELEMENT);
            return new type(this.data.buffer, this.data.byteOffset + chunkOffset, count);
        }
        getChunksBuffers(type) {
            const result = new Array((this.dataNumChunksX / this._patchXBatchSize) * this.dataNumChunksZ);
            for (let chunkZ = 0; chunkZ < this.dataNumChunksZ; chunkZ++) {
                for (let chunkX = 0; chunkX < this.dataNumChunksX; chunkX += this._patchXBatchSize) {
                    const index = (chunkZ * this.dataNumChunksX + chunkX) / this._patchXBatchSize | 0;
                    result[index] = this.getChunkBuffer(type, chunkX, chunkZ);
                }
            }
            return result;
        }
        _encodeHeightFactor(store, index, value) {
            store[index] = Math.min(value * this._maxSafeFactor, this._maxSafeFactor);
        }
        _decodeHeightFactor(store, index) {
            return store[index] / this._maxSafeFactor;
        }
        getIndex(x, z) {
            const localX = x % this.dataChunkSize;
            const localZ = z % this.dataChunkSize;
            const chunkX = x / this.dataChunkSize | 0;
            const chunkZ = z / this.dataChunkSize | 0;
            const chunkLevel = (chunkZ * this.dataNumChunksX + chunkX) / this._patchXBatchSize | 0;
            const chunkOffset = chunkLevel * (Math.pow(this.dataChunkSize, 2));
            const localIndex = localZ * this.dataChunkSize + localX;
            const numCompress = chunkX % this._patchXBatchSize; // compress by x axis
            return (chunkOffset + localIndex) * this._patchXBatchSize + numCompress;
        }
    }
    exports.CompressedPatchedHeightMap = CompressedPatchedHeightMap;
    exports.default = CompressedPatchedHeightMap;
});
define("src/AmmoIntegration/AmmoIntegration", ["require", "exports", "src/Core/AbsChunkedHeightMap"], function (require, exports, AbsChunkedHeightMap_mjs_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getBuffer = getBuffer;
    function getBuffer(width, depth, patchSize, dataChunkSize, compressAlgoritm) {
        if (typeof Ammo === 'undefined') {
            console.error("Ammo not exists");
            throw new Error();
        }
        const chunkSize = (0, AbsChunkedHeightMap_mjs_2.getOrThrowDataChunkSize)(patchSize, dataChunkSize);
        const numChunksX = ((width - 1) / (chunkSize - 1)) | 0;
        const numChunksZ = ((depth - 1) / (chunkSize - 1)) | 0;
        const chunkArrSize = Math.pow(chunkSize, 2);
        const chunkCount = numChunksX * numChunksZ;
        if (compressAlgoritm !== "none") {
            const patchXBatchingCount = compressAlgoritm === "x4" ? 4 : 2;
            if (numChunksX < patchXBatchingCount) {
                console.error("The chunkSize (%d) should be at least (%d) times smaller than the width (%d)\n", chunkSize, patchXBatchingCount, width);
                throw new Error();
            }
        }
        const bsz = compressAlgoritm === "x2" ? 2 :
            compressAlgoritm === "x4" ? 1 :
                4; // float32
        const len = chunkArrSize * chunkCount;
        const ptr = Ammo._malloc(bsz * len);
        switch (compressAlgoritm) {
            case "x4": return new Uint8Array(Ammo.HEAPU8.buffer, ptr, len);
            case "x2": return new Uint16Array(Ammo.HEAPU16.buffer, ptr, len);
            default: return new Float32Array(Ammo.HEAPF32.buffer, ptr, len);
        }
    }
});
define("src/Core/CoordsBuffer", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CoordsBuffer = exports.coordsVertexSize = void 0;
    exports.coordsVertexSize = 2;
    class CoordsBuffer {
        get patchVertexBufferLength() { return this._length; }
        get patchVertexBufferData() { return this._data; }
        get patchVertexBufferTyped() { return this._dataTyped; }
        get width() { return this._width; }
        get depth() { return this._depth; }
        get patchSize() { return this._patchSize; }
        constructor(heightMap, patchSize) {
            this.heightMap = heightMap;
            this._patchSize = patchSize;
            this._width = heightMap.width;
            this._depth = heightMap.depth;
            this._length = this._patchSize * this._patchSize;
            const coordsArrLength = this._length * exports.coordsVertexSize;
            const coordsByteLength = coordsArrLength * Uint16Array.BYTES_PER_ELEMENT;
            this._data = new ArrayBuffer(coordsByteLength);
            this._dataTyped = new Uint16Array(this._data, 0, coordsArrLength);
        }
        init() {
            let index = 0;
            for (let z = 0; z < this._patchSize; z++) {
                for (let x = 0; x < this._patchSize; x++) {
                    this._dataTyped[index++] = x;
                    this._dataTyped[index++] = z;
                }
            }
        }
        getPosition(index, buf) {
            const x = index % this._width | 0;
            const z = index / this._width | 0;
            buf.x = x;
            buf.y = this.heightMap.get(x, z);
            buf.z = z;
            return true;
        }
        getPositionWithHeightByFactor(index, buf) {
            const x = index % this._width | 0;
            const z = index / this._width | 0;
            buf.x = x;
            buf.y = this.heightMap.getFactor(x, z);
            buf.z = z;
            return true;
        }
        getCoords(index, buf) {
            const x = index % this._width | 0;
            const z = index / this._width | 0;
            buf.x = x;
            buf.z = z;
            return true;
        }
    }
    exports.CoordsBuffer = CoordsBuffer;
    exports.default = CoordsBuffer;
});
define("src/Core/LodInfo", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LodInfo = exports.BOTTOM = exports.TOP = exports.RIGHT = exports.LEFT = void 0;
    exports.initInfo = initInfo;
    exports.LEFT = 2;
    exports.RIGHT = 2;
    exports.TOP = 2;
    exports.BOTTOM = 2;
    function initInfo() {
        const arr = new Array(exports.LEFT);
        for (let l = 0; l < exports.LEFT; l++) {
            arr[l] = new Array(exports.RIGHT);
            for (let r = 0; r < exports.RIGHT; r++) {
                arr[l][r] = new Array(exports.TOP);
                for (let t = 0; t < exports.TOP; t++) {
                    arr[l][r][t] = new Array(exports.BOTTOM);
                    for (let b = 0; b < exports.BOTTOM; b++) {
                        arr[l][r][t][b] = {
                            start: 0,
                            count: 0
                        };
                    }
                }
            }
        }
        return arr;
    }
    class LodInfo {
        constructor() {
            this.info = initInfo();
        }
        clear() {
            for (let l = 0; l < exports.LEFT; l++) {
                for (let r = 0; r < exports.RIGHT; r++) {
                    for (let t = 0; t < exports.TOP; t++) {
                        for (let b = 0; b < exports.BOTTOM; b++) {
                            const single = this.info[l][r][t][b];
                            single.start = 0;
                            single.count = 0;
                        }
                    }
                }
            }
        }
    }
    exports.LodInfo = LodInfo;
    exports.default = LodInfo;
});
define("src/Core/IPatchLod", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("src/Core/LodEstimator", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getLodId = getLodId;
    exports.getLodInfoId = getLodInfoId;
    exports.decodeLodId = decodeLodId;
    function getLodId(c, l, r, t, b) {
        const lodCore = c + 1;
        const lodBinaryValue = (l << 3) | (r << 2) | (t << 1) | b;
        return lodCore * 16 - lodBinaryValue;
    }
    function getLodInfoId(lod) {
        return getLodId(lod.core, lod.left, lod.right, lod.top, lod.bottom);
    }
    function decodeLodId(id) {
        const cAdjusted = Math.floor(id / 16);
        const binaryPart = id % 16;
        const left = (binaryPart >> 3) & 1;
        const right = (binaryPart >> 2) & 1;
        const top = (binaryPart >> 1) & 1;
        const bottom = binaryPart & 1;
        const core = cAdjusted - 1;
        return { core, left, right, top, bottom };
    }
    class LodEstimator {
        get patchSize() { return this._patchSize; }
        get numPatchesX() { return this._numPatchesX; }
        get numPatchesZ() { return this._numPatchesZ; }
        get count() { return this._lodCount; }
        get max() { return this._lodCount - 1; }
        constructor(patchSize, numPatchesX, numPatchesZ) {
            this.setParams(patchSize, numPatchesX, numPatchesZ);
        }
        setParams(patchSize, numPatchesX, numPatchesZ) {
            this._patchSize = patchSize;
            this._numPatchesX = numPatchesX;
            this._numPatchesZ = numPatchesZ;
            this._calcMaxLOD();
        }
        _calcMaxLOD() {
            const numSegments = this._patchSize - 1;
            const numSegmentsLog2 = Math.log2(numSegments);
            const numSegmentsLog2Ceil = Math.ceil(numSegmentsLog2);
            const numSegmentsLog2Floor = Math.floor(numSegmentsLog2);
            if (numSegmentsLog2Ceil !== numSegmentsLog2Floor) {
                throw new Error("The number of vertices in the patch minus one must be a power of two\n");
            }
            this._lodCount = numSegmentsLog2Floor;
        }
    }
    exports.default = LodEstimator;
});
define("src/Core/GridBuilder", ["require", "exports", "src/Core/LodInfo", "src/Core/LodEstimator"], function (require, exports, LodInfo_mjs_1, LodEstimator_mjs_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GridBuilder = void 0;
    LodEstimator_mjs_1 = __importDefault(LodEstimator_mjs_1);
    class GridBuilder {
        get width() { return this._width; }
        get depth() { return this._depth; }
        get patchSize() { return this._patchSize; }
        get numPatchesX() { return this._numPatchesX; }
        get numPatchesZ() { return this._numPatchesZ; }
        get maxLOD() { return this.lodEstimator.max; }
        get lodCount() { return this.lodEstimator.count; }
        get patchIndices() { return this._indices; }
        get lodEstimator() { return this._lodEstimator; }
        get lodInfo() { return this._lodInfo; }
        constructor(grid) {
            this._width = grid.width;
            this._depth = grid.depth;
            this._patchSize = grid.patchSize;
            this._numPatchesX = ((this._width - 1) / (this._patchSize - 1)) | 0;
            this._numPatchesZ = ((this._depth - 1) / (this._patchSize - 1)) | 0;
            if (this._width >= 0xffff) {
                console.error("Max width = %d\n", 0xffff - 1);
                throw new Error();
            }
            if (this._depth >= 0xffff) {
                console.error("Max depth = %d\n", 0xffff - 1);
                throw new Error();
            }
            if ((this._width - 1) % (this._patchSize - 1) !== 0) {
                const recommendedWidth = ((this._width - 1 + this._patchSize - 1) / (this._patchSize - 1)) * (this._patchSize - 1) + 1;
                console.error("Width minus 1 (%d) must be divisible by patchSize minus 1 (%d)\n", this._width, this._patchSize);
                console.error("Try using Width = %d\n", recommendedWidth);
                throw new Error();
            }
            if ((this._depth - 1) % (this._patchSize - 1) !== 0) {
                const recommendedDepth = ((this._depth - 1 + this._patchSize - 1) / (this._patchSize - 1)) * (this._patchSize - 1) + 1;
                console.error("Depth minus 1 (%d) must be divisible by patchSize minus 1 (%d)\n", this._depth, this._patchSize);
                console.error("Try using Width = %d\n", recommendedDepth);
                throw new Error();
            }
            if (this._patchSize < 3) {
                console.error("The minimum patch size is 3 (%d)\n", this._patchSize);
                throw new Error();
            }
            if (this._patchSize % 2 === 0) {
                console.error("Patch size must be an odd number (%d)\n", this._patchSize);
                throw new Error();
            }
            this._buildLodsAndIndices();
        }
        _buildLodsAndIndices() {
            this._lodEstimator = new LodEstimator_mjs_1.default(this._patchSize, this._numPatchesX, this._numPatchesZ);
            this._lodInfo = new Array(this._lodEstimator.count);
            for (let i = 0; i < this._lodInfo.length; i++) {
                this._lodInfo[i] = new LodInfo_mjs_1.LodInfo();
            }
            let numIndices = this._calcNumIndices();
            this._indices = new Uint32Array(numIndices);
            numIndices = this._initIndices(this._indices);
            //console.log("Final number of indices %d\n", numIndices);
        }
        _calcNumIndices() {
            let numQuads = Math.pow((this.patchSize - 1), 2);
            let numIndices = 0;
            const maxPermutationsPerLevel = 16; // true/false for each of the four sides
            const indicesPerQuad = 6; // two triangles
            for (let lod = 0; lod < this.lodCount; lod++) {
                //console.log("LOD %d: num quads %d\n", lod, numQuads);
                numIndices += numQuads * indicesPerQuad * maxPermutationsPerLevel;
                numQuads /= 4;
            }
            //console.log("Initial number of indices %d\n", numIndices);
            return numIndices;
        }
        _initIndices(indices) {
            let index = 0;
            for (let lod = 0; lod < this.lodCount; lod++) {
                //console.log("*** Init indices lod %d ***\n", lod);
                index = this._initIndicesLOD(index, indices, lod);
            }
            return index;
        }
        _initIndicesLOD(index, indices, lod) {
            let totalIndicesForLOD = 0;
            for (let l = 0; l < LodInfo_mjs_1.LEFT; l++) {
                for (let r = 0; r < LodInfo_mjs_1.RIGHT; r++) {
                    for (let t = 0; t < LodInfo_mjs_1.TOP; t++) {
                        for (let b = 0; b < LodInfo_mjs_1.BOTTOM; b++) {
                            const info = this._lodInfo[lod].info[l][r][t][b];
                            const start = index;
                            index = this._initIndicesLODSingle(index, indices, lod, lod + l, lod + r, lod + t, lod + b);
                            info.start = start;
                            info.count = index - start;
                            totalIndicesForLOD += info.count;
                        }
                    }
                }
            }
            //console.log("Total indices for LOD: %d\n", totalIndicesForLOD);
            return index;
        }
        _initIndicesLODSingle(index, indices, lodCore, lodLeft, lodRight, lodTop, lodBottom) {
            const width = this.patchSize;
            const fanStep = Math.pow(2, lodCore + 1); // lod = 0 --> 2, lod = 1 --> 4, lod = 2 --> 8, etc
            const endPos = this.patchSize - 1 - fanStep; // patch size 5, fan step 2 --> EndPos = 2; patch size 9, fan step 2 --> EndPos = 6
            for (let z = 0; z <= endPos; z += fanStep) {
                for (let x = 0; x <= endPos; x += fanStep) {
                    const lLeft = x == 0 ? lodLeft : lodCore;
                    const lRight = x == endPos ? lodRight : lodCore;
                    const lBottom = z == 0 ? lodBottom : lodCore;
                    const lTop = z == endPos ? lodTop : lodCore;
                    index = this._createTriangleFan(index, indices, lodCore, lLeft, lRight, lTop, lBottom, x, z, width);
                }
            }
            return index;
        }
        _createTriangleFan(index, indices, lodCore, lodLeft, lodRight, lodTop, lodBottom, x, z, width) {
            const stepLeft = Math.pow(2, lodLeft); // because LOD starts at zero...
            const stepRight = Math.pow(2, lodRight);
            const stepTop = Math.pow(2, lodTop);
            const stepBottom = Math.pow(2, lodBottom);
            const stepCenter = Math.pow(2, lodCore);
            const indexCenter = (z + stepCenter) * width + x + stepCenter;
            // first up
            let indexTemp1 = z * width + x;
            let indexTemp2 = (z + stepLeft) * width + x;
            index = this._addTriangle(index, indices, indexCenter, indexTemp1, indexTemp2);
            // second up
            if (lodLeft == lodCore) {
                indexTemp1 = indexTemp2;
                indexTemp2 += stepLeft * width;
                index = this._addTriangle(index, indices, indexCenter, indexTemp1, indexTemp2);
            }
            // first right
            indexTemp1 = indexTemp2;
            indexTemp2 += stepTop;
            index = this._addTriangle(index, indices, indexCenter, indexTemp1, indexTemp2);
            // second right
            if (lodTop === lodCore) {
                indexTemp1 = indexTemp2;
                indexTemp2 += stepTop;
                index = this._addTriangle(index, indices, indexCenter, indexTemp1, indexTemp2);
            }
            // first down
            indexTemp1 = indexTemp2;
            indexTemp2 -= stepRight * width;
            index = this._addTriangle(index, indices, indexCenter, indexTemp1, indexTemp2);
            // second down
            if (lodRight === lodCore) {
                indexTemp1 = indexTemp2;
                indexTemp2 -= stepRight * width;
                index = this._addTriangle(index, indices, indexCenter, indexTemp1, indexTemp2);
            }
            // first left
            indexTemp1 = indexTemp2;
            indexTemp2 -= stepBottom;
            index = this._addTriangle(index, indices, indexCenter, indexTemp1, indexTemp2);
            // second left
            if (lodBottom === lodCore) {
                indexTemp1 = indexTemp2;
                indexTemp2 -= stepBottom;
                index = this._addTriangle(index, indices, indexCenter, indexTemp1, indexTemp2);
            }
            return index;
        }
        _addTriangle(index, indices, v1, v2, v3) {
            indices[index++] = v1;
            indices[index++] = v2;
            indices[index++] = v3;
            return index;
        }
    }
    exports.GridBuilder = GridBuilder;
    exports.default = GridBuilder;
});
define("src/Core/Heightfield", ["require", "exports", "src/Core/CoordsBuffer", "src/Core/GridBuilder"], function (require, exports, CoordsBuffer_mjs_1, GridBuilder_mjs_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    CoordsBuffer_mjs_1 = __importDefault(CoordsBuffer_mjs_1);
    GridBuilder_mjs_1 = __importDefault(GridBuilder_mjs_1);
    class Heightfield extends GridBuilder_mjs_1.default {
        get patchVertices() { return this._vertices; }
        get heightMap() { return this._heightMap; }
        get maxHeight() { return this.heightMap.maxHeight; }
        constructor(heightMap) {
            super(heightMap);
            this._heightMap = heightMap;
            this._vertices = new CoordsBuffer_mjs_1.default(this._heightMap, this._heightMap.patchSize);
            this._vertices.init();
        }
        setHeight(x, z, value) {
            this._heightMap.set(x, z, value);
        }
        appendToHeight(x, z, value) {
            this._heightMap.append(x, z, value);
        }
        multiplyToHeight(x, z, value, defaultHeight = 0) {
            this._heightMap.multiply(x, z, value, defaultHeight);
        }
        smoothHeightsZone(zone, np, radius) {
            this._heightMap.smoothZone(zone, np, radius);
        }
        loadHeightMapFromFile(buffer_1, options_1) {
            return __awaiter(this, arguments, void 0, function* (buffer, options, np = -1, radius = 0) {
                const header = yield this._heightMap.fromFile(buffer, options);
                this._heightMap.smooth(np, radius);
                this._heightMap.recalculateMinMax(this._heightMap);
                this._heightMap.recalculateAABB();
                return header;
            });
        }
        loadHeightMapFromImg(img, np = -1, radius = 0) {
            this._heightMap.fromImage(img);
            this._heightMap.smooth(np, radius);
            this._heightMap.recalculateMinMax(this._heightMap);
            this._heightMap.recalculateAABB();
        }
        normalizeHeightMap(maxHeight) {
            maxHeight !== null && maxHeight !== void 0 ? maxHeight : (maxHeight = this._heightMap.maxHeight);
            this._heightMap.normalize(maxHeight);
        }
        setMaxHeight(maxHeight) {
            this._heightMap.setMaxHeight(maxHeight);
        }
        appendHeightMap(heightMap, value, zone, minHeight = null, maxHeight = null) {
            this._heightMap.combineHeights('+', heightMap, value, zone, 0, minHeight, maxHeight);
        }
        recalculateMinMax(zone, aabb = true) {
            this._heightMap.recalculateMinMax(zone);
            if (aabb) {
                this._heightMap.recalculateAABB();
            }
        }
    }
    exports.default = Heightfield;
});
// Our system is divided into a general part and an engine part,
// for optimization we use the engine part in this file. (playcanvas Vec3)
define("src/Core/HeightfieldRaycastResult", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class HeightfieldRaycastResult {
        constructor() {
            this.vertexIndex = 0;
            this.distance = Number.MAX_VALUE;
            this.localNormal = new pc.Vec3(0, 1, 0);
            this.normal = new pc.Vec3(0, 1, 0);
            this.localPoint = new pc.Vec3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);
            this.point = new pc.Vec3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);
        }
        clear() {
            this.vertexIndex = 0;
            this.distance = Number.MAX_VALUE;
            this.localNormal.set(0, 1, 0);
            this.normal.set(0, 1, 0);
            this.localPoint.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);
            this.point.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);
        }
    }
    exports.default = HeightfieldRaycastResult;
});
define("src/Core/Triangle", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Triangle = void 0;
    const tmpTriVecA = new pc.Vec3();
    const tmpTriVecB = new pc.Vec3();
    class Triangle extends pc.Tri {
        getNormal(rsh) {
            tmpTriVecA.sub2(this.v1, this.v0);
            tmpTriVecB.sub2(this.v2, this.v0);
            rsh.cross(tmpTriVecA, tmpTriVecB).normalize();
        }
    }
    exports.Triangle = Triangle;
    exports.default = Triangle;
});
define("src/Core/HeightfieldShape", ["require", "exports", "src/Core/HeightfieldRaycastResult", "src/Core/Triangle"], function (require, exports, HeightfieldRaycastResult_mjs_1, Triangle_mjs_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.intersectsRayBox = intersectsRayBox;
    HeightfieldRaycastResult_mjs_1 = __importDefault(HeightfieldRaycastResult_mjs_1);
    Triangle_mjs_1 = __importDefault(Triangle_mjs_1);
    const infinite = 9999999;
    const modelTransform = new pc.Mat4();
    const tmpRay = new pc.Ray();
    const tmpRaycastVec = new pc.Vec3();
    const tmpPos1 = new pc.Vec3();
    const tmpPos2 = new pc.Vec3();
    const tmpPos3 = new pc.Vec3();
    const triangle = new Triangle_mjs_1.default();
    const debugTmpVec = new pc.Vec3();
    const debugTransform = new pc.Mat4();
    const debugPositions = new Array(16);
    let debugTransformIsIdentity = true;
    function debugDrawTriangleLines(tri, color = pc.Color.YELLOW) {
        var _a;
        /*
        [
            tri.v0.x, tri.v0.y, tri.v0.z, tri.v1.x, tri.v1.y, tri.v1.z,
            tri.v1.x, tri.v1.y, tri.v1.z, tri.v2.x, tri.v2.y, tri.v2.z,
            tri.v2.x, tri.v2.y, tri.v2.z, tri.v0.x, tri.v0.y, tri.v0.z,
        ], color, false);
        ]
        */
        debugTransform.transformPoint(tri.v0, debugTmpVec);
        debugPositions[0] = debugPositions[15] = debugTmpVec.x;
        debugPositions[1] = debugPositions[16] = debugTmpVec.y;
        debugPositions[2] = debugPositions[17] = debugTmpVec.z;
        debugTransform.transformPoint(tri.v1, debugTmpVec);
        debugPositions[3] = debugPositions[6] = debugTmpVec.x;
        debugPositions[4] = debugPositions[7] = debugTmpVec.y;
        debugPositions[5] = debugPositions[8] = debugTmpVec.z;
        debugTransform.transformPoint(tri.v2, debugTmpVec);
        debugPositions[9] = debugPositions[12] = debugTmpVec.x;
        debugPositions[10] = debugPositions[13] = debugTmpVec.y;
        debugPositions[11] = debugPositions[14] = debugTmpVec.z;
        (_a = pc.app) === null || _a === void 0 ? void 0 : _a.drawLineArrays(debugPositions, color, false);
    }
    function intersectsRayBox(aabb, ray) {
        const rayOrigin = ray.origin;
        const rayDirection = ray.direction;
        const minX = aabb.minX;
        const maxX = aabb.maxX;
        const minY = aabb.minY;
        const maxY = aabb.maxY;
        const minZ = aabb.minZ;
        const maxZ = aabb.maxZ;
        let tmin = (minX - rayOrigin.x) / rayDirection.x;
        let tmax = (maxX - rayOrigin.x) / rayDirection.x;
        if (tmin > tmax) {
            let temp = tmin;
            tmin = tmax;
            tmax = temp;
        }
        let tymin = (minY - rayOrigin.y) / rayDirection.y;
        let tymax = (maxY - rayOrigin.y) / rayDirection.y;
        if (tymin > tymax) {
            let temp = tymin;
            tymin = tymax;
            tymax = temp;
        }
        if ((tmin > tymax) || (tymin > tmax)) {
            return false;
        }
        if (tymin > tmin) {
            tmin = tymin;
        }
        if (tymax < tmax) {
            tmax = tymax;
        }
        let tzmin = (minZ - rayOrigin.z) / rayDirection.z;
        let tzmax = (maxZ - rayOrigin.z) / rayDirection.z;
        if (tzmin > tzmax) {
            let temp = tzmin;
            tzmin = tzmax;
            tzmax = temp;
        }
        if ((tmin > tzmax) || (tzmin > tmax)) {
            return false;
        }
        return true;
    }
    class HeightfieldShape {
        constructor(heightMap) {
            this._heightMap = heightMap;
            this._beginPos = new pc.Vec3();
            this._endPos = new pc.Vec3();
            this.updateBoundingBox();
        }
        updateBoundingBox() {
            const halfWidth = this._heightMap.width / 2;
            const halfDepth = this._heightMap.depth / 2;
            this._boundingBox = {
                minX: -halfWidth,
                minY: 0,
                minZ: -halfDepth,
                maxX: halfWidth,
                maxY: this._heightMap.maxHeight,
                maxZ: halfDepth,
            };
        }
        _triangleIntersectsRay(tri, ray, bestResult) {
            if (tri.intersectsRay(ray, tmpRaycastVec)) {
                const distance = tmpRaycastVec.distance(ray.origin);
                if (bestResult.distance > distance) {
                    bestResult.distance = distance;
                    tri.getNormal(bestResult.localNormal);
                    bestResult.normal.copy(bestResult.localNormal);
                    bestResult.localPoint.copy(tmpRaycastVec);
                    bestResult.point.copy(tmpRaycastVec);
                    debugDrawTriangleLines(tri, pc.Color.RED);
                    const distanceP0 = bestResult.point.distance(tri.v0);
                    const distanceP1 = bestResult.point.distance(tri.v1);
                    const distanceP2 = bestResult.point.distance(tri.v2);
                    if (distanceP0 > distanceP1) {
                        if (distanceP1 > distanceP2) {
                            bestResult.vertexIndex = tri.index2;
                        }
                        else {
                            bestResult.vertexIndex = tri.index1;
                        }
                    }
                    else {
                        if (distanceP0 > distanceP2) {
                            bestResult.vertexIndex = tri.index2;
                        }
                        else {
                            bestResult.vertexIndex = tri.index0;
                        }
                    }
                    return true;
                }
            }
            //debugDrawTriangleLines(tri);
            return false;
        }
        _assignPosition(index, buf) {
            const x = index % this._heightMap.width | 0;
            const z = index / this._heightMap.width | 0;
            buf.x = (-this._heightMap.width / 2) + x;
            buf.y = this._heightMap.get(x, z);
            buf.z = (-this._heightMap.depth / 2) + z;
        }
        _quadAction(rs, ray, result) {
            const x = rs.prevX;
            const z = rs.prevZ;
            if (x < 0 || z < 0 || x >= this._heightMap.width - 1 || z >= this._heightMap.depth - 1) {
                return false;
            }
            const xFan2 = x % 2 === 0;
            const zFan2 = z % 2 === 0;
            let index0, index1, index2;
            {
                if (xFan2 !== zFan2) {
                    index0 = (z + 0) * this._heightMap.width + (x + 0);
                    index1 = (z + 1) * this._heightMap.width + (x + 0);
                    index2 = (z + 0) * this._heightMap.width + (x + 1);
                }
                else {
                    index0 = (z + 0) * this._heightMap.width + (x + 0);
                    index1 = (z + 1) * this._heightMap.width + (x + 1);
                    index2 = (z + 0) * this._heightMap.width + (x + 1);
                }
                this._assignPosition(index0, tmpPos1);
                this._assignPosition(index1, tmpPos2);
                this._assignPosition(index2, tmpPos3);
                triangle.index0 = index0;
                triangle.index1 = index1;
                triangle.index2 = index2;
                triangle.set(tmpPos1, tmpPos2, tmpPos3);
            }
            if (this._triangleIntersectsRay(triangle, ray, result)) {
                return true;
            }
            {
                if (xFan2 !== zFan2) {
                    index0 = (z + 0) * this._heightMap.width + (x + 1);
                    index1 = (z + 1) * this._heightMap.width + (x + 0);
                    index2 = (z + 1) * this._heightMap.width + (x + 1);
                }
                else {
                    index0 = (z + 0) * this._heightMap.width + (x + 0);
                    index1 = (z + 1) * this._heightMap.width + (x + 0);
                    index2 = (z + 1) * this._heightMap.width + (x + 1);
                }
                this._assignPosition(index0, tmpPos1);
                this._assignPosition(index1, tmpPos2);
                this._assignPosition(index2, tmpPos3);
                triangle.index0 = index0;
                triangle.index1 = index1;
                triangle.index2 = index2;
                triangle.set(tmpPos1, tmpPos2, tmpPos3);
            }
            if (this._triangleIntersectsRay(triangle, ray, result)) {
                return true;
            }
            return false;
        }
        _intersectsRay(localRay, result = new HeightfieldRaycastResult_mjs_1.default()) {
            if (!intersectsRayBox(this._boundingBox, localRay)) {
                return false;
            }
            this._beginPos.copy(localRay.origin);
            this._beginPos.x += this._boundingBox.maxX;
            this._beginPos.z += this._boundingBox.maxZ;
            this._endPos.copy(localRay.direction).add(this._beginPos);
            let rayDirectionFlatX = this._endPos.x - this._beginPos.x;
            let rayDirectionFlatZ = this._endPos.z - this._beginPos.z;
            const maxDistanceFlat = Math.sqrt(Math.pow(rayDirectionFlatX, 2) + Math.pow(rayDirectionFlatZ, 2));
            if (maxDistanceFlat < 0.0001) {
                // Consider the ray vertical
                rayDirectionFlatX = 0;
                rayDirectionFlatZ = 0;
            }
            else {
                rayDirectionFlatX /= maxDistanceFlat;
                rayDirectionFlatZ /= maxDistanceFlat;
            }
            const xiStep = rayDirectionFlatX > 0 ? 1 : rayDirectionFlatX < 0 ? -1 : 0;
            const ziStep = rayDirectionFlatZ > 0 ? 1 : rayDirectionFlatZ < 0 ? -1 : 0;
            const paramDeltaX = xiStep !== 0 ? 1 / Math.abs(rayDirectionFlatX) : infinite;
            const paramDeltaZ = ziStep !== 0 ? 1 / Math.abs(rayDirectionFlatZ) : infinite;
            let paramCrossX;
            let paramCrossZ;
            if (xiStep !== 0) {
                paramCrossX = xiStep === 1
                    ? (Math.ceil(this._beginPos.x) - this._beginPos.x) * paramDeltaX
                    : (this._beginPos.x - Math.floor(this._beginPos.x)) * paramDeltaX;
            }
            else {
                paramCrossX = infinite; // Will never cross on X
            }
            if (ziStep !== 0) {
                paramCrossZ = ziStep === 1
                    ? (Math.ceil(this._beginPos.z) - this._beginPos.z) * paramDeltaZ
                    : (this._beginPos.z - Math.floor(this._beginPos.z)) * paramDeltaZ;
            }
            else {
                paramCrossZ = infinite; // Will never cross on Z
            }
            const rs = {
                x: this._beginPos.x | 0,
                z: this._beginPos.z | 0,
                param: 0,
                prevX: 0,
                prevZ: 0,
                prevParam: 0,
                maxDistanceFlat: maxDistanceFlat,
            };
            // Workaround cases where the ray starts at an integer position
            if (paramCrossX === 0.0) {
                paramCrossX += paramDeltaX;
                // If going backwards, we should ignore the position we would get by the above flooring,
                // because the ray is not heading in that direction
                if (xiStep === -1) {
                    rs.x -= 1;
                }
            }
            if (paramCrossZ === 0.0) {
                paramCrossZ += paramDeltaZ;
                if (ziStep === -1)
                    rs.z -= 1;
            }
            let hasHit = false;
            while (!hasHit) {
                rs.prevX = rs.x;
                rs.prevZ = rs.z;
                rs.prevParam = rs.param;
                if (paramCrossX < paramCrossZ) {
                    // X lane
                    rs.x += xiStep;
                    // Assign before advancing the param,
                    // to be in sync with the initialization step
                    rs.param = paramCrossX;
                    paramCrossX += paramDeltaX;
                }
                else {
                    // Z lane
                    rs.z += ziStep;
                    rs.param = paramCrossZ;
                    paramCrossZ += paramDeltaZ;
                }
                if (this._quadAction(rs, localRay, result)) {
                    hasHit = true;
                }
                if (rs.param > rs.maxDistanceFlat) {
                    rs.param = rs.maxDistanceFlat;
                    break;
                }
            }
            return hasHit;
        }
        intersectsRay(worldTranform, ray, result = new HeightfieldRaycastResult_mjs_1.default()) {
            if (worldTranform) {
                modelTransform.copy(worldTranform).invert();
                modelTransform.transformPoint(ray.origin, tmpRay.origin);
                modelTransform.transformVector(ray.direction, tmpRay.direction);
                debugTransform.copy(worldTranform);
                debugTransformIsIdentity = false;
            }
            else if (!debugTransformIsIdentity) {
                debugTransform.setIdentity();
                debugTransformIsIdentity = true;
            }
            const hit = this._intersectsRay(worldTranform ? tmpRay : ray, result);
            if (hit && worldTranform) {
                // update world point and normal, but save local
                worldTranform.transformPoint(result.point, result.point);
                worldTranform.transformVector(result.normal, result.normal);
            }
            return !!hit;
        }
    }
    exports.default = HeightfieldShape;
});
define("src/Core/IPatch", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("src/Core/IPatchInstancing", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("src/Extras/Utils", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.checkSupportR32FTexture = exports.littleEndian = exports.setPrecision = void 0;
    exports.getText = getText;
    exports.clamp = clamp;
    exports.randomFloat = randomFloat;
    exports.randomFloatRange = randomFloatRange;
    exports.calcNextPowerOfTwo = calcNextPowerOfTwo;
    exports.nrand = nrand;
    function getText(val, minWidth, prefix) {
        const str = val.toString();
        const strLen = str.length;
        const appendCount = minWidth - strLen;
        let result = str;
        for (let i = 0; i < appendCount; i++) {
            result = prefix + result;
        }
        return result;
    }
    function clamp(value, min, max) {
        return Math.max(min, Math.min(max, value));
    }
    function randomFloat() {
        return Math.random();
    }
    function randomFloatRange(start, end) {
        if (end == start) {
            throw new Error("Invalid random range");
        }
        const delta = end - start;
        const randomValue = randomFloat() * delta + start;
        return randomValue;
    }
    function calcNextPowerOfTwo(x) {
        let ret = 1;
        if (x == 1) {
            return 2;
        }
        while (ret < x) {
            ret = ret * 2;
        }
        return ret;
    }
    /** A random number from -1.0 to 1.0 */
    function nrand() {
        return Math.random() * 2.0 - 1.0;
    }
    const setPrecision = (graphicsDevice, shaderCode) => {
        return "precision " + graphicsDevice.precision + " float;\n" + shaderCode;
    };
    exports.setPrecision = setPrecision;
    exports.littleEndian = (() => {
        const uint8Array = new Uint8Array([0xAA, 0xBB]);
        const uint16array = new Uint16Array(uint8Array.buffer);
        return uint16array[0] === 0xBBAA;
    })();
    const checkSupportR32FTexture = (graphicsDevice) => {
        try {
            // TODO: need more test...
            // TODO: on iphone not work r32f textures
            if (navigator.platform.match(/iPhone|iPod|iPad/) !== null ||
                navigator.platform.startsWith("Mac") && navigator.maxTouchPoints > 4) {
                return false;
            }
            if (graphicsDevice.isWebGL2) {
                const gl = graphicsDevice.gl;
                let result = gl.getExtension("EXT_color_buffer_float");
                if (result) {
                    result = gl.getExtension("OES_texture_float");
                }
                if (!!result) {
                    return false;
                }
            }
            return true;
        }
        catch (ex) {
            return false;
        }
    };
    exports.checkSupportR32FTexture = checkSupportR32FTexture;
});
define("src/Extras/Store2D", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ObjStore2D = exports.AbsStore2D = void 0;
    class AbsStore2D {
        constructor() {
            this._cols = 0;
            this._rows = 0;
        }
        init(cols, rows) {
            this._cols = cols;
            this._rows = rows;
            const size = cols * rows;
            this._p = this._initArrayType(size);
        }
        initByVal(cols, rows, val) {
            this.init(cols, rows);
            const size = cols * rows;
            const valIsFunc = typeof val === 'function';
            for (let i = 0; i < size; i++) {
                this._p[i] = valIsFunc ? val() : val;
            }
        }
        initByStore(cols, rows, val) {
            this._cols = cols;
            this._rows = rows;
            this._p = val;
        }
        addr() {
            return this._p;
        }
        size() {
            return this._rows * this._cols;
        }
        get(col, row) {
            return this._p[row * this._cols + col];
        }
        set(col, row, value) {
            this._p[row * this._cols + col] = value;
        }
        getByIndex(index) {
            return this._p[index];
        }
        setByIndex(index, value) {
            this._p[index] = value;
        }
    }
    exports.AbsStore2D = AbsStore2D;
    class ObjStore2D extends AbsStore2D {
        _initArrayType(size) {
            return new Array(size);
        }
    }
    exports.ObjStore2D = ObjStore2D;
});
define("src/Core/LodState", ["require", "exports", "src/Extras/Utils", "src/Extras/Store2D"], function (require, exports, Utils_mjs_1, Store2D_mjs_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultPatchLod = void 0;
    exports.defaultPatchLod = {
        distance: 0,
        core: 0,
        left: 0,
        right: 0,
        top: 0,
        bottom: 0,
    };
    const getZeroPatchLod = () => ({
        distance: 0,
        core: 0,
        left: 0,
        right: 0,
        top: 0,
        bottom: 0,
    });
    class LodState {
        get lodManager() { return this._lodManager; }
        get zFar() { return this._zFar; }
        get regions() { return this._regions; }
        get map() { return this._map; }
        constructor(lodManager, zFar) {
            this.setLodManager(lodManager);
            this.setZFar(zFar);
        }
        setLodManager(lodManager, removeFromPrev = true) {
            if (this._lodManager && removeFromPrev) {
                this._lodManager.removeState(this);
            }
            this._lodManager = lodManager;
            this._lodManager.addState(this);
            this._regions = new Array(this._lodManager.count);
            this._map = new Store2D_mjs_1.ObjStore2D();
            this._map.initByVal(this._lodManager.numPatchesX, this._lodManager.numPatchesZ, getZeroPatchLod);
        }
        setZFar(zFar) {
            this._zFar = zFar;
            this._calcLodRegions();
        }
        _calcLodRegions() {
            // TODO: We can use the ring system to determine the LOD.
            // TODO: Based on the heights we can calculate the optimal lods
            let sum = 0;
            for (let i = 0; i < this._regions.length; i++) {
                sum += i + 1;
            }
            let x = this._zFar / sum;
            let temp = 0;
            for (let i = 0; i < this._regions.length; i++) {
                const curRange = (x * (i + 1)) | 0;
                this._regions[i] = temp + curRange;
                temp += curRange;
            }
        }
        getPatchLod(patchX, patchZ) {
            return this._map.get(patchX, patchZ);
        }
        getPatchLodByIndex(index) {
            return this._map.getByIndex(index);
        }
        getLodForDistance(distance) {
            let lod = this._regions.length - 1;
            for (let i = 0; i < this._regions.length; i++) {
                if (distance < this._regions[i]) {
                    lod = i;
                    break;
                }
            }
            return lod;
        }
        updatePatchLod(patchX, patchZ) {
            const item = this._map.get(patchX, patchZ);
            const coreLod = item.core;
            let hasChange = false;
            let indexLeft = patchX;
            let indexRight = patchX;
            let indexTop = patchZ;
            let indexBottom = patchZ;
            if (patchX > 0) {
                indexLeft--;
                const prev = item.left;
                const next = this._map.get(indexLeft, patchZ).core > coreLod ? 1 : 0;
                if (prev !== next) {
                    item.left = next;
                    hasChange = true;
                }
            }
            if (patchX < this._lodManager.numPatchesX - 1) {
                indexRight++;
                const prev = item.right;
                const next = this._map.get(indexRight, patchZ).core > coreLod ? 1 : 0;
                if (prev !== next) {
                    item.right = next;
                    hasChange = true;
                }
            }
            if (patchZ > 0) {
                indexBottom--;
                const prev = item.bottom;
                const next = this._map.get(patchX, indexBottom).core > coreLod ? 1 : 0;
                if (prev !== next) {
                    item.bottom = next;
                    hasChange = true;
                }
            }
            if (patchZ < this._lodManager.numPatchesZ - 1) {
                indexTop++;
                const prev = item.top;
                const next = this._map.get(patchX, indexTop).core > coreLod ? 1 : 0;
                if (prev !== next) {
                    item.top = next;
                    hasChange = true;
                }
            }
            return hasChange;
        }
        printLodMap() {
            const maxLodMaxZ = this._lodManager.numPatchesZ - 1;
            const maxLodMaxX = this._lodManager.numPatchesX;
            let maxCore = 0;
            let str = '';
            for (let lodMapZ = maxLodMaxZ; lodMapZ > -1; lodMapZ--) {
                for (let lodMapX = 0; lodMapX < maxLodMaxX; lodMapX++) {
                    const value = this._map.get(lodMapX, lodMapZ).core;
                    if (maxCore < value) {
                        maxCore = value;
                    }
                }
            }
            const lodMaxNumberCount = maxLodMaxZ.toString().length;
            const coreMaxNumberCount = maxCore.toString().length;
            for (let lodMapZ = maxLodMaxZ; lodMapZ > -1; lodMapZ--) {
                str += (0, Utils_mjs_1.getText)(lodMapZ, lodMaxNumberCount, ' ') + ': ';
                for (let lodMapX = 0; lodMapX < maxLodMaxX; lodMapX++) {
                    const value = this._map.get(lodMapX, lodMapZ).core;
                    str += (0, Utils_mjs_1.getText)(value, coreMaxNumberCount, ' ') + ' ';
                }
                str += '\n';
            }
            console.log(str);
        }
    }
    exports.default = LodState;
});
define("src/Core/LodManager", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class LodManager {
        get states() { return this._states; }
        get patchSize() { return this._patchSize; }
        get numPatchesX() { return this._numPatchesX; }
        get numPatchesZ() { return this._numPatchesZ; }
        get count() { return this._lodCount; }
        get max() { return this._lodCount - 1; }
        constructor(lodEstimator) {
            this._states = [];
            this._patchSize = lodEstimator.patchSize;
            this._numPatchesX = lodEstimator.numPatchesX;
            this._numPatchesZ = lodEstimator.numPatchesZ;
            this._lodCount = lodEstimator.count;
        }
        hasState(state) {
            return this._states.indexOf(state) !== -1;
        }
        addState(state) {
            if (this._states.indexOf(state) === -1) {
                this._states.push(state);
            }
        }
        removeState(state) {
            const idx = this._states.indexOf(state);
            if (idx !== -1) {
                this._states.splice(idx, 1);
            }
        }
        update(localViewPos, heightMap, useYPos = true) {
            const a = this._updateLodMapPass1(localViewPos, heightMap, useYPos);
            const b = this._updateLodMapPass2();
            return a || b;
        }
        _updateLodMapPass1(localViewPos, heightMap, useYPos) {
            const halfWidth = heightMap.width / 2;
            const halfDepth = heightMap.depth / 2;
            const centerStep = this.patchSize / 2 | 0;
            const patchSizeM1 = this.patchSize - 1;
            let proxyPatchCenterY = 0;
            let hasChange = false;
            if (useYPos) {
                const normalizeCameraX = Math.min(Math.max(localViewPos.x + halfWidth, 0), heightMap.width - 1);
                const normalizeCameraZ = Math.min(Math.max(localViewPos.z + halfDepth, 0), heightMap.depth - 1);
                const cameraPosAltitude = heightMap.get(normalizeCameraX | 0, normalizeCameraZ | 0);
                proxyPatchCenterY = Math.pow((localViewPos.y - cameraPosAltitude), 2);
            }
            for (let lodMapZ = 0; lodMapZ < this.numPatchesZ; lodMapZ++) {
                for (let lodMapX = 0; lodMapX < this.numPatchesX; lodMapX++) {
                    const x = lodMapX * patchSizeM1 + centerStep;
                    const z = lodMapZ * patchSizeM1 + centerStep;
                    const patchCenterX = -halfWidth + x;
                    const patchCenterZ = -halfDepth + z;
                    const distanceToCamera = Math.sqrt(Math.pow((localViewPos.x - patchCenterX), 2) +
                        Math.pow((localViewPos.z - patchCenterZ), 2) +
                        proxyPatchCenterY);
                    for (const state of this._states) {
                        const coreLod = state.getLodForDistance(distanceToCamera);
                        const patchLod = state.getPatchLod(lodMapX, lodMapZ);
                        patchLod.distance = distanceToCamera;
                        if (patchLod.core !== coreLod) {
                            patchLod.core = coreLod;
                            hasChange = true;
                        }
                    }
                }
            }
            return hasChange;
        }
        _updateLodMapPass2() {
            let hasChange = false;
            for (let lodMapZ = 0; lodMapZ < this.numPatchesZ; lodMapZ++) {
                for (let lodMapX = 0; lodMapX < this.numPatchesX; lodMapX++) {
                    for (const state of this._states) {
                        if (state.updatePatchLod(lodMapX, lodMapZ)) {
                            hasChange = true;
                        }
                    }
                }
            }
            return hasChange;
        }
    }
    exports.default = LodManager;
});
define("src/Core/MidpointDispHeightfield", ["require", "exports", "src/Extras/Utils", "src/Core/Heightfield"], function (require, exports, Utils_mjs_2, Heightfield_mjs_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    Heightfield_mjs_1 = __importDefault(Heightfield_mjs_1);
    class MidpointDispHeightfield extends Heightfield_mjs_1.default {
        createMidpointDisplacement(roughness) {
            if (roughness < 0.0) {
                throw Error("roughness must be positive");
            }
            this._createMidpointDisplacementF32(roughness);
            this.normalizeHeightMap();
        }
        _createMidpointDisplacementF32(roughness) {
            let rectSize = (0, Utils_mjs_2.calcNextPowerOfTwo)(this.width);
            let curHeight = rectSize / 2.0;
            const heightReduce = Math.pow(2.0, -roughness);
            while (rectSize > 0) {
                this._diamondStep(rectSize, curHeight);
                this._squareStep(rectSize, curHeight);
                rectSize = (rectSize / 2) | 0;
                curHeight *= heightReduce;
            }
        }
        _diamondStep(rectSize, curHeight) {
            const HalfRectSize = Math.floor(rectSize / 2);
            for (let y = 0; y < this.depth; y += rectSize) {
                for (let x = 0; x < this.width; x += rectSize) {
                    let nextX = (x + rectSize) % this.width;
                    let nextY = (y + rectSize) % this.depth;
                    if (nextX < x) {
                        nextX = this.width - 1;
                    }
                    if (nextY < y) {
                        nextY = this.depth - 1;
                    }
                    const topLeft = this.heightMap.get(x, y);
                    const topRight = this.heightMap.get(nextX, y);
                    const bottomLeft = this.heightMap.get(x, nextY);
                    const bottomRight = this.heightMap.get(nextX, nextY);
                    const midX = (x + HalfRectSize) % this.width;
                    const midY = (y + HalfRectSize) % this.depth;
                    const randValue = (0, Utils_mjs_2.randomFloatRange)(curHeight, -curHeight);
                    const midPoint = (topLeft + topRight + bottomLeft + bottomRight) / 4.0;
                    this.setHeight(midX, midY, midPoint + randValue);
                }
            }
        }
        _squareStep(rectSize, curHeight) {
            const halfRectSize = (rectSize / 2) | 0;
            for (let y = 0; y < this.depth; y += rectSize) {
                for (let x = 0; x < this.width; x += rectSize) {
                    let nextX = (x + rectSize) % this.width;
                    let nextY = (y + rectSize) % this.depth;
                    if (nextX < x) {
                        nextX = this.width - 1;
                    }
                    if (nextY < y) {
                        nextY = this.depth - 1;
                    }
                    const midX = (x + halfRectSize) % this.width;
                    const midY = (y + halfRectSize) % this.depth;
                    const prevMidX = (x - halfRectSize + this.width) % this.width;
                    const prevMidY = (y - halfRectSize + this.depth) % this.depth;
                    const curTopLeft = this.heightMap.get(x, y);
                    const curTopRight = this.heightMap.get(nextX, y);
                    const curCenter = this.heightMap.get(midX, midY);
                    const prevYCenter = this.heightMap.get(midX, prevMidY);
                    const curBotLeft = this.heightMap.get(x, nextY);
                    const prevXCenter = this.heightMap.get(prevMidX, midY);
                    const curLeftMid = (curTopLeft + curCenter + curBotLeft + prevXCenter) / 4.0 + (0, Utils_mjs_2.randomFloatRange)(-curHeight, curHeight);
                    const curTopMid = (curTopLeft + curCenter + curTopRight + prevYCenter) / 4.0 + (0, Utils_mjs_2.randomFloatRange)(-curHeight, curHeight);
                    this.setHeight(midX, y, curTopMid);
                    this.setHeight(x, midY, curLeftMid);
                }
            }
        }
    }
    exports.default = MidpointDispHeightfield;
});
define("src/Core/PatchCombineInstancing", ["require", "exports", "src/Core/LodEstimator", "src/Core/LodInfo"], function (require, exports, LodEstimator_mjs_2, LodInfo_mjs_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TComInstCoordsOffsetArrType = exports.combineGroupLen = exports.comInstDataSize = void 0;
    exports.getLodCombineData = getLodCombineData;
    exports.comInstDataSize = 4;
    exports.combineGroupLen = 6;
    exports.TComInstCoordsOffsetArrType = Uint8Array;
    class PatchCombineInstancing {
        get patchCount() { return this._patchCount; }
        constructor() {
            this.data = [];
            this._patchCount = 0;
        }
        forEach(fn) {
            for (let c = 0; c < this.data.length; c++) {
                for (let i = 0; i < exports.combineGroupLen; i++) {
                    const segment = this.data[c].groups[i];
                    fn(segment);
                }
            }
        }
        destroySegmentObjects(index, destructor) {
            for (let i = 0; i < exports.combineGroupLen; i++) {
                const segment = this.data[index].groups[i];
                if (segment.object) {
                    destructor(segment.object);
                    segment.object = null;
                }
            }
        }
        destroy(destructor) {
            for (let i = 0; i < this.data.length; i++) {
                this.destroySegmentObjects(i, destructor);
            }
            this.data.length = 0;
        }
        build(grid, objectBuilder) {
            this._patchCount = grid.numPatchesX * grid.numPatchesZ;
            this.data = new Array(grid.lodInfo.length);
            for (let lodCore = 0; lodCore < this.data.length; lodCore++) {
                this.data[lodCore] = this._buildInfo(lodCore, grid.lodInfo[lodCore], this._patchCount, objectBuilder);
            }
        }
        _buildInfo(lodCore, lodInfo, patchCount, objectBuilder) {
            const groups = new Array(exports.combineGroupLen);
            const items = new Array(LodInfo_mjs_2.LEFT);
            for (let l = 0; l < LodInfo_mjs_2.LEFT; l++) {
                items[l] = new Array(LodInfo_mjs_2.RIGHT);
                for (let r = 0; r < LodInfo_mjs_2.RIGHT; r++) {
                    items[l][r] = new Array(LodInfo_mjs_2.TOP);
                    for (let t = 0; t < LodInfo_mjs_2.TOP; t++) {
                        items[l][r][t] = new Array(LodInfo_mjs_2.BOTTOM);
                        for (let b = 0; b < LodInfo_mjs_2.BOTTOM; b++) {
                            const id = (0, LodEstimator_mjs_2.getLodId)(lodCore, l, r, t, b);
                            const vl = getLodCombineData(lodCore, l, r, t, b);
                            const { mainId, groupId } = vl;
                            items[l][r][t][b] = vl;
                            // build data for main case
                            if (id === mainId) {
                                const info = lodInfo.info[l][r][t][b];
                                const lod = {
                                    core: lodCore,
                                    left: l,
                                    right: r,
                                    top: t,
                                    bottom: b
                                };
                                const data = new exports.TComInstCoordsOffsetArrType(patchCount * exports.comInstDataSize);
                                const object = objectBuilder ? objectBuilder(lod, info, data, patchCount) : null;
                                groups[groupId] = {
                                    vertexBaseIndex: info.start,
                                    vertexCount: info.count,
                                    count: 0,
                                    lod: lod,
                                    data: data,
                                    object: object,
                                    hasChanges: false,
                                };
                            }
                        }
                    }
                }
            }
            return {
                groups,
                items
            };
        }
        get(lod) {
            const data = this.data[lod.core];
            const groupId = data.items[lod.left][lod.right][lod.top][lod.bottom].groupId;
            return data.groups[groupId];
        }
        increment(lod, patch) {
            const data = this.data[lod.core];
            const item = data.items[lod.left][lod.right][lod.top][lod.bottom];
            const single = data.groups[item.groupId];
            const prevIndex = single.count;
            const index = prevIndex * exports.comInstDataSize;
            if (single.data[index + 0] !== patch.x ||
                single.data[index + 1] !== patch.z ||
                single.data[index + 2] !== item.angle) {
                single.data[index + 0] = patch.x;
                single.data[index + 1] = patch.z;
                single.data[index + 2] = item.angle;
                single.hasChanges = true;
            }
            single.count++;
            return single;
        }
        zeroAll() {
            for (let lodCore = 0; lodCore < this.data.length; lodCore++) {
                for (let i = 0; i < exports.combineGroupLen; i++) {
                    const single = this.data[lodCore].groups[i];
                    single.count = 0;
                }
            }
        }
    }
    exports.default = PatchCombineInstancing;
    function getLodCombineData(lodCore, l, r, t, b) {
        // We are looking for which shape can be replaced by rotation.
        // Angle 1 = 90, 2 = 180, 3 = 270
        // |\|/|/                   |\|/|\|
        // |\|/|\  => rotate(90) => |/|\|/|
        // |/|\|/                    \ / \
        let mainId;
        let groupId;
        let angle;
        if (l === 0 && r === 0 && t === 0 && b === 0) {
            mainId = (0, LodEstimator_mjs_2.getLodId)(lodCore, 0, 0, 0, 0);
            groupId = 0;
            angle = 0;
        }
        else if (l === 1 && r === 0 && t === 0 && b === 0) {
            mainId = (0, LodEstimator_mjs_2.getLodId)(lodCore, 1, 0, 0, 0);
            groupId = 1;
            angle = 0;
        }
        else if (l === 0 && r === 0 && t === 1 && b === 0) {
            mainId = (0, LodEstimator_mjs_2.getLodId)(lodCore, 1, 0, 0, 0);
            groupId = 1;
            angle = 90;
        }
        else if (l === 0 && r === 1 && t === 0 && b === 0) {
            mainId = (0, LodEstimator_mjs_2.getLodId)(lodCore, 1, 0, 0, 0);
            groupId = 1;
            angle = 180;
        }
        else if (l === 0 && r === 0 && t === 0 && b === 1) {
            mainId = (0, LodEstimator_mjs_2.getLodId)(lodCore, 1, 0, 0, 0);
            groupId = 1;
            angle = 270;
        }
        else if (l === 1 && r === 0 && t === 1 && b === 0) {
            mainId = (0, LodEstimator_mjs_2.getLodId)(lodCore, 1, 0, 1, 0);
            groupId = 2;
            angle = 0;
        }
        else if (l === 0 && r === 1 && t === 1 && b === 0) {
            mainId = (0, LodEstimator_mjs_2.getLodId)(lodCore, 1, 0, 1, 0);
            groupId = 2;
            angle = 90;
        }
        else if (l === 0 && r === 1 && t === 0 && b === 1) {
            mainId = (0, LodEstimator_mjs_2.getLodId)(lodCore, 1, 0, 1, 0);
            groupId = 2;
            angle = 180;
        }
        else if (l === 1 && r === 0 && t === 0 && b === 1) {
            mainId = (0, LodEstimator_mjs_2.getLodId)(lodCore, 1, 0, 1, 0);
            groupId = 2;
            angle = 270;
        }
        else if (l === 1 && r === 1 && t === 0 && b === 0) {
            mainId = (0, LodEstimator_mjs_2.getLodId)(lodCore, 1, 1, 0, 0);
            groupId = 3;
            angle = 0;
        }
        else if (l === 0 && r === 0 && t === 1 && b === 1) {
            mainId = (0, LodEstimator_mjs_2.getLodId)(lodCore, 1, 1, 0, 0);
            groupId = 3;
            angle = 90;
        }
        else if (l === 1 && r === 0 && t === 1 && b === 1) {
            mainId = (0, LodEstimator_mjs_2.getLodId)(lodCore, 1, 0, 1, 1);
            groupId = 4;
            angle = 0;
        }
        else if (l === 1 && r === 1 && t === 1 && b === 0) {
            mainId = (0, LodEstimator_mjs_2.getLodId)(lodCore, 1, 0, 1, 1);
            groupId = 4;
            angle = 90;
        }
        else if (l === 0 && r === 1 && t === 1 && b === 1) {
            mainId = (0, LodEstimator_mjs_2.getLodId)(lodCore, 1, 0, 1, 1);
            groupId = 4;
            angle = 180;
        }
        else if (l === 1 && r === 1 && t === 0 && b === 1) {
            mainId = (0, LodEstimator_mjs_2.getLodId)(lodCore, 1, 0, 1, 1);
            groupId = 4;
            angle = 270;
        }
        else if (l === 1 && r === 1 && t === 1 && b === 1) {
            mainId = (0, LodEstimator_mjs_2.getLodId)(lodCore, 1, 1, 1, 1);
            groupId = 5;
            angle = 0;
        }
        else {
            throw new Error(`Can\'t combine ${lodCore},${l},${r},${t},${b}`);
        }
        return {
            mainId,
            groupId,
            angle: angle / 90, // save for uint8
        };
    }
});
define("src/Core/PatchInstancing", ["require", "exports", "src/Core/LodInfo"], function (require, exports, LodInfo_mjs_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PatchInstancing = exports.TInstCoordsOffsetArrType = exports.instDataSize = void 0;
    exports.instDataSize = 2;
    exports.TInstCoordsOffsetArrType = Uint16Array;
    class PatchInstancing {
        get patchCount() { return this._patchCount; }
        constructor() {
            this.data = [];
            this._patchCount = 0;
        }
        forEach(fn) {
            for (let c = 0; c < this.data.length; c++) {
                for (let l = 0; l < LodInfo_mjs_3.LEFT; l++) {
                    for (let r = 0; r < LodInfo_mjs_3.RIGHT; r++) {
                        for (let t = 0; t < LodInfo_mjs_3.TOP; t++) {
                            for (let b = 0; b < LodInfo_mjs_3.BOTTOM; b++) {
                                const segment = this.data[c][l][r][t][b];
                                fn(segment);
                            }
                        }
                    }
                }
            }
        }
        destroySegmentObjects(index, destructor) {
            for (let l = 0; l < LodInfo_mjs_3.LEFT; l++) {
                for (let r = 0; r < LodInfo_mjs_3.RIGHT; r++) {
                    for (let t = 0; t < LodInfo_mjs_3.TOP; t++) {
                        for (let b = 0; b < LodInfo_mjs_3.BOTTOM; b++) {
                            const segment = this.data[index][l][r][t][b];
                            if (segment.object) {
                                destructor(segment.object);
                                segment.object = null;
                            }
                        }
                    }
                }
            }
        }
        destroy(destructor) {
            for (let i = 0; i < this.data.length; i++) {
                this.destroySegmentObjects(i, destructor);
            }
            this.data.length = 0;
        }
        build(grid, objectBuilder) {
            this._patchCount = grid.numPatchesX * grid.numPatchesZ;
            this.data = new Array(grid.lodInfo.length);
            for (let lodCore = 0; lodCore < this.data.length; lodCore++) {
                this.data[lodCore] = this._buildInfo(lodCore, grid.lodInfo[lodCore], this._patchCount, objectBuilder);
            }
        }
        _buildInfo(lodCore, lodInfo, patchCount, objectBuilder) {
            const arr = new Array(LodInfo_mjs_3.LEFT);
            for (let l = 0; l < LodInfo_mjs_3.LEFT; l++) {
                arr[l] = new Array(LodInfo_mjs_3.RIGHT);
                for (let r = 0; r < LodInfo_mjs_3.RIGHT; r++) {
                    arr[l][r] = new Array(LodInfo_mjs_3.TOP);
                    for (let t = 0; t < LodInfo_mjs_3.TOP; t++) {
                        arr[l][r][t] = new Array(LodInfo_mjs_3.BOTTOM);
                        for (let b = 0; b < LodInfo_mjs_3.BOTTOM; b++) {
                            const info = lodInfo.info[l][r][t][b];
                            const lod = {
                                core: lodCore,
                                left: l,
                                right: r,
                                top: t,
                                bottom: b
                            };
                            const data = new exports.TInstCoordsOffsetArrType(patchCount * exports.instDataSize);
                            const object = objectBuilder ? objectBuilder(lod, info, data, patchCount) : null;
                            arr[l][r][t][b] = {
                                vertexBaseIndex: info.start,
                                vertexCount: info.count,
                                count: 0,
                                lod: lod,
                                data: data,
                                object: object,
                                hasChanges: false,
                            };
                        }
                    }
                }
            }
            return arr;
        }
        get(lod) {
            return this.data[lod.core][lod.left][lod.right][lod.top][lod.bottom];
        }
        increment(lod, patch) {
            const single = this.get(lod);
            const prevIndex = single.count;
            const index = prevIndex * exports.instDataSize;
            if (single.data[index + 0] !== patch.minX ||
                single.data[index + 1] !== patch.minZ) {
                single.data[index + 0] = patch.minX;
                single.data[index + 1] = patch.minZ;
                single.hasChanges = true;
            }
            single.count++;
            return single;
        }
        zeroAll() {
            for (let lodCore = 0; lodCore < this.data.length; lodCore++) {
                for (let l = 0; l < LodInfo_mjs_3.LEFT; l++) {
                    for (let r = 0; r < LodInfo_mjs_3.RIGHT; r++) {
                        for (let t = 0; t < LodInfo_mjs_3.TOP; t++) {
                            for (let b = 0; b < LodInfo_mjs_3.BOTTOM; b++) {
                                const single = this.data[lodCore][l][r][t][b];
                                single.count = 0;
                            }
                        }
                    }
                }
            }
        }
    }
    exports.PatchInstancing = PatchInstancing;
});
define("src/Core/PatchedHeightMap", ["require", "exports", "src/Core/AbsChunkedHeightMap"], function (require, exports, AbsChunkedHeightMap_mjs_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PatchedHeightMap = void 0;
    AbsChunkedHeightMap_mjs_3 = __importStar(AbsChunkedHeightMap_mjs_3);
    class PatchedHeightMap extends AbsChunkedHeightMap_mjs_3.default {
        static createBuffer(width, depth, chunkSize) {
            const numChunksX = ((width - 1) / (chunkSize - 1)) | 0;
            const numChunksZ = ((depth - 1) / (chunkSize - 1)) | 0;
            const chunkArrSize = Math.pow(chunkSize, 2);
            const chunkCount = numChunksX * numChunksZ;
            return new Float32Array(chunkArrSize * chunkCount);
        }
        constructor(width, depth, patchSize, dataChunkSize, maxHeight, buffer) {
            const validDataChunkSize = (0, AbsChunkedHeightMap_mjs_3.getOrThrowDataChunkSize)(patchSize, dataChunkSize);
            const tmpBuffer = buffer !== null && buffer !== void 0 ? buffer : PatchedHeightMap.createBuffer(width, depth, validDataChunkSize);
            super(width, depth, patchSize, dataChunkSize, maxHeight, tmpBuffer, 1, 0);
        }
    }
    exports.PatchedHeightMap = PatchedHeightMap;
    exports.default = PatchedHeightMap;
});
define("src/Core/PatchesSphereBuffer", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bufferItemSize = void 0;
    exports.bufferItemSize = 4; // (x, y, z, radius)
    // Our system is divided into a general part and an engine part,
    // for optimization we use the engine part in this file. (playcanvas Vec3, Mat4, BoundingSphere)
    class PatchesSphereBuffer {
        get heightMap() { return this._heightMap; }
        get buffer() { return this._localBuffer; }
        get spheres() { return this._worldSpheres; }
        constructor(heightMap, matrix) {
            this._heightMap = heightMap;
            this._localBuffer = new Array(this._heightMap.numPatchesX * this._heightMap.numPatchesZ * exports.bufferItemSize);
            this._localBuffer.fill(0);
            this._scale = new pc.Vec3();
            this._matrix = new pc.Mat4();
            this._initWorldSpheres();
            this.setMatrix(matrix !== null && matrix !== void 0 ? matrix : pc.Mat4.IDENTITY, false);
        }
        _initWorldSpheres() {
            this._worldSpheres = new Array(this._heightMap.numPatchesX * this._heightMap.numPatchesZ);
            for (let patchZ = 0; patchZ < this._heightMap.numPatchesZ; patchZ++) {
                for (let patchX = 0; patchX < this._heightMap.numPatchesX; patchX++) {
                    const index = patchX + patchZ * this._heightMap.numPatchesX;
                    this._worldSpheres[index] = new pc.BoundingSphere();
                }
            }
        }
        setMatrix(matrix, recalculate = true) {
            this._matrix.copy(matrix);
            this._matrix.getScale(this._scale);
            if (recalculate) {
                this._recalculateWorldBoundingSpheres();
            }
        }
        patchVisible(patchX, patchZ, margin, frustum) {
            const sphereIdx = patchX + patchZ * this._heightMap.numPatchesX;
            const sphere = this._worldSpheres[sphereIdx];
            const prevRadius = sphere.radius;
            sphere.radius *= margin;
            const result = frustum.containsSphere(sphere);
            sphere.radius = prevRadius;
            return result > 0;
        }
        recalculate() {
            for (let patchZ = 0; patchZ < this._heightMap.numPatchesZ; patchZ++) {
                for (let patchX = 0; patchX < this._heightMap.numPatchesX; patchX++) {
                    this.recalculateBoundingSphere(patchX, patchZ);
                }
            }
        }
        recalculateZone(zone) {
            if (zone.maxX < 0)
                return;
            if (zone.maxZ < 0)
                return;
            const fixedMinX = Math.max(zone.minX, 0);
            const fixedMinZ = Math.max(zone.minZ, 0);
            const fixedMaxX = Math.min(zone.maxX, this._heightMap.width);
            const fixedMaxZ = Math.min(zone.maxZ, this._heightMap.depth);
            for (let z = fixedMinZ; z < fixedMaxZ; z += this._heightMap.patchSize) {
                for (let x = fixedMinX; x < fixedMaxX; x += this._heightMap.patchSize) {
                    const patchX = x / this._heightMap.patchSize | 0;
                    const patchZ = z / this._heightMap.patchSize | 0;
                    this.recalculateBoundingSphere(patchX, patchZ);
                }
            }
        }
        recalculateBoundingSphere(patchX, patchZ) {
            const index = (patchX + patchZ * this._heightMap.numPatchesX) * exports.bufferItemSize;
            const patchMinHeight = this._heightMap.getPatchMin(patchX, patchZ);
            const patchMaxHeight = this._heightMap.getPatchMax(patchX, patchZ);
            const patchRadiusBySize = this._heightMap.patchSize / 2;
            const patchRediusByHeight = (patchMaxHeight - patchMinHeight) / 2;
            const patchCenterX = (patchX * this._heightMap.patchSize) + patchRadiusBySize;
            const patchCenterY = (patchMaxHeight + patchMinHeight) / 2;
            const patchCenterZ = (patchZ * this._heightMap.patchSize) + patchRadiusBySize;
            const radius = (patchRadiusBySize > patchRediusByHeight ? patchRadiusBySize : patchRediusByHeight) * Math.SQRT2;
            // We construct coordinates relative to the center of the height map
            this._localBuffer[index + 0] = patchCenterX + this._heightMap.width / -2;
            this._localBuffer[index + 1] = patchCenterY;
            this._localBuffer[index + 2] = patchCenterZ + this._heightMap.depth / -2;
            this._localBuffer[index + 3] = radius;
            this._recalculateWorldBoundingSphere(patchX, patchZ);
        }
        _recalculateWorldBoundingSpheres() {
            for (let patchZ = 0; patchZ < this._heightMap.numPatchesZ; patchZ++) {
                for (let patchX = 0; patchX < this._heightMap.numPatchesX; patchX++) {
                    this._recalculateWorldBoundingSphere(patchX, patchZ);
                }
            }
        }
        _recalculateWorldBoundingSphere(patchX, patchZ) {
            const sphereIdx = patchX + patchZ * this._heightMap.numPatchesX;
            const bufferIdx = sphereIdx * exports.bufferItemSize;
            const locRadius = this._localBuffer[bufferIdx + 3];
            const wrlSphere = this._worldSpheres[sphereIdx];
            wrlSphere.center.set(this._localBuffer[bufferIdx + 0], this._localBuffer[bufferIdx + 1], this._localBuffer[bufferIdx + 2]);
            wrlSphere.radius = Math.sqrt(Math.pow((this._scale.x * locRadius), 2) +
                Math.pow((this._scale.y * locRadius), 2) +
                Math.pow((this._scale.z * locRadius), 2));
            this._matrix.transformPoint(wrlSphere.center, wrlSphere.center);
        }
    }
    exports.default = PatchesSphereBuffer;
});
define("src/Core/PatchesManager", ["require", "exports", "src/Core/LodState", "src/Core/LodManager"], function (require, exports, LodState_mjs_1, LodManager_mjs_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    LodManager_mjs_1 = __importDefault(LodManager_mjs_1);
    class PatchesManager {
        get grid() { return this._grid; }
        get spheres() { return this._spheres; }
        get lodManager() { return this._lodManager; }
        get states() { return this._states; }
        constructor(grid, spheres) {
            this._grid = grid;
            this._spheres = spheres;
            this._lodManager = new LodManager_mjs_1.default(grid.lodEstimator);
            this._states = [];
        }
        hasState(state) {
            return this._states.indexOf(state) !== -1;
        }
        addState(state) {
            if (!this._lodManager.hasState(state.lodState)) {
                console.warn("Lod state has different lod manager with patches manager");
                return;
            }
            if (this._states.indexOf(state) === -1) {
                this._states.push(state);
            }
            this._initSingleState(state);
        }
        removeState(state) {
            const idx = this._states.indexOf(state);
            if (idx !== -1) {
                this._states.splice(idx, 1);
            }
        }
        _initSingleState(state) {
            const numPatchesX = this._grid.numPatchesX;
            const numPatchesZ = this._grid.numPatchesZ;
            const patchSize = this._grid.patchSize;
            for (let patchZ = 0; patchZ < numPatchesZ; patchZ++) {
                for (let patchX = 0; patchX < numPatchesX; patchX++) {
                    const minX = patchX * (patchSize - 1);
                    const minZ = patchZ * (patchSize - 1);
                    const info = this._grid.lodInfo[0].info[0][0][0][0];
                    state.initPatch(patchX, patchZ, patchSize, minX, minZ, info, LodState_mjs_1.defaultPatchLod);
                }
            }
        }
        update(frustum, frustumMargin = 1) {
            const numStates = this._states.length;
            const numPatchesX = this._grid.numPatchesX;
            const numPatchesZ = this._grid.numPatchesZ;
            for (let i = 0; i < numStates; i++) {
                this._states[i].beforeUpdate();
            }
            for (let patchZ = 0; patchZ < numPatchesZ; patchZ++) {
                for (let patchX = 0; patchX < numPatchesX; patchX++) {
                    const visible = !!frustum && this._spheres.patchVisible(patchX, patchZ, frustumMargin, frustum);
                    for (let i = 0; i < numStates; i++) {
                        const state = this._states[i];
                        const plod = state.lodState.getPatchLod(patchX, patchZ);
                        const info = this._grid.lodInfo[plod.core].info[plod.left][plod.right][plod.top][plod.bottom];
                        state.updatePatch(patchX, patchZ, visible, info, plod);
                    }
                }
            }
            for (let i = 0; i < numStates; i++) {
                this._states[i].afterUpdate();
            }
        }
        updateLods(localViewPos, useYPos = true) {
            this.lodManager.update(localViewPos, this._spheres.heightMap, useYPos);
        }
    }
    exports.default = PatchesManager;
});
define("src/Core/SquareIterator", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class SquareIterator {
        get field() { return this._field; }
        constructor(field) {
            this._field = field;
        }
        _forEach(zone, squareSize, numSquareX, numSquareZ, callback) {
            if (zone.maxX < 0)
                return;
            if (zone.maxZ < 0)
                return;
            const minX = Math.max(zone.minX, 0);
            const minZ = Math.max(zone.minZ, 0);
            const maxX = Math.min(zone.maxX, this.field.width);
            const maxZ = Math.min(zone.maxZ, this.field.depth);
            const minPatchX = minX / squareSize | 0;
            const minPatchZ = minZ / squareSize | 0;
            const maxPatchX = maxX / squareSize | 0;
            const maxPatchZ = maxZ / squareSize | 0;
            const normalizeMinX = Math.max(minPatchX, 0);
            const normalizeMinZ = Math.max(minPatchZ, 0);
            const normalizeMaxX = Math.min(maxPatchX + 1, numSquareX);
            const normalizeMaxZ = Math.min(maxPatchZ + 1, numSquareZ);
            for (let z = normalizeMinZ; z < normalizeMaxZ; z++) {
                for (let x = normalizeMinX; x < normalizeMaxX; x++) {
                    const patchIndex = z * numSquareX + x;
                    if (callback(patchIndex, x, z) === false) {
                        return;
                    }
                }
            }
        }
    }
    exports.default = SquareIterator;
});
define("src/Extras/Debug", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.drawDirectionVector = drawDirectionVector;
    exports.drawPoint = drawPoint;
    exports.drawBox = drawBox;
    const tmpVec = new pc.Vec3();
    function drawDirectionVector(position, dir, color = pc.Color.RED) {
        // Draw the vector
        const start = position;
        const end = tmpVec.add2(position, dir);
        pc.app.drawLine(start, end, color, false);
    }
    function drawPoint({ center, radius = 0.1, numSegments = 4, color = pc.Color.RED, layer, depthTest = false }) {
        const block = 6 * 3;
        const points = new Array(numSegments * block);
        const step = 2 * Math.PI / numSegments;
        let angle = 0;
        for (let i = 0; i < numSegments; i++) {
            const sin0 = Math.sin(angle);
            const cos0 = Math.cos(angle);
            angle += step;
            const sin1 = Math.sin(angle);
            const cos1 = Math.cos(angle);
            const j = i * block;
            points[j + 0] = center.x + radius * sin0;
            points[j + 1] = center.y;
            points[j + 2] = center.z + radius * cos0;
            points[j + 3] = center.x + radius * sin1;
            points[j + 4] = center.y;
            points[j + 5] = center.z + radius * cos1;
            points[j + 6] = center.x;
            points[j + 7] = center.y + radius * sin0;
            points[j + 8] = center.z + radius * cos0;
            points[j + 9] = center.x;
            points[j + 10] = center.y + radius * sin1;
            points[j + 11] = center.z + radius * cos1;
            points[j + 12] = center.x + radius * cos0;
            points[j + 13] = center.y + radius * sin0;
            points[j + 14] = center.z;
            points[j + 15] = center.x + radius * cos1;
            points[j + 16] = center.y + radius * sin1;
            points[j + 17] = center.z;
        }
        pc.app.drawLineArrays(points, color, depthTest, layer);
    }
    function drawBox({ min, max, color = pc.Color.RED, layer, depthTest = false }) {
        var _a;
        (_a = pc.app) === null || _a === void 0 ? void 0 : _a.drawWireAlignedBox(min, max, color, depthTest, layer);
    }
});
define("src/Extras/EnumConverter", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isNumeric = isNumeric;
    exports.mapTitleEnum = mapTitleEnum;
    exports.mapEnum = mapEnum;
    function isNumeric(value) {
        return /^-?\d+$/.test(value);
    }
    function mapTitleEnum(someEnum) {
        const result = [];
        for (let value in someEnum) {
            if (!someEnum.hasOwnProperty(value) ||
                isNumeric(value)) {
                continue;
            }
            const enumEntry = {};
            enumEntry[value] = someEnum[value];
            result.push(enumEntry);
        }
        return result;
    }
    function mapEnum(someEnum) {
        const result = [];
        for (let value in someEnum) {
            if (!someEnum.hasOwnProperty(value)) {
                continue;
            }
            const enumEntry = {};
            enumEntry[value] = someEnum[value];
            result.push(enumEntry);
        }
        return result;
    }
});
define("src/Extras/Random", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class Random {
        constructor(seed) {
            this.seed = seed;
            this._tmp = seed;
        }
        reset() {
            this._tmp = this.seed;
        }
        next() {
            this._tmp = (this._tmp * 48271) % 2147483647;
            this._tick = this._tmp / 2147483647;
            return this._tick;
        }
        nextFloat(min, max) {
            return this.next() * (max - min) + min;
        }
        nextInt(min, max) {
            return this.nextFloat(min, max) | 0;
        }
        random() {
            return this.next();
        }
        nrand() {
            return this.nextFloat(-1, 1);
        }
    }
    exports.default = Random;
});
define("src/GrassField/GrassFieldTexture", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GrassFieldTexture = void 0;
    class GrassFieldTexture {
        get texture() { return this._texture; }
        constructor(graphicsDevice, width, depth, buffer) {
            this._width = width;
            this._depth = depth;
            const w = (width - 1) / 4 + 1;
            const d = (depth - 1) / 4 + 1;
            this._buffer = buffer !== null && buffer !== void 0 ? buffer : new Uint8Array(w * d * 4); // => 1 byte = 8 bits => 8 / 2 = 4 bit for 8 levels
            this._texture = new pc.Texture(graphicsDevice, {
                width: w,
                height: d,
                format: pc.PIXELFORMAT_RGBA8U,
                mipmaps: false,
                minFilter: pc.FILTER_NEAREST,
                magFilter: pc.FILTER_NEAREST,
                addressU: pc.ADDRESS_CLAMP_TO_EDGE,
                addressV: pc.ADDRESS_CLAMP_TO_EDGE,
                flipY: graphicsDevice.isWebGPU,
                levels: [this._buffer]
            });
        }
        destroy() {
            var _a;
            (_a = this._texture) === null || _a === void 0 ? void 0 : _a.destroy();
        }
        setChannel(x, z, channel) {
            const index = (x + z * this._width) / 4 | 0;
            const value = this._buffer[index];
        }
        setPixel() {
            if (this._texture) {
                const device = this._texture.device;
                const dataChunkSize = 1;
                const buffer = new Uint8Array(4);
                if (device.isWebGL2) {
                    const gl = device.gl;
                    const textureFormat = this._texture.impl._glFormat;
                    const texturePixelT = this._texture.impl._glPixelType;
                    const textureTarget = this._texture.impl._glTarget;
                    const textureObject = this._texture.impl._glTexture;
                    gl.bindTexture(textureTarget, textureObject);
                    gl.texSubImage3D(gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, dataChunkSize, dataChunkSize, 1, textureFormat, texturePixelT, buffer);
                }
                else if (device.isWebGPU) {
                    const webgpu = device.wgpu;
                    const texture = (this._texture.impl.gpuTexture);
                    webgpu.queue.writeTexture({
                        texture: texture,
                        origin: [0, 0, 0],
                        mipLevel: 0
                    }, buffer, {
                        offset: 0,
                        bytesPerRow: 4 * dataChunkSize, // always 4 for rgba format
                        rowsPerImage: dataChunkSize
                    }, {
                        width: dataChunkSize,
                        height: dataChunkSize
                    });
                }
            }
        }
    }
    exports.GrassFieldTexture = GrassFieldTexture;
    GrassFieldTexture.MAX_CHANEL = 8;
});
define("src/Heightfield/ShaderChunks", ["require", "exports", "src/Extras/Utils"], function (require, exports, Utils_mjs_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.chunks = exports.heightMapFactorsChunks = exports.diffusePS = exports.layersOffsetParamName = exports.layersScaleParamName = exports.layersFlagsParamName = exports.layersNormalsParamName = exports.layersDiffuseParamName = exports.maxLayersCount = exports.gammaNormalizeChunkPS = exports.gammaNormalizeHeaderPS = exports.startVS = exports.normalCoreVS = exports.normalVS = exports.normalByHeightMapVS = exports.startUv0VS = exports.uv0VS = exports.transformVS = exports.transformDeclVS = exports.transformInstancingVS = exports.instancingVS = exports.fieldHeightChunkVS = exports.fieldHeightFactorChunkVS = exports.fieldChunkBufferCoordVS = exports.fieldHeightFactorRGBA8UX4VS = exports.fieldHeightFactorRG16UX2VS = exports.fieldHeightFactorRGBA8UVS = exports.fieldHeightFactorR32FVS = exports.fieldCoordsChunkVS = exports.currentFieldXZForCombineInstancingChunkVS = exports.currentFieldXZForInstancingChunkVS = exports.currentFieldXZChunkVS = exports.baseClearSubVS = exports.baseClearVS = exports.heightMapSampler = exports.baseForCombineInstancingVS = exports.baseForInstancingVS = exports.baseOriginalVS = exports.definesVS = exports.littleEndianValue = exports.cameraPositionParamName = exports.splatMapParamName = exports.maxHeightParamName = exports.heightMapParamName = exports.patchLodCoreParamName = exports.patchCoordOffsetParamName = exports.patchInstCoordOffsetAttrName = exports.vertexNormalAttrName = exports.vertexHeightAttrName = exports.vertexCoordAttrName = void 0;
    exports.getFieldHeightFactorVS = getFieldHeightFactorVS;
    exports.getTextureType = getTextureType;
    exports.getSamplerType = getSamplerType;
    exports.getFieldShaderChunks = getFieldShaderChunks;
    exports.vertexCoordAttrName = "vertex_position";
    exports.vertexHeightAttrName = "vertex_height";
    exports.vertexNormalAttrName = "vertex_normal";
    exports.patchInstCoordOffsetAttrName = "vertex_postion_offset";
    exports.patchCoordOffsetParamName = "uPatchCoordOffset";
    exports.patchLodCoreParamName = "uPatchLodCore";
    exports.heightMapParamName = "uHeightMap";
    exports.maxHeightParamName = "uMaxHeight";
    exports.splatMapParamName = "uSplatMap";
    exports.cameraPositionParamName = "uCameraPos";
    exports.littleEndianValue = Utils_mjs_3.littleEndian ? 'true' : 'false';
    exports.definesVS = `
    #define HM_NUM_CHUNKS_X        (%%HM_NUM_CHUNKS_X%%)
    #define HM_NUM_CHUNKS_X_U      (uint(HM_NUM_CHUNKS_X))
    #define HM_CHUNK_SIZE          (%%HM_CHUNK_SIZE%%)
    #define HM_CHUNK_SIZE_U        (uint(HM_CHUNK_SIZE))
    #define HM_CHUNK_SIZE_M1_U     (HM_CHUNK_SIZE_U - 1u)
    #define HM_CHUNK_SIZE_F        (float(HM_CHUNK_SIZE))
    #define FIELD_SIZE             (ivec2(%%FIELD_SIZE_X%%, %%FIELD_SIZE_Z%%))
    #define FIELD_SIZE_F           (vec2(%%FIELD_SIZE_X_F%%, %%FIELD_SIZE_Z_F%%))
    #define FIELD_SIZE_U           (uvec2(FIELD_SIZE))
    #define FIELD_SIZE_H_F         (FIELD_SIZE_F / 2.0)
    #define FIELD_SIZE_H_N_F       (-FIELD_SIZE_H_F)
    #define FIELD_PATCH_SIZE_X     (%%FIELD_PATCH_SIZE_X%%)
    #define FIELD_PATCH_SIZE_M1    (FIELD_PATCH_SIZE_X - 1.0)
    #define FIELD_PATCH_SIZE_M1_H  (FIELD_PATCH_SIZE_M1 / 2.0)
    #define FIELD_PATCH_SIZE_M1_F  (vec2(FIELD_PATCH_SIZE_M1_H, FIELD_PATCH_SIZE_M1_H))
`;
    exports.baseOriginalVS = `
    uniform vec2 ${exports.patchCoordOffsetParamName};

    attribute uvec2 ${exports.vertexCoordAttrName};
`;
    exports.baseForInstancingVS = `
    attribute uvec2 ${exports.vertexCoordAttrName};
    attribute uvec2 ${exports.patchInstCoordOffsetAttrName};
`;
    exports.baseForCombineInstancingVS = `
    attribute uvec2 ${exports.vertexCoordAttrName};
    attribute uvec4 ${exports.patchInstCoordOffsetAttrName};
`;
    exports.heightMapSampler = `
    uniform highp %%HEIGHT_MAP_SAMPLER%% ${exports.heightMapParamName};
`;
    exports.baseClearVS = `
    uniform mat4 matrix_viewProjection;
    uniform mat4 matrix_model;
    uniform mat3 matrix_normal;

    uniform vec3 ${exports.cameraPositionParamName};
    
    uniform float ${exports.maxHeightParamName};
    uniform float ${exports.patchLodCoreParamName};

    vec2 dCurrentFieldXZ;
    float dCurrentFieldHeight;
`;
    exports.baseClearSubVS = `
    vec3 dPositionW;
    mat4 dModelMatrix;
    mat3 dNormalMatrix;

    vec3 dCurrentFieldNormal;
`;
    exports.currentFieldXZChunkVS = `
    vec2 getCurrentFieldXZ() {
        return vec2(${exports.vertexCoordAttrName}) + ${exports.patchCoordOffsetParamName};
    }
`;
    exports.currentFieldXZForInstancingChunkVS = `
    vec2 getCurrentFieldXZ() {
        return vec2(${exports.vertexCoordAttrName} + ${exports.patchInstCoordOffsetAttrName});
    }
`;
    exports.currentFieldXZForCombineInstancingChunkVS = `
    const vec4 rotatePatchXZCoff[4] = vec4[4](
        vec4( 1.0,  0.0,  0.0,  1.0),
        vec4( 0.0,  1.0, -1.0,  0.0),
        vec4(-1.0,  0.0,  0.0, -1.0),
        vec4( 0.0, -1.0,  1.0,  0.0)
    );

    vec2 rotatePatchXZ(vec2 coord, uint angle) {
        vec2 offset = coord - FIELD_PATCH_SIZE_M1_H;
        vec4 transf = rotatePatchXZCoff[angle];
        return FIELD_PATCH_SIZE_M1_H + offset.xx * transf.xz + offset.yy * transf.yw;
    }

    vec2 getCurrentFieldXZ() {
        uint angle = ${exports.patchInstCoordOffsetAttrName}.z;
        vec2 orgXZ = vec2(${exports.vertexCoordAttrName});
        vec2 rotXZ = rotatePatchXZ(orgXZ, angle);
        return rotXZ + vec2(${exports.patchInstCoordOffsetAttrName}.xy) * FIELD_PATCH_SIZE_M1;
    }
`;
    exports.fieldCoordsChunkVS = `
    vec2 getCurrentFieldUvCoord() {
        vec2 xz = dCurrentFieldXZ;
        vec2 uv = (xz + 0.5) / FIELD_SIZE_F;
        return uv;
    }
    
    uvec2 clampFieldXZ(vec2 xz) {
        return uvec2(clamp(xz, vec2(0.0), FIELD_SIZE_F));
    }
    
    vec2 getFieldXZ(ivec2 offset) {
        return dCurrentFieldXZ + vec2(offset);
    }
`;
    exports.fieldHeightFactorR32FVS = `
    float getFieldHeightFactorFromTexture(uvec3 coord) {
        return texelFetch(${exports.heightMapParamName}, ivec3(coord), 0).r;
    }
`;
    // https://stackoverflow.com/questions/63827836/is-it-possible-to-do-a-rgba-to-float-and-back-round-trip-and-read-the-pixels-in
    // note: the 0.1s here an there are voodoo related to precision
    /*
        float rgba8uToFloat0(uvec4 v) {
            vec4 bits  = vec4(${littleEndian ? 'v' : 'v.abgr'});
            float sign = mix(-1.0, 1.0, step(bits[3], 128.0));
            float expo = floor(mod(bits[3] + 0.1, 128.0)) * 2.0 + floor((bits[2] + 0.1) / 128.0) - 127.0;
            float sig  = bits[0] + bits[1] * 256.0 + floor(mod(bits[2] + 0.1, 128.0)) * 256.0 * 256.0;
            return sign * (1.0 + sig / 8388607.0) * pow(2.0, expo);
        }
    */
    exports.fieldHeightFactorRGBA8UVS = `
    float rgba8uToFloat(uvec4 v) {
        uvec4 bits = ${Utils_mjs_3.littleEndian ? 'v' : 'v.abgr'};
        float sign = 2.0 * step(float(bits[3]), 128.0) - 1.0;
        float expo = float((bits[3] & 127u) * 2u + bits[2] / 128u) - 127.0;
        float sig  = float(bits[0] + bits[1] * 256u + (bits[2] & 127u) * 65536u);
        return sign * (1.0 + sig / 8388607.0) * pow(2.0, expo);
    }

    float getFieldHeightFactorFromTexture(uvec3 coord) {
        uvec4 rgba = texelFetch(${exports.heightMapParamName}, ivec3(coord), 0);
        return rgba8uToFloat(rgba);
    }
`;
    // Compress height by x coord [patch0, patch1] ...
    // see: CompressedPatchedHeightMap file
    exports.fieldHeightFactorRG16UX2VS = `
    float getFieldHeightFactorFromTexture(uvec3 coord) {

        uint level    = coord.b;
        uint newLevel = level / 2u;
        uint shift    = level & 1u;

        uvec4 rgba = texelFetch(${exports.heightMapParamName}, ivec3(coord.xy, newLevel), 0);

        return float(rgba[shift]) / 65535.0;
    }
`;
    // Compress height by x coord [patch0, patch1, patch2, patch3] ...
    // see: CompressedPatchedHeightMap file
    exports.fieldHeightFactorRGBA8UX4VS = `
    float getFieldHeightFactorFromTexture(uvec3 coord) {

        uint level    = coord.b;
        uint newLevel = level / 4u;
        uint shift    = level & 3u;

        uvec4 rgba = texelFetch(${exports.heightMapParamName}, ivec3(coord.xy, newLevel), 0);

        return float(rgba[shift]) / 255.0;
    }
`;
    exports.fieldChunkBufferCoordVS = `
    uvec3 getFieldChunkBufferCoord(uvec2 xz) {

        uvec2 ck = xz / HM_CHUNK_SIZE_U;

        uint localX = xz[0] % HM_CHUNK_SIZE_U;
        uint localZ = xz[1] % HM_CHUNK_SIZE_U;
        uint level  = ck[1] * HM_NUM_CHUNKS_X_U + ck[0];

        return uvec3(localX, localZ, level);
    }

    uvec3 getFieldChunkBufferRelativeCoord(ivec2 offset) {
        vec2  oc = getFieldXZ(offset);
        uvec2 xz = clampFieldXZ(oc);
        return getFieldChunkBufferCoord(xz);
    }
`;
    exports.fieldHeightFactorChunkVS = `
    float getFieldHeightFactor(ivec2 offset) {
        uvec3 coord = getFieldChunkBufferRelativeCoord(offset);
        return getFieldHeightFactorFromTexture(coord);
    }
`;
    exports.fieldHeightChunkVS = `
    float getFieldHeight(ivec2 offset) {
        return getFieldHeightFactor(offset) * ${exports.maxHeightParamName};
    }
    
    float getCurrentFieldHeight() {
        return getFieldHeight(ivec2(0, 0));
    }
`;
    exports.instancingVS = ``;
    exports.transformInstancingVS = ``;
    exports.transformDeclVS = ``;
    exports.transformVS = `
#if defined(SHADOW_PASS)
#else
    varying float vPatchLod;
    varying vec2 vUvCoord;
    varying vec2 vFieldPosition;

    varying float vCloseMask;
    varying float vMiddleMask;
#endif

    mat4 getModelMatrix() {
        return matrix_model;
    }

    vec3 getWorldPosition() {
        return dPositionW;
    }
    
    vec4 getPosition() {

        dModelMatrix = getModelMatrix();
        dCurrentFieldXZ = getCurrentFieldXZ();
        dCurrentFieldHeight = getCurrentFieldHeight();

        vec2 centeredXZ = FIELD_SIZE_H_N_F + dCurrentFieldXZ;
        vec4 localPos   = vec4(centeredXZ.r, dCurrentFieldHeight, centeredXZ.g, 1.0);
        
        vec4 posW      = dModelMatrix * localPos;
        vec4 screenPos = matrix_viewProjection * posW;

        dPositionW = posW.xyz;

#if defined(SHADOW_PASS)
#else
        float dis = length(${exports.cameraPositionParamName} - dPositionW);

        vMiddleMask = smoothstep(600.0 + 100.0, 600.0, dis);
        vCloseMask  = smoothstep(200.0 + 50.0, 200.0, dis);

        vFieldPosition = dCurrentFieldXZ;
        vUvCoord       = getCurrentFieldUvCoord();
        vPatchLod      = ${exports.patchLodCoreParamName};
#endif

        return screenPos;
    }
`;
    exports.uv0VS = `
`;
    // FIX: bug with getUv0 for V1 Engine
    exports.startUv0VS = `
    vec2 getUv0() {
        return vec2(0.0);
    }
`;
    exports.normalByHeightMapVS = `
    vec3 getCurrentFieldNormal() {

        float step  = pow(2.0, ${exports.patchLodCoreParamName} + 1.0) / 2.0;
        float left  = getFieldHeightFactor(ivec2( step,  0));
        float right = getFieldHeightFactor(ivec2(-step,  0));
        float up    = getFieldHeightFactor(ivec2( 0,     step));
        float down  = getFieldHeightFactor(ivec2( 0,    -step));

        vec3 normal = vec3(left, step * 0.02, down) - vec3(right, 0, up);

        return normalize(normal);
    }
`;
    exports.normalVS = `
    vec3 getNormal() {
        dNormalMatrix = matrix_normal;
        return normalize(dNormalMatrix * dCurrentFieldNormal);
    }
`;
    exports.normalCoreVS = `
    // FIX: vertex_normal undeclaration
    vec3 vertex_normal;
    vec3 dCurrentFieldNormal;

    vec3 getLocalNormal(vec3 vertexNormal) {

        dCurrentFieldNormal = getCurrentFieldNormal();
        vertex_normal = dCurrentFieldNormal;

        return dCurrentFieldNormal;
    }

    mat3 getNormalMatrix(mat4 modelMatrix) {
        return matrix_normal;
    }
`;
    exports.startVS = `
    void main(void) {

        gl_Position = getPosition();

    #if defined(SHADOW_PASS)
    #else
        dCurrentFieldNormal = getCurrentFieldNormal();
    #endif
`;
    exports.gammaNormalizeHeaderPS = `
    #define GAMMA_NORMALIZE
`;
    exports.gammaNormalizeChunkPS = `
    vec3 autoGammaCorrectInput(vec3 v) {
        #if defined(GAMMA_NORMALIZE)
            return gammaCorrectInput(v);
        #else
            return v;
        #endif
    }

    vec4 autoGammaCorrectInput(vec4 v) {
        #if defined(GAMMA_NORMALIZE)
            return gammaCorrectInput(v);
        #else
            return v;
        #endif
    }
`;
    exports.maxLayersCount = 5; // Default + R + G + B + A
    exports.layersDiffuseParamName = "uLayersDiffuse";
    exports.layersNormalsParamName = "uLayersNormals";
    exports.layersFlagsParamName = "uLayersFlags";
    exports.layersScaleParamName = "uLayersScale";
    exports.layersOffsetParamName = "uLayersOffset";
    exports.diffusePS = `
    uniform mediump sampler2D ${exports.splatMapParamName};
    uniform mediump sampler2DArray ${exports.layersDiffuseParamName};
    //uniform mediump sampler2DArray ${exports.layersNormalsParamName};
    uniform float ${exports.layersFlagsParamName}[${exports.maxLayersCount}];
    uniform vec2 ${exports.layersScaleParamName}[${exports.maxLayersCount}];
    uniform vec2 ${exports.layersOffsetParamName}[${exports.maxLayersCount}];

    varying float vPatchLod;
    varying vec2 vUvCoord;
    varying vec2 vFieldPosition;

    varying float vCloseMask;
    varying float vMiddleMask;

    const float closeUvScale  = 1.0;
    const float middleUvScale = 0.6;
    const float farUvScale    = 0.3;

    vec3 distanceDiffuseTexture(vec2 uv, int level) {
        vec3 finalUv = vec3(${exports.layersOffsetParamName}[level] + uv * ${exports.layersScaleParamName}[level], level);
        //vec3 finalTx = texture(${exports.layersDiffuseParamName}, finalUv * vec3(farUvScale, farUvScale, 1.0)).rgb;
        //finalTx = mix(finalTx, texture(${exports.layersDiffuseParamName}, finalUv * vec3(middleUvScale, middleUvScale, 1.0)).rgb, vMiddleMask);
        //finalTx = mix(finalTx, texture(${exports.layersDiffuseParamName}, finalUv * vec3(closeUvScale, closeUvScale, 1.0)).rgb, vCloseMask);
        return texture(${exports.layersDiffuseParamName}, finalUv).rgb;
    }

    void getAlbedo() {

        vec4 splatMap = texture2D(${exports.splatMapParamName}, vUvCoord);
        vec3 albedo   = distanceDiffuseTexture(vUvCoord, 0);

        for (int i = 1; i < ${exports.maxLayersCount}; ++i) {

            float splatFactor = splatMap[i - 1];

#if defined(WEBGPU)
            if (${exports.layersFlagsParamName}[i] > 0.0) {
#else
            if (${exports.layersFlagsParamName}[i] > 0.0 && splatFactor > 0.0) {
#endif
                albedo = mix(albedo, distanceDiffuseTexture(vUvCoord, i), splatFactor);
            }
        }
        
        dAlbedo = autoGammaCorrectInput(albedo);
    }
`;
    exports.heightMapFactorsChunks = {
        fieldHeightFactorR32FVS: exports.fieldHeightFactorR32FVS,
        fieldHeightFactorRGBA8UVS: exports.fieldHeightFactorRGBA8UVS,
        fieldHeightFactorRG16UX2VS: exports.fieldHeightFactorRG16UX2VS,
        fieldHeightFactorRGBA8UX4VS: exports.fieldHeightFactorRGBA8UX4VS,
    };
    exports.chunks = Object.assign(Object.assign({}, exports.heightMapFactorsChunks), { heightMapSampler: exports.heightMapSampler,
        currentFieldXZForCombineInstancingChunkVS: exports.currentFieldXZForCombineInstancingChunkVS,
        currentFieldXZForInstancingChunkVS: exports.currentFieldXZForInstancingChunkVS,
        currentFieldXZChunkVS: exports.currentFieldXZChunkVS,
        fieldHeightFactorChunkVS: exports.fieldHeightFactorChunkVS,
        fieldHeightChunkVS: exports.fieldHeightChunkVS,
        fieldCoordsChunkVS: exports.fieldCoordsChunkVS,
        fieldChunkBufferCoordVS: exports.fieldChunkBufferCoordVS,
        normalByHeightMapVS: exports.normalByHeightMapVS,
        // Vertex
        definesVS: exports.definesVS,
        baseForCombineInstancingVS: exports.baseForCombineInstancingVS,
        baseForInstancingVS: exports.baseForInstancingVS,
        baseOriginalVS: exports.baseOriginalVS,
        baseClearVS: exports.baseClearVS,
        baseClearSubVS: exports.baseClearSubVS,
        transformDeclVS: exports.transformDeclVS,
        transformVS: exports.transformVS,
        instancingVS: exports.instancingVS,
        transformInstancingVS: exports.transformInstancingVS,
        normalVS: exports.normalVS,
        normalCoreVS: exports.normalCoreVS,
        uv0VS: exports.uv0VS,
        startVS: exports.startVS,
        startUv0VS: exports.startUv0VS,
        // Fragment
        gammaNormalizeHeaderPS: exports.gammaNormalizeHeaderPS,
        gammaNormalizeChunkPS: exports.gammaNormalizeChunkPS,
        diffusePS: exports.diffusePS });
    function getFieldHeightFactorVS(format, chunksStore) {
        switch (format) {
            case 'r32f': return chunksStore.fieldHeightFactorR32FVS;
            case 'rgba': return chunksStore.fieldHeightFactorRGBA8UVS;
            case 'rgbaX2': return chunksStore.fieldHeightFactorRG16UX2VS;
            case 'rgbaX4': return chunksStore.fieldHeightFactorRGBA8UX4VS;
            default: break;
        }
        throw new Error('Format not supported');
    }
    function getTextureType(format) {
        switch (format) {
            case 'r32f': return pc.PIXELFORMAT_R32F;
            case 'rgba': return pc.PIXELFORMAT_RGBA8U;
            case 'rgbaX2': return pc.PIXELFORMAT_RG16U;
            case 'rgbaX4': return pc.PIXELFORMAT_RGBA8U;
            default: break;
        }
        throw new Error('Format not supported');
    }
    function getSamplerType(format) {
        switch (format) {
            case 'r32f': return 'sampler2DArray';
            case 'rgba': return 'usampler2DArray';
            case 'rgbaX2': return 'usampler2DArray';
            case 'rgbaX4': return 'usampler2DArray';
            default: break;
        }
        throw new Error('Format not supported');
    }
    function getFieldShaderChunks({ width, depth, patchSize, heightMapChunkSize, instancing, heightMapFormat, chunksStore = exports.chunks, engineVersion = 'v1', }) {
        const definesVS = chunksStore.definesVS
            .replace('%%HM_NUM_CHUNKS_X%%', String((width - 1) / (heightMapChunkSize - 1) | 0))
            .replace('%%HM_CHUNK_SIZE%%', String(heightMapChunkSize | 0))
            .replace('%%FIELD_SIZE_X%%', String(width))
            .replace('%%FIELD_SIZE_Z%%', String(depth))
            .replace('%%FIELD_SIZE_X_F%%', width.toFixed(1))
            .replace('%%FIELD_SIZE_Z_F%%', depth.toFixed(1))
            .replace('%%FIELD_PATCH_SIZE_X%%', patchSize.toFixed(1));
        const fieldHeightFactorVS = getFieldHeightFactorVS(heightMapFormat, chunksStore);
        const hmVS = chunksStore.heightMapSampler.replaceAll('%%HEIGHT_MAP_SAMPLER%%', getSamplerType(heightMapFormat));
        const baseClearVS = chunksStore.baseClearVS + hmVS;
        const baseCoordVS = instancing === 'combine' ? chunksStore.baseForCombineInstancingVS :
            instancing === 'simple' ? chunksStore.baseForInstancingVS :
                chunksStore.baseOriginalVS;
        const currentFieldXZVS = instancing === 'combine' ? chunksStore.currentFieldXZForCombineInstancingChunkVS :
            instancing === 'simple' ? chunksStore.currentFieldXZForInstancingChunkVS :
                chunksStore.currentFieldXZChunkVS;
        if (engineVersion === 'v2') {
            const normalCoreVS = chunksStore.normalByHeightMapVS + chunksStore.normalCoreVS;
            const transformVS = definesVS
                + baseCoordVS
                + baseClearVS
                + currentFieldXZVS
                + fieldHeightFactorVS
                + chunksStore.fieldCoordsChunkVS
                + chunksStore.fieldChunkBufferCoordVS
                + chunksStore.fieldHeightFactorChunkVS
                + chunksStore.fieldHeightChunkVS
                + chunksStore.transformVS;
            const diffusePS = chunksStore.gammaNormalizeChunkPS
                + chunksStore.diffusePS;
            return {
                // Vertex
                normalCoreVS,
                transformVS,
                transformCoreVS: '',
                transformInstancingVS: '',
                // Fragment
                diffusePS,
            };
        }
        const startVS = chunksStore.normalByHeightMapVS + chunksStore.startUv0VS + chunksStore.startVS;
        const baseVS = baseCoordVS + baseClearVS + chunksStore.baseClearSubVS;
        const transformVS = definesVS
            + currentFieldXZVS
            + fieldHeightFactorVS
            + chunksStore.fieldCoordsChunkVS
            + chunksStore.fieldChunkBufferCoordVS
            + chunksStore.fieldHeightFactorChunkVS
            + chunksStore.fieldHeightChunkVS
            + chunksStore.transformVS;
        const diffusePS = chunksStore.gammaNormalizeHeaderPS
            + chunksStore.gammaNormalizeChunkPS
            + chunksStore.diffusePS;
        return {
            // Vertex
            baseVS,
            transformVS,
            normalVS: chunksStore.normalVS,
            uv0VS: chunksStore.uv0VS,
            startVS,
            transformDeclVS: chunksStore.transformDeclVS,
            instancingVS: chunksStore.instancingVS,
            // Fragment
            diffusePS,
        };
    }
});
define("src/GrassField/GrassShaderChunk", ["require", "exports", "src/Heightfield/ShaderChunks"], function (require, exports, ShaderChunks_mjs_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.chunks = exports.diffusePS = exports.startVS = exports.calculateLocalVS = exports.bladeDecoderVS = exports.fieldHeightMapVS = exports.baseClearSubVS = exports.baseVS = exports.startUv0VS = exports.uv0VS = exports.normalVS = exports.transformVS = exports.normalCoreVS = exports.definesBladeVS = exports.definesVS = exports.transformDeclVS = exports.transformInstancingVS = exports.instancingVS = exports.windIntensityParamName = exports.drawPosParamName = exports.lod2OffsetXZParamName = exports.lod1OffsetXZParamName = exports.fieldScaleParamName = exports.timeParamName = exports.shapeAttrName = exports.offsetAttrName = exports.vindexAttrName = void 0;
    exports.getGrassShaderChunks = getGrassShaderChunks;
    exports.vindexAttrName = "vertex_position";
    exports.offsetAttrName = "vertex_offset";
    exports.shapeAttrName = "vertex_shape";
    exports.timeParamName = "uTime";
    exports.fieldScaleParamName = "uFieldScale";
    exports.lod1OffsetXZParamName = "uLod1OffsetXZ";
    exports.lod2OffsetXZParamName = "uLod2OffsetXZ";
    exports.drawPosParamName = "uDrawPosition";
    exports.windIntensityParamName = "uWindIntensity";
    exports.instancingVS = ``;
    exports.transformInstancingVS = ``;
    exports.transformDeclVS = ``;
    exports.definesVS = `
    #define HM_NUM_CHUNKS_X       (%%HM_NUM_CHUNKS_X%%)
    #define HM_NUM_CHUNKS_X_U     (uint(HM_NUM_CHUNKS_X))
    #define HM_CHUNK_SIZE         (%%HM_CHUNK_SIZE%%)
    #define HM_CHUNK_SIZE_F       (float(HM_CHUNK_SIZE))
    #define HM_CHUNK_SIZE_U       (uint(HM_CHUNK_SIZE))
    #define FIELD_SIZE            (ivec2(%%FIELD_SIZE_X%%, %%FIELD_SIZE_Z%%))
    #define FIELD_SIZE_F          (vec2(%%FIELD_SIZE_X_F%%, %%FIELD_SIZE_Z_F%%))
    #define FIELD_SIZE_BOUND_F    (FIELD_SIZE_F - 2.0)      
    #define FIELD_SIZE_H_F        (FIELD_SIZE_F / 2.0)
    #define FIELD_SIZE_H_N_F      (-FIELD_SIZE_H_F)

    #define PATCH_SIZE         (%%PATCH_SIZE%%)
    #define HALF_PATCH_SIZE    (PATCH_SIZE / 2.0)

    #define BLADE_HEIGHT_TALL  (%%BLADE_HEIGHT_TALL%%) // height of a tall blade

    #define TRANSITION_LOW     (%%TRANSITION_LOW%%)   // elevation of beach-grass transition (start)
    #define TRANSITION_HIGH    (%%TRANSITION_HIGH%%)  // (end)
    #define TRANSITION_NOISE   (0.06)                 // transition noise scale
    #define CIRCLE_RADIUS      (PATCH_SIZE * 2.9)
    #define MAX_ZINIT_DISTANCE (300.0)
`;
    exports.definesBladeVS = `
    #define LOD0_BLADE_SEGS        (%%LOD0_BLADE_SEGS%%) // # of blade segments lod 0
    #define LOD1_BLADE_SEGS        (%%LOD1_BLADE_SEGS%%) // # of blade segments lod 1
    #define LOD2_BLADE_SEGS        (%%LOD2_BLADE_SEGS%%) // # of blade segments lod 2

    #define LOD0_BLADE_DIVS        (LOD0_BLADE_SEGS + 1.0)  // # of divisions
    #define LOD0_BLADE_VERTS       (LOD0_BLADE_DIVS * 2.0)  // # of vertices (per side, so 1/2 total)
    #define LOD0_BLADE_VERTS_COUNT (LOD0_BLADE_VERTS * 2.0) // # of vertices

    #define LOD1_BLADE_DIVS        (LOD1_BLADE_SEGS + 1.0)  // # of divisions
    #define LOD1_BLADE_VERTS       (LOD1_BLADE_DIVS * 2.0)  // # of vertices (per side, so 1/2 total)
    #define LOD1_BLADE_VERTS_COUNT (LOD1_BLADE_VERTS * 2.0) // # of vertices

    #define LOD2_BLADE_DIVS        (LOD2_BLADE_SEGS + 1.0)  // # of divisions
    #define LOD2_BLADE_VERTS       (LOD2_BLADE_DIVS * 2.0)  // # of vertices (per side, so 1/2 total)
    #define LOD2_BLADE_VERTS_COUNT (LOD2_BLADE_VERTS * 2.0) // # of vertices
    
    #define LOD2_BLADE_VERTS_ALL_COUNT (LOD2_BLADE_VERTS_COUNT * 16.0) // # of vertices all fragments
`;
    exports.normalCoreVS = `
    // FIX: vertex_normal undeclaration
    vec3 vertex_normal;

    vec3 getLocalNormal(vec3 vertexNormal) {

        // Set default shader normal
        vertex_normal = dVertexNormal;

        return dVertexNormal;
    }

    mat3 getNormalMatrix(mat4 modelMatrix) {
        return matrix_normal;
    }
`;
    exports.transformVS = `
    vec3 getWorldPosition() {
        return dPositionW;
    }

    mat4 getModelMatrix() {
        return matrix_model;
    }

    vec4 getPosition() {

        decodeBlade();
        calculateBladeVertex();

        dModelMatrix = getModelMatrix();

        vec4 posW      = dModelMatrix * vec4(dVertexPosition, 1.0);
        vec4 screenPos = matrix_viewProjection * posW;

        dPositionW = posW.xyz;

        return screenPos;
    }
`;
    exports.normalVS = `
    vec3 getNormal() {
        dNormalMatrix = matrix_normal;
        return normalize(dNormalMatrix * dVertexNormal);
    }
`;
    exports.uv0VS = `
    vec2 getUv0() {
        return vec2(dEdgeOfBlade, dDivVertexIndex * 2.0);
    }
`;
    // bug with getUv0
    exports.startUv0VS = `    
    vec2 getUv0() {
        return vec2(dEdgeOfBlade, dDivVertexIndex * 2.0);
    }
`;
    exports.baseVS = `
    uniform mat4 matrix_viewProjection;
    uniform mat4 matrix_model;
    uniform mat3 matrix_normal;

    uniform mediump usampler2D uDataMap;

    uniform vec3  ${exports.fieldScaleParamName};
    uniform float ${ShaderChunks_mjs_1.maxHeightParamName};
    
    uniform vec3  ${exports.drawPosParamName};       // centre of where we want to draw
    uniform float ${exports.timeParamName};          // used to animate blades
    uniform float ${exports.windIntensityParamName};

    uniform vec2 ${exports.lod1OffsetXZParamName}[8];  // center offset from draw pos lod 1
    uniform vec2 ${exports.lod2OffsetXZParamName}[16]; // center offset from draw pos lod 2

    attribute float ${exports.vindexAttrName};
    attribute vec4 ${exports.offsetAttrName};
    attribute vec4 ${exports.shapeAttrName};

    float dVertexIndex;           // vertex index for this side of the blade
    float dDivVertexIndex;        // div index (0 .. BLADE_DIVS)
    float dPercentOfBladeHeight;  // percent of height of blade this vertex is at
    float dSideOfBlade;           // front/back side of blade
    float dEdgeOfBlade;           // left/right edge (x=0 or x=1)
    vec2 dBladeFieldXZPos;        // blade xz position on field
    vec3 dVertexPosition;         // Vertex position - start with 2D shape, no bend applied
    vec3 dVertexNormal;           // Vertex normal
    vec2 dFieldPatchOffsetXZ;     // field patch offset from center
`;
    exports.baseClearSubVS = `
    vec3 dPositionW;
    mat4 dModelMatrix;
    mat3 dNormalMatrix;
`;
    exports.fieldHeightMapVS = `
    uvec2 clampFieldXZ(vec2 xz) {
        return uvec2(clamp(xz, vec2(0.0), FIELD_SIZE_F));
    }

    uvec3 getFieldChunkBufferCoord(vec2 origXZ) {

        uvec2 xz = clampFieldXZ(origXZ);
        uvec2 ck = xz / HM_CHUNK_SIZE_U;

        uint localX = xz[0] % HM_CHUNK_SIZE_U;
        uint localZ = xz[1] % HM_CHUNK_SIZE_U;
        uint level  = ck[1] * HM_NUM_CHUNKS_X_U + ck[0];

        return uvec3(localX, localZ, level);
    }
    
    float getFieldHeightFactor(vec2 xz) {
        uvec3 coord = getFieldChunkBufferCoord(xz);
        return getFieldHeightFactorFromTexture(coord);
    }

    float getFieldHeight(vec2 xz) {
        return getFieldHeightFactor(xz) * ${ShaderChunks_mjs_1.maxHeightParamName};
    }
    
    float getFieldHeightInterpolated(vec2 xz) {

        // here we can calculate normal

        vec2 floorXZ = floor(xz);

        float x0z0 = getFieldHeight(floorXZ);

        if ((floorXZ[0] + 1.0 >= FIELD_SIZE_F[0]) ||
            (floorXZ[1] + 1.0 >= FIELD_SIZE_F[1])) {
            return x0z0;
        }

        float x1z0 = getFieldHeight(floorXZ + vec2(1.0, 0.0));
        float x0z1 = getFieldHeight(floorXZ + vec2(0.0, 1.0));
        float x1z1 = getFieldHeight(floorXZ + vec2(1.0, 1.0));

        float factorX = xz[0] - floorXZ[0];
        float factorZ = xz[1] - floorXZ[1];

        float interpolatedBottom = (x1z0 - x0z0) * factorX + x0z0;
        float interpolatedTop    = (x1z1 - x0z1) * factorX + x0z1;
        float finalHeight        = (interpolatedTop - interpolatedBottom) * factorZ + interpolatedBottom;

        return finalHeight;
    }
`;
    exports.bladeDecoderVS = `
    void decodeBlade() {

        float nnVi = ${exports.vindexAttrName} - LOD2_BLADE_VERTS_ALL_COUNT;

        if (nnVi < 0.0) {

            float lod2nVi  = mod(${exports.vindexAttrName}, LOD2_BLADE_VERTS_COUNT);
            int patchIndex = int(${exports.vindexAttrName} / LOD2_BLADE_VERTS_COUNT);

            dVertexIndex          = mod(lod2nVi, LOD2_BLADE_VERTS);
            dDivVertexIndex       = floor(dVertexIndex / 2.0);
            dPercentOfBladeHeight = dDivVertexIndex / LOD2_BLADE_SEGS;
            dSideOfBlade          = floor(lod2nVi / LOD2_BLADE_VERTS);

            dFieldPatchOffsetXZ = ${exports.lod2OffsetXZParamName}[patchIndex];
        }
        else if (nnVi < LOD0_BLADE_VERTS_COUNT) {

            dVertexIndex          = mod(nnVi, LOD0_BLADE_VERTS);
            dDivVertexIndex       = floor(dVertexIndex / 2.0);
            dPercentOfBladeHeight = dDivVertexIndex / LOD0_BLADE_SEGS;
            dSideOfBlade          = floor(nnVi / LOD0_BLADE_VERTS);

            dFieldPatchOffsetXZ = vec2(0.0);
        }
        else {

            float lod1nnVi = nnVi - LOD0_BLADE_VERTS_COUNT;
            float lod1nVi  = mod(lod1nnVi, LOD1_BLADE_VERTS_COUNT);
            int patchIndex = int(lod1nnVi / LOD1_BLADE_VERTS_COUNT);

            dVertexIndex          = mod(lod1nVi, LOD1_BLADE_VERTS);
            dDivVertexIndex       = floor(dVertexIndex / 2.0);
            dPercentOfBladeHeight = dDivVertexIndex / LOD1_BLADE_SEGS;
            dSideOfBlade          = floor(lod1nVi / LOD1_BLADE_VERTS);

            dFieldPatchOffsetXZ = ${exports.lod1OffsetXZParamName}[patchIndex];
        }
        
        dEdgeOfBlade = mod(dVertexIndex, 2.0);
    }
`;
    exports.calculateLocalVS = `
    // Rotate by an angle
    vec2 rotate(float x, float y, float r) {
        float c = cos(r);
        float s = sin(r);
        return vec2(x * c - y * s, x * s + y * c);
    }

    // Rotate by a vector
    vec2 rotate(float x, float y, vec2 r) {
        return vec2(x * r.x - y * r.y, x * r.y + y * r.x);
    }

    float getGrassFactor(vec2 oxz) {
    
        vec2 xz = floor(oxz);

        if (xz[0] < 0.0 ||
            xz[1] < 0.0 ||
            xz[0] > FIELD_SIZE_BOUND_F[0] ||
            xz[1] > FIELD_SIZE_BOUND_F[1]) {
            return 0.0;
        }

        return 1.0;
    }
    
    varying vec2 vUvFieldCoord;
    varying vec2 vUvCoord;
    varying vec3 vColor;

    void calculateBladeVertex() {
        
        vec4 offset = ${exports.offsetAttrName};
        vec4 shape  = ${exports.shapeAttrName};

        // Based on centre of view cone position, what grid tile should
        // this piece of grass be drawn at?
        vec2 quadCenterPos = ${exports.drawPosParamName}.xz;
        vec2 bladeOffset   = offset.xy;
        vec2 patchCenter   = floor((quadCenterPos - bladeOffset) / PATCH_SIZE) * PATCH_SIZE + HALF_PATCH_SIZE + dFieldPatchOffsetXZ;

        float drawPosAltitude = ${exports.drawPosParamName}.y;

        // Find the blade mesh x,y position
        vec2 bladePos = patchCenter + bladeOffset;

        // Local quad center position in field
        // because the positions are shifted by half the size of the field
        // vec2 localQuadCenterPos = quadCenterPos + FIELD_SIZE_H_F;

        float distanceFromBladeToQuadCenter = distance(bladePos, quadCenterPos);
        float degenerateByDistanceFromBladeToQuadCenter = smoothstep(0.92, 1.0, CIRCLE_RADIUS / distanceFromBladeToQuadCenter);

        // Vertex position - start with 2D shape, no bend applied
        dVertexPosition = vec3(
            shape.x * (dEdgeOfBlade - 0.5) * (1.0 - pow(dPercentOfBladeHeight, 3.0)), // taper blade edges as approach tip
            0.0, // flat y, unbent
            shape.y * dPercentOfBladeHeight // height of vtx, unbent
        );

        // Apply blade's natural curve amount
        float curve = shape.w;

        // Then add animated curve amount by time using this blade's
        // unique properties to randomize its oscillation
        curve += shape.w + 0.125 * (sin(${exports.timeParamName} * 4.0 + offset.w * 0.2 * shape.y + offset.x + offset.y));

        // TODO
        float wind = 0.5;

        wind = (clamp(wind, 0.25, 1.0) - 0.25) * (1.0 / 0.75);
        wind = wind * wind * ${exports.windIntensityParamName};
        wind *= dPercentOfBladeHeight; // scale wind by height of blade
        wind = -wind;

        // Start computing a normal for this vertex
        dVertexNormal = vec3(0.0, dSideOfBlade * -2.0 + 1.0, 0.0);

        // put lean and curve together
        float rot = shape.z + curve * dPercentOfBladeHeight;
        vec2 rotv = vec2(cos(rot), sin(rot));

        dVertexPosition.yz = rotate(dVertexPosition.y, dVertexPosition.z, rotv);
        dVertexNormal.yz   = rotate(dVertexNormal.y, dVertexNormal.z, rotv);

        // rotation of this blade as a vector
        rotv = vec2(cos(offset.w), sin(offset.w));

        dVertexPosition.xy = rotate(dVertexPosition.x, dVertexPosition.y, rotv);
        dVertexNormal.xy   = rotate(dVertexNormal.x, dVertexNormal.y, rotv);

        rotv = vec2(cos(wind), sin(wind));

        // Wind blows in axis-aligned direction to make things simpler
        dVertexPosition.yz = rotate(dVertexPosition.y, dVertexPosition.z, rotv);
        dVertexNormal.yz   = rotate(dVertexNormal.y, dVertexNormal.z, rotv);

        // Local blade position in field
        // because the positions are shifted by half the size of the field
        dBladeFieldXZPos = bladePos / ${exports.fieldScaleParamName}.xz + FIELD_SIZE_H_F;
        
        // Sample the heightfield data texture to get altitude for this blade position
        float bladeAltitude = getFieldHeightInterpolated(dBladeFieldXZPos) * ${exports.fieldScaleParamName}.y;
        float grassFactor   = getGrassFactor(dBladeFieldXZPos);

        float distanceQuadCenterToDraw = distance(bladeAltitude, drawPosAltitude);
        float degenerateByDistanceFromBladeToDraw = smoothstep(0.81, 1.0, MAX_ZINIT_DISTANCE / distanceQuadCenterToDraw);

        // Determine if we want the grass to appear or not
        // Use the noise channel to perturb the blade altitude grass starts growing at.
        // float noisyAltitude = grassFactor * TRANSITION_NOISE - (TRANSITION_NOISE / 2.0);
        // float degenerateByNoise = (clamp(noisyAltitude, TRANSITION_LOW, TRANSITION_HIGH) - TRANSITION_LOW) * (1.0 / (TRANSITION_HIGH - TRANSITION_LOW));

        // Transition geometry toward degenerate as we approach field altitude
        dVertexPosition *= grassFactor * degenerateByDistanceFromBladeToDraw * degenerateByDistanceFromBladeToQuadCenter; // degenerateByNoise

        // Translate to world coordinates
        dVertexPosition.x += bladePos.x;
        dVertexPosition.y += bladePos.y;
        dVertexPosition.z += bladeAltitude;
        
        // Translate to xz plane
        dVertexPosition = dVertexPosition.xzy;
        dVertexNormal   = dVertexNormal.xzy;

        // grass texture coordinate for this vertex
        vUvCoord = vec2(dEdgeOfBlade, dDivVertexIndex * 2.0);

        // field texture coordinate for this vertex
        vUvFieldCoord = dBladeFieldXZPos / FIELD_SIZE_F;

        // Vertex color must be brighter because it is multiplied with blade texture
        // Each blade is randomly colourized a bit by its position
        vColor = vec3(cos(${exports.offsetAttrName}.x), sin(${exports.offsetAttrName}.y), sin(${exports.offsetAttrName}.x));
    }
`;
    // https://community.khronos.org/t/discarding-polygons-in-vertex-shader/103839/9
    exports.startVS = `
    ${exports.startUv0VS}

    void main(void) {

        gl_Position = getPosition();
`;
    exports.diffusePS = `
    uniform sampler2D uDiffuseTex;
    uniform vec3 uDiffuseColor;
    uniform vec3 uDiffuseColorRandom;

    varying vec2 vUvFieldCoord;
    varying vec2 vUvCoord;
    varying vec3 vColor;

    vec3 autoGammaCorrectInput(vec3 v) {
        #if defined(GAMMA_NORMALIZE)
            return gammaCorrectInput(v);
        #else
            return v;
        #endif
    }

    vec4 autoGammaCorrectInput(vec4 v) {
        #if defined(GAMMA_NORMALIZE)
            return gammaCorrectInput(v);
        #else
            return v;
        #endif
    }

    void getAlbedo() {

        vec3 tex = autoGammaCorrectInput(texture2D(uDiffuseTex, vUvCoord).rgb);

        dAlbedo = tex * uDiffuseColor + vColor * uDiffuseColorRandom;
    }
`;
    exports.chunks = Object.assign(Object.assign({}, ShaderChunks_mjs_1.heightMapFactorsChunks), { heightMapSampler: ShaderChunks_mjs_1.heightMapSampler,
        definesVS: exports.definesVS,
        definesBladeVS: exports.definesBladeVS,
        bladeDecoderVS: exports.bladeDecoderVS,
        calculateLocalVS: exports.calculateLocalVS,
        fieldHeightMapVS: exports.fieldHeightMapVS,
        // Vertex
        baseVS: exports.baseVS,
        baseClearSubVS: exports.baseClearSubVS,
        transformVS: exports.transformVS,
        transformDeclVS: exports.transformDeclVS,
        instancingVS: exports.instancingVS,
        transformInstancingVS: exports.transformInstancingVS,
        normalCoreVS: exports.normalCoreVS,
        normalVS: exports.normalVS,
        uv0VS: exports.uv0VS,
        startVS: exports.startVS,
        // Fragment
        diffusePS: exports.diffusePS });
    function getGrassShaderChunks({ width, depth, heightMapChunkSize, heightMapFormat, bladeMaxHeight, lod0BladeSegs, lod1BladeSegs, lod2BladeSegs, radius, transitionLow, transitionHigh, chunksStore = exports.chunks, engineVersion = 'v1', }) {
        const definesVS = chunksStore.definesVS
            .replace('%%HM_NUM_CHUNKS_X%%', String((width - 1) / (heightMapChunkSize - 1) | 0))
            .replace('%%HM_CHUNK_SIZE%%', String(heightMapChunkSize | 0))
            .replace('%%FIELD_SIZE_X%%', String(width))
            .replace('%%FIELD_SIZE_Z%%', String(depth))
            .replace('%%FIELD_SIZE_X_F%%', width.toFixed(1))
            .replace('%%FIELD_SIZE_Z_F%%', depth.toFixed(1))
            .replace('%%BLADE_HEIGHT_TALL%%', bladeMaxHeight.toFixed(1))
            .replace('%%PATCH_SIZE%%', radius.toFixed(1))
            .replace('%%TRANSITION_LOW%%', transitionLow.toString())
            .replace('%%TRANSITION_HIGH%%', transitionHigh.toString());
        const definesBladeVS = chunksStore.definesBladeVS
            .replace('%%LOD0_BLADE_SEGS%%', lod0BladeSegs.toFixed(1))
            .replace('%%LOD1_BLADE_SEGS%%', lod1BladeSegs.toFixed(1))
            .replace('%%LOD2_BLADE_SEGS%%', lod2BladeSegs.toFixed(1));
        const heightMapVS = chunksStore.heightMapSampler.replaceAll('%%HEIGHT_MAP_SAMPLER%%', (0, ShaderChunks_mjs_1.getSamplerType)(heightMapFormat));
        const baseClearVS = chunksStore.baseVS + heightMapVS;
        const heightFactorVS = (0, ShaderChunks_mjs_1.getFieldHeightFactorVS)(heightMapFormat, chunksStore);
        const transformVS = heightFactorVS
            + chunksStore.fieldHeightMapVS
            + chunksStore.bladeDecoderVS
            + chunksStore.calculateLocalVS
            + chunksStore.transformVS;
        const diffusePS = '#define GAMMA_NORMALIZE\r\n'
            + chunksStore.diffusePS;
        if (engineVersion === 'v2') {
            const transform2VS = definesVS + definesBladeVS + baseClearVS + transformVS;
            return {
                // Vertex
                transformVS: transform2VS,
                transformCoreVS: "",
                transformInstancingVS: "",
                normalCoreVS: chunksStore.normalCoreVS,
                // Fragment
                diffusePS: diffusePS,
            };
        }
        const baseVS = definesVS +
            definesBladeVS +
            baseClearVS +
            chunksStore.baseClearSubVS;
        return {
            // Vertex
            baseVS,
            startVS: chunksStore.startVS,
            transformVS: transformVS,
            transformDeclVS: chunksStore.transformDeclVS,
            instancingVS: chunksStore.instancingVS,
            normalVS: chunksStore.normalVS,
            uv0VS: chunksStore.uv0VS,
            // Fragment
            diffusePS: diffusePS,
        };
    }
});
/*
 * A speed-improved perlin and simplex noise algorithms for 2D.
 *
 * Based on example code by Stefan Gustavson (stegu@itn.liu.se).
 * Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).
 * Better rank ordering method by Stefan Gustavson in 2012.
 * Converted to Javascript by Joseph Gentle.
 *
 * Version 2012-03-09
 *
 * This code was placed in the public domain by its original author,
 * Stefan Gustavson. You may use it as you see fit, but
 * attribution is appreciated.
 *
 * --------------------
 * TypeScriptified 2016
 */
define("src/GrassField/simplex", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = simplex;
    class Grad {
        constructor(x, y, z) {
            this.x = x;
            this.y = y;
            this.z = z;
        }
        dot2(x, y) {
            return this.x * x + this.y * y;
        }
        dot3(x, y, z) {
            return this.x * x + this.y * y + this.z * z;
        }
    }
    const F2 = 0.5 * (Math.sqrt(3) - 1);
    const G2 = (3 - Math.sqrt(3)) / 6;
    const perm = new Array(512);
    const gradP = new Array(512);
    const grad3 = [
        new Grad(1, 1, 0), new Grad(-1, 1, 0), new Grad(1, -1, 0), new Grad(-1, -1, 0),
        new Grad(1, 0, 1), new Grad(-1, 0, 1), new Grad(1, 0, -1), new Grad(-1, 0, -1),
        new Grad(0, 1, 1), new Grad(0, -1, 1), new Grad(0, 1, -1), new Grad(0, -1, -1)
    ];
    const p = [
        151, 160, 137, 91, 90, 15,
        131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,
        190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,
        88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,
        77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,
        102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,
        135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,
        5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,
        223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,
        129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,
        251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,
        49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,
        138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180
    ];
    // This isn't a very good seeding function, but it works ok. It supports 2^16
    // different seed values. Write something better if you need more seeds.
    function seed(seed) {
        if (seed > 0 && seed < 1) {
            // Scale the seed out
            seed *= 65536;
        }
        seed = Math.floor(seed);
        if (seed < 256) {
            seed |= seed << 8;
        }
        for (let i = 0; i < 256; i++) {
            let v;
            if (i & 1) {
                v = p[i] ^ (seed & 255);
            }
            else {
                v = p[i] ^ ((seed >> 8) & 255);
            }
            perm[i] = perm[i + 256] = v;
            gradP[i] = gradP[i + 256] = grad3[v % 12];
        }
    }
    seed(0);
    // 2D simplex noise
    function simplex(xin, yin) {
        let n0, n1, n2; // Noise contributions from the three corners
        // Skew the input space to determine which simplex cell we're in
        const s = (xin + yin) * F2; // Hairy factor for 2D
        let i = Math.floor(xin + s);
        let j = Math.floor(yin + s);
        const t = (i + j) * G2;
        const x0 = xin - i + t; // The x,y distances from the cell origin, unskewed.
        const y0 = yin - j + t;
        // For the 2D case, the simplex shape is an equilateral triangle.
        // Determine which simplex we are in.
        let i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords
        if (x0 > y0) { // lower triangle, XY order: (0,0)->(1,0)->(1,1)
            i1 = 1;
            j1 = 0;
        }
        else { // upper triangle, YX order: (0,0)->(0,1)->(1,1)
            i1 = 0;
            j1 = 1;
        }
        // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and
        // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where
        // c = (3-sqrt(3))/6
        const x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords
        const y1 = y0 - j1 + G2;
        const x2 = x0 - 1 + 2 * G2; // Offsets for last corner in (x,y) unskewed coords
        const y2 = y0 - 1 + 2 * G2;
        // Work out the hashed gradient indices of the three simplex corners
        i &= 255;
        j &= 255;
        const gi0 = gradP[i + perm[j]];
        const gi1 = gradP[i + i1 + perm[j + j1]];
        const gi2 = gradP[i + 1 + perm[j + 1]];
        // Calculate the contribution from the three corners
        let t0 = 0.5 - x0 * x0 - y0 * y0;
        if (t0 < 0) {
            n0 = 0;
        }
        else {
            t0 *= t0;
            n0 = t0 * t0 * gi0.dot2(x0, y0); // (x,y) of grad3 used for 2D gradient
        }
        let t1 = 0.5 - x1 * x1 - y1 * y1;
        if (t1 < 0) {
            n1 = 0;
        }
        else {
            t1 *= t1;
            n1 = t1 * t1 * gi1.dot2(x1, y1);
        }
        let t2 = 0.5 - x2 * x2 - y2 * y2;
        if (t2 < 0) {
            n2 = 0;
        }
        else {
            t2 *= t2;
            n2 = t2 * t2 * gi2.dot2(x2, y2);
        }
        // Add contributions from each corner to get the final noise value.
        // The result is scaled to return values in the interval [-1,1].
        return 70 * (n0 + n1 + n2);
    }
});
define("src/Heightfield/Brush", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("src/Heightfield/ColorPainterShaders", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fragmentInvertShader = exports.fragmentShader = exports.factorMethod = exports.vertexShader = void 0;
    exports.vertexShader = `
    attribute vec3 aPosition;
    attribute vec2 aUv0;

    uniform mat4 matrix_model;
    uniform mat4 matrix_viewProjection;

    varying vec2 vUv0;

    void main(void)
    {
        vUv0 = aUv0;
        gl_Position = matrix_viewProjection * matrix_model * vec4(aPosition, 1.0);
    }
`;
    exports.factorMethod = `
    varying vec2 vUv0;

    uniform sampler2D uHeightMap;
    uniform float uBrushOpacity;
    uniform vec4 uBrushMask;

    float getFactor() {
        vec4 heightMap = texture2D(uHeightMap, vUv0);
        float height   = (heightMap.r + heightMap.g + heightMap.b) / 3.0 / heightMap.a;
        float factor   = height * uBrushOpacity;
        return factor;
    }
`;
    exports.fragmentShader = `
    ${exports.factorMethod}

    void main(void)
    {
        float factor = getFactor();
        vec4 color = vec4(uBrushMask * factor);

        gl_FragColor = color;
    }
`;
    exports.fragmentInvertShader = `
    ${exports.factorMethod}

    void main(void)
    {
        float levels = 4.0;
        float factor = getFactor();
        vec4 color   = vec4(factor);

        if (uBrushMask.r > 0.0) { color.r = 0.0; levels -= 1.0; }
        if (uBrushMask.g > 0.0) { color.g = 0.0; levels -= 1.0; }
        if (uBrushMask.b > 0.0) { color.b = 0.0; levels -= 1.0; }
        if (uBrushMask.a > 0.0) { color.a = 0.0; levels -= 1.0; }

        gl_FragColor = color / levels;
    }
`;
});
define("src/Heightfield/ColorPainter", ["require", "exports", "src/Heightfield/ColorPainterShaders", "src/Extras/Utils"], function (require, exports, ColorPainterShaders_mjs_1, Utils_mjs_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.painterCameraFar = void 0;
    exports.painterCameraFar = 10;
    class ColorPainter {
        get painting() { return this._painting; }
        get cameraFar() { return exports.painterCameraFar; }
        get background() { return this._buffer; }
        constructor(app, buffer, layerName) {
            this._painting = false;
            this._painterMask = new Float32Array(4);
            this._layerName = layerName;
            this._buffer = buffer;
            this._app = app;
            this._initCamera();
            this._initShaders();
            this._initMaterials();
            this._initEntities();
        }
        _initCamera() {
            const painterLayer = this._app.scene.layers.getLayerByName(this._layerName);
            this._painterRenderTarget = new pc.RenderTarget({
                colorBuffer: this._buffer,
                flipY: this._app.graphicsDevice.isWebGPU,
                depth: false,
            });
            this._painterCameraEntity = new pc.Entity('TerrainPainterCamera');
            this._painterCameraEntity.setLocalPosition(0, 0, exports.painterCameraFar);
            this._painterCameraEntity.lookAt(0, 0, 0);
            this._painterCameraEntity.addComponent('camera', {
                projection: pc.PROJECTION_ORTHOGRAPHIC,
                clearColorBuffer: false,
                clearDepthBuffer: false,
                priority: -1,
                layers: [painterLayer.id],
                nearClip: 0.1,
                farClip: exports.painterCameraFar * 2,
                renderTarget: this._painterRenderTarget,
            });
            this._app.root.addChild(this._painterCameraEntity);
            this._painterCameraEntity.enabled = false;
            this._painterCameraEntity.camera.frustumCulling = false;
            this._painterCameraEntity.camera.orthoHeight = exports.painterCameraFar;
        }
        _initEntities() {
            const painterLayer = this._app.scene.layers.getLayerByName(this._layerName);
            painterLayer.transparentSortMode = pc.SORTMODE_MANUAL;
            this._painterEntity = new pc.Entity('TerrainBrushPainter');
            this._painterEntity.addComponent('render', {
                type: 'plane',
                layers: [painterLayer.id],
                material: this._painterMaterial,
                castShadows: false,
                castShadowsLightmap: false,
                receiveShadows: false
            });
            this._painterInvertEntity = new pc.Entity('TerrainBrushPainterInvert');
            this._painterInvertEntity.addComponent('render', {
                type: 'plane',
                layers: [painterLayer.id],
                material: this._painterInvertMaterial,
                castShadows: false,
                castShadowsLightmap: false,
                receiveShadows: false,
            });
            this._painterEntity.render.meshInstances[0].drawOrder = 1;
            this._painterInvertEntity.render.meshInstances[0].drawOrder = 0;
            this._app.root.addChild(this._painterInvertEntity);
            this._app.root.addChild(this._painterEntity);
            this._painterInvertEntity.setLocalEulerAngles(90, 0, 0);
            this._painterEntity.setLocalEulerAngles(90, 0, 0);
            this._painterInvertEntity.enabled = false;
            this._painterEntity.enabled = false;
        }
        _initShaders() {
            const vertex = ColorPainterShaders_mjs_1.vertexShader;
            const fragment = (0, Utils_mjs_4.setPrecision)(this._app.graphicsDevice, ColorPainterShaders_mjs_1.fragmentShader);
            const fragmentInvert = (0, Utils_mjs_4.setPrecision)(this._app.graphicsDevice, ColorPainterShaders_mjs_1.fragmentInvertShader);
            if (pc.ShaderMaterial) {
                this._painterMaterial = new pc.ShaderMaterial({
                    uniqueName: 'TerrainPainterFragmentShader',
                    vertexGLSL: vertex,
                    fragmentGLSL: fragment,
                    attributes: {
                        aPosition: pc.SEMANTIC_POSITION,
                        aUv0: pc.SEMANTIC_TEXCOORD0
                    }
                });
                this._painterInvertMaterial = new pc.ShaderMaterial({
                    uniqueName: 'TerrainPainterInvertFragmentShader',
                    vertexGLSL: vertex,
                    fragmentGLSL: fragmentInvert,
                    attributes: {
                        aPosition: pc.SEMANTIC_POSITION,
                        aUv0: pc.SEMANTIC_TEXCOORD0
                    }
                });
                return;
            }
            this._painterShader = pc.createShaderFromCode(this._app.graphicsDevice, vertex, fragment, 'TerrainPainterFragmentShader', {
                aPosition: pc.SEMANTIC_POSITION,
                aUv0: pc.SEMANTIC_TEXCOORD0
            });
            this._painterInvertShader = pc.createShaderFromCode(this._app.graphicsDevice, vertex, fragmentInvert, 'TerrainPainterInvertFragmentShader', {
                aPosition: pc.SEMANTIC_POSITION,
                aUv0: pc.SEMANTIC_TEXCOORD0
            });
        }
        _initMaterials() {
            // Engine v1 not support ShaderMaterial
            // use old methods
            if (!pc.ShaderMaterial) {
                this._painterMaterial = new pc.Material();
                this._painterInvertMaterial = new pc.Material();
                /* @ts-ignore */
                this._painterMaterial.shader = this._painterShader;
                /* @ts-ignore */
                this._painterInvertMaterial.shader = this._painterInvertShader;
            }
            this._painterMaterial.name = 'BrushPainterMaterial';
            this._painterMaterial.blendType = pc.BLEND_ADDITIVE;
            this._painterMaterial.update();
            this._painterInvertMaterial.name = 'BrushPainterInvertMaterial';
            this._painterInvertMaterial.blendType = pc.BLEND_SUBTRACTIVE;
            this._painterInvertMaterial.update();
        }
        _updateRuntimeSettings(dt) {
            const originalOpacity = this._brushSettings.opacity;
            const opacity = originalOpacity;
            this._painterMaterial.setParameter('uBrushOpacity', opacity);
            this._painterInvertMaterial.setParameter('uBrushOpacity', opacity);
        }
        _updatePositionAndScale(x, y, scaleWidth, scaleHeight) {
            const far = this.cameraFar * 2;
            const ration = this.background.width / this.background.height;
            x = x * far * ration - this.cameraFar * ration;
            y = y * far - this.cameraFar;
            scaleWidth = scaleWidth * this.background.width / far / 2.5;
            scaleHeight = scaleHeight * this.background.height / far / 2.5;
            this._setScale(scaleWidth, scaleHeight);
            this._setPosition(x, y);
        }
        startPaint(dt, x, y, scaleWidth, scaleHeight) {
            this._updateRuntimeSettings(dt);
            this._updatePositionAndScale(x, y, scaleWidth, scaleHeight);
            this._painting = true;
            this._painterInvertEntity.enabled = true;
            this._painterEntity.enabled = true;
            this._painterCameraEntity.enabled = true;
        }
        stopPaint() {
            this._painting = false;
            this._painterInvertEntity.enabled = false;
            this._painterEntity.enabled = false;
            this._painterCameraEntity.enabled = false;
        }
        _setScale(x, y) {
            this._painterEntity.setLocalScale(x, 1, y);
            this._painterInvertEntity.setLocalScale(x, 1, y);
        }
        _setPosition(x, y) {
            this._painterEntity.setLocalPosition(x, y, 0);
            this._painterInvertEntity.setLocalPosition(x, y, 0);
        }
        updateSettings(brushSettings, activeLayer) {
            this._painterMask.fill(0);
            if (activeLayer > 0) {
                this._painterMask[activeLayer - 1] = 1;
            }
            const brushTexture = brushSettings.textures[brushSettings.active].resource;
            this._painterMaterial.setParameter('uBrushMask', this._painterMask);
            this._painterMaterial.setParameter('uHeightMap', brushTexture);
            this._painterInvertMaterial.setParameter('uBrushMask', this._painterMask);
            this._painterInvertMaterial.setParameter('uHeightMap', brushTexture);
            this._brushSettings = brushSettings;
        }
    }
    exports.default = ColorPainter;
});
define("src/Heightfield/IPatchInstancing", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.updateBuffer = updateBuffer;
    function updateBuffer(vertexBuffer, data, length) {
        if (vertexBuffer) {
            const device = vertexBuffer.device;
            if (device.isWebGL2) {
                const gl = device.gl;
                gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer.impl.bufferId);
                gl.bufferSubData(gl.ARRAY_BUFFER, 0, data, 0, length);
            }
            else if (device.isWebGPU) {
                const wgpu = device.wgpu;
                const buffer = vertexBuffer.impl.buffer;
                wgpu.queue.writeBuffer(buffer, 0, data, 0, length);
            }
            else {
                console.error('Unsupported device');
            }
        }
    }
});
define("src/Heightfield/PatchCombineInstancing", ["require", "exports", "src/Core/PatchCombineInstancing", "src/Heightfield/IPatchInstancing"], function (require, exports, PatchCombineInstancing_mjs_1, IPatchInstancing_mjs_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    PatchCombineInstancing_mjs_1 = __importStar(PatchCombineInstancing_mjs_1);
    class PatchCombineInstancing extends PatchCombineInstancing_mjs_1.default {
        constructor() {
            super(...arguments);
            this.bufferType = PatchCombineInstancing_mjs_1.TComInstCoordsOffsetArrType;
            this.itemBufferSize = 4;
        }
        get meshInstanceCount() { return this.data.length * PatchCombineInstancing_mjs_1.combineGroupLen; }
        appendMeshInstances(arr, offset = 0) {
            let meshIndex = 0;
            for (let c = 0; c < this.data.length; c++) {
                for (let i = 0; i < PatchCombineInstancing_mjs_1.combineGroupLen; i++) {
                    const chunk = this.data[c].groups[i];
                    if (chunk.object) {
                        arr[meshIndex++ + offset] = chunk.object;
                    }
                }
            }
            return meshIndex;
        }
        begin(castShadow = false, receiveShadow = false) {
            for (let c = 0; c < this.data.length; c++) {
                for (let i = 0; i < PatchCombineInstancing_mjs_1.combineGroupLen; i++) {
                    const chunk = this.data[c].groups[i];
                    const chunkObject = chunk.object;
                    chunk.count = 0;
                    chunk.hasChanges = false;
                    if (chunkObject) {
                        chunkObject.visible = false;
                        chunkObject.castShadow = castShadow;
                        chunkObject.receiveShadow = receiveShadow;
                    }
                }
            }
        }
        end() {
            for (let c = 0; c < this.data.length; c++) {
                for (let i = 0; i < PatchCombineInstancing_mjs_1.combineGroupLen; i++) {
                    const chunk = this.data[c].groups[i];
                    const chunkObject = chunk.object;
                    if (chunkObject && chunk.count > 0) {
                        chunkObject.instancingCount = chunk.count;
                        if (chunk.hasChanges && chunkObject.instancingData) {
                            // TODO: performance improvement
                            //chunkObject.instancingData.vertexBuffer?.unlock();
                            const length = chunk.count * PatchCombineInstancing_mjs_1.comInstDataSize;
                            const vertexBuffer = chunkObject.instancingData.vertexBuffer;
                            (0, IPatchInstancing_mjs_1.updateBuffer)(vertexBuffer, chunk.data, length);
                        }
                    }
                }
            }
        }
    }
    exports.default = PatchCombineInstancing;
});
define("src/Heightfield/PatchInstancing", ["require", "exports", "src/Core/LodInfo", "src/Core/PatchInstancing", "src/Heightfield/IPatchInstancing"], function (require, exports, LodInfo_mjs_4, PatchInstancing_mjs_1, IPatchInstancing_mjs_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class PatchInstancing extends PatchInstancing_mjs_1.PatchInstancing {
        constructor() {
            super(...arguments);
            this.bufferType = PatchInstancing_mjs_1.TInstCoordsOffsetArrType;
            this.itemBufferSize = 2;
        }
        get meshInstanceCount() { return this.data.length * LodInfo_mjs_4.LEFT * LodInfo_mjs_4.RIGHT * LodInfo_mjs_4.TOP * LodInfo_mjs_4.BOTTOM; }
        appendMeshInstances(arr, offset = 0) {
            let i = 0;
            for (let c = 0; c < this.data.length; c++) {
                for (let l = 0; l < LodInfo_mjs_4.LEFT; l++) {
                    for (let r = 0; r < LodInfo_mjs_4.RIGHT; r++) {
                        for (let t = 0; t < LodInfo_mjs_4.TOP; t++) {
                            for (let b = 0; b < LodInfo_mjs_4.BOTTOM; b++) {
                                const chunk = this.data[c][l][r][t][b];
                                if (chunk.object) {
                                    arr[i++ + offset] = chunk.object;
                                }
                            }
                        }
                    }
                }
            }
            return i;
        }
        begin(castShadow = false, receiveShadow = false) {
            for (let c = 0; c < this.data.length; c++) {
                for (let l = 0; l < LodInfo_mjs_4.LEFT; l++) {
                    for (let r = 0; r < LodInfo_mjs_4.RIGHT; r++) {
                        for (let t = 0; t < LodInfo_mjs_4.TOP; t++) {
                            for (let b = 0; b < LodInfo_mjs_4.BOTTOM; b++) {
                                const chunk = this.data[c][l][r][t][b];
                                const chunkObject = chunk.object;
                                chunk.count = 0;
                                chunk.hasChanges = false;
                                if (chunkObject) {
                                    chunkObject.visible = false;
                                    chunkObject.castShadow = castShadow;
                                    chunkObject.receiveShadow = receiveShadow;
                                }
                            }
                        }
                    }
                }
            }
        }
        end() {
            for (let c = 0; c < this.data.length; c++) {
                for (let l = 0; l < LodInfo_mjs_4.LEFT; l++) {
                    for (let r = 0; r < LodInfo_mjs_4.RIGHT; r++) {
                        for (let t = 0; t < LodInfo_mjs_4.TOP; t++) {
                            for (let b = 0; b < LodInfo_mjs_4.BOTTOM; b++) {
                                const chunk = this.data[c][l][r][t][b];
                                const chunkObject = chunk.object;
                                if (chunkObject && chunk.count > 0) {
                                    chunkObject.instancingCount = chunk.count;
                                    if (chunk.hasChanges && chunkObject.instancingData) {
                                        // TODO: performance improvement
                                        //chunkObject.instancingData.vertexBuffer?.unlock();
                                        const length = chunk.count * PatchInstancing_mjs_1.instDataSize;
                                        const vertexBuffer = chunkObject.instancingData.vertexBuffer;
                                        (0, IPatchInstancing_mjs_2.updateBuffer)(vertexBuffer, chunk.data, length);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    exports.default = PatchInstancing;
});
define("src/Heightfield/GPUHeightMapBuffer", ["require", "exports", "src/Extras/Utils", "src/Core/CompressedPatchedHeightMap", "src/Core/SquareIterator", "src/Heightfield/ShaderChunks"], function (require, exports, Utils_mjs_5, CompressedPatchedHeightMap_mjs_1, SquareIterator_mjs_1, ShaderChunks_mjs_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getHeightMapFormat = getHeightMapFormat;
    exports.getHeightMapChunkBufferType = getHeightMapChunkBufferType;
    CompressedPatchedHeightMap_mjs_1 = __importDefault(CompressedPatchedHeightMap_mjs_1);
    SquareIterator_mjs_1 = __importDefault(SquareIterator_mjs_1);
    class GPUHeightMapBuffer extends SquareIterator_mjs_1.default {
        get app() { return this._app; }
        get format() { return this._format; }
        get texture() { return this._texture; }
        constructor(app, field) {
            super(field);
            this._app = app;
            this._init();
        }
        destroy() {
            var _a;
            (_a = this._texture) === null || _a === void 0 ? void 0 : _a.destroy();
        }
        _init() {
            var _a;
            (_a = this._texture) === null || _a === void 0 ? void 0 : _a.destroy();
            const device = this._app.graphicsDevice;
            const heightFormat = getHeightMapFormat(device, this.field.heightMap);
            const format = (0, ShaderChunks_mjs_2.getTextureType)(heightFormat);
            const bufFormat = getHeightMapChunkBufferType(device, format);
            const dataChunkSize = this.field.heightMap.dataChunkSize;
            const chunks = this.field.heightMap.getChunksBuffers(bufFormat);
            this._format = heightFormat;
            this._textureLevelsType = bufFormat;
            this._texture = new pc.Texture(device, {
                width: dataChunkSize,
                height: dataChunkSize,
                format: format,
                mipmaps: false,
                minFilter: pc.FILTER_NEAREST,
                magFilter: pc.FILTER_NEAREST,
                addressU: pc.ADDRESS_CLAMP_TO_EDGE,
                addressV: pc.ADDRESS_CLAMP_TO_EDGE,
                addressW: pc.ADDRESS_CLAMP_TO_EDGE,
                flipY: device.isWebGPU,
                arrayLength: chunks.length,
                levels: [chunks]
            });
        }
        updateHeightMapChunk(chunkX, chunkZ) {
            // The height map is updated by updating the entire chunk,
            // which is sufficient if the chunk size is not large.
            const dataChunkSize = this.field.heightMap.dataChunkSize;
            const level = this.field.heightMap.getChunkIndex(chunkX, chunkZ);
            const buffer = this.field.heightMap.getChunkBuffer(this._textureLevelsType, chunkX, chunkZ);
            if (this._app.graphicsDevice.isWebGL2) {
                const gl = this._app.graphicsDevice.gl;
                const textureFormat = this._texture.impl._glFormat;
                const texturePixelT = this._texture.impl._glPixelType;
                const textureTarget = this._texture.impl._glTarget;
                const textureObject = this._texture.impl._glTexture;
                gl.bindTexture(textureTarget, textureObject);
                gl.texSubImage3D(gl.TEXTURE_2D_ARRAY, 0, 0, 0, level, dataChunkSize, dataChunkSize, 1, textureFormat, texturePixelT, buffer);
            }
            else if (this._app.graphicsDevice.isWebGPU) {
                const webgpu = this._app.graphicsDevice.wgpu;
                const texture = (this._texture.impl.gpuTexture);
                webgpu.queue.writeTexture({
                    texture: texture,
                    origin: [0, 0, level]
                }, buffer, {
                    offset: 0,
                    bytesPerRow: dataChunkSize * 4, // always 4 for rgba format
                    rowsPerImage: dataChunkSize
                }, {
                    width: dataChunkSize,
                    height: dataChunkSize
                });
            }
        }
        updateHeightMap(zone) {
            // Ignore update if height map need upload
            if (this._texture._needsUpload) {
                return;
            }
            this._forEach(zone, this.field.heightMap.dataChunkSize, this.field.heightMap.dataNumChunksX, this.field.heightMap.dataNumChunksZ, (patchIndex, x, z) => {
                this.updateHeightMapChunk(x, z);
            });
        }
    }
    exports.default = GPUHeightMapBuffer;
    function getHeightMapFormat(graphicsDevice, heightMap) {
        let hmFormat = (0, Utils_mjs_5.checkSupportR32FTexture)(graphicsDevice) ? 'r32f' : 'rgba';
        if (heightMap instanceof CompressedPatchedHeightMap_mjs_1.default) {
            hmFormat = heightMap.compressAlgoritm === 'x4' ? 'rgbaX4' : 'rgbaX2';
        }
        return hmFormat;
    }
    function getHeightMapChunkBufferType(graphicsDevice, format) {
        if (format === pc.PIXELFORMAT_R32F) {
            return Float32Array;
        }
        if (format === pc.PIXELFORMAT_RG16U) {
            return Uint16Array;
        }
        if (format === pc.PIXELFORMAT_RGBA8U) {
            return Uint8Array;
        }
        throw new Error('Unsupported format');
    }
});
define("src/Heightfield/GPUBuffersManager", ["require", "exports", "src/Core/CoordsBuffer"], function (require, exports, CoordsBuffer_mjs_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class GPUBuffersManager {
        get heightMap() { return this._heightMap; }
        get sharedIndexBuffer() { return this._sharedIndexBuffer; }
        get sharedVertexBuffer() { return this._sharedVertexBuffer; }
        constructor(heightMap) {
            this._heightMap = heightMap;
            this.updateIndexBuffer();
            this.updateVertexBuffer();
        }
        destroy() {
            var _a, _b;
            (_a = this._sharedIndexBuffer) === null || _a === void 0 ? void 0 : _a.destroy();
            (_b = this._sharedVertexBuffer) === null || _b === void 0 ? void 0 : _b.destroy();
        }
        _buildVertexFormat(graphicsDevice, vertexBuffer) {
            const coordsFormat = (vertexBuffer.patchVertexBufferTyped instanceof Uint8Array) ? pc.TYPE_UINT8 : pc.TYPE_UINT16;
            const vertexDesc = [{
                    semantic: pc.SEMANTIC_POSITION,
                    components: CoordsBuffer_mjs_2.coordsVertexSize,
                    type: coordsFormat,
                    normalize: false,
                    asInt: true
                }];
            return new pc.VertexFormat(graphicsDevice, vertexDesc, vertexBuffer.patchVertexBufferLength);
        }
        updateIndexBuffer() {
            var _a;
            const graphicsDevice = this._heightMap.app.graphicsDevice;
            const patchIndices = this._heightMap.field.patchIndices;
            (_a = this._sharedIndexBuffer) === null || _a === void 0 ? void 0 : _a.destroy();
            this._sharedIndexBuffer = new pc.IndexBuffer(graphicsDevice, pc.INDEXFORMAT_UINT32, patchIndices.length, pc.BUFFER_STATIC, patchIndices, { storage: false });
        }
        updateVertexBuffer() {
            var _a;
            const graphicsDevice = this._heightMap.app.graphicsDevice;
            const coordBuffer = this._heightMap.field.patchVertices;
            const bufferData = coordBuffer.patchVertexBufferData;
            const format = this._buildVertexFormat(graphicsDevice, coordBuffer);
            (_a = this._sharedVertexBuffer) === null || _a === void 0 ? void 0 : _a.destroy();
            this._sharedVertexBuffer = new pc.VertexBuffer(graphicsDevice, format, format.vertexCount, {
                usage: pc.BUFFER_STATIC,
                storage: false,
                data: bufferData,
            });
        }
        _buildInstancingVertexFormat(instancer) {
            const graphicsDevice = this._heightMap.app.graphicsDevice;
            const type = instancer.bufferType === Uint16Array ? pc.TYPE_UINT16 :
                instancer.bufferType === Uint8Array ? pc.TYPE_UINT8 :
                    pc.TYPE_FLOAT32;
            return new pc.VertexFormat(graphicsDevice, [{
                    semantic: pc.SEMANTIC_ATTR10,
                    components: instancer.itemBufferSize,
                    type: type,
                    normalize: false,
                    asInt: true
                }]);
        }
        buildInstancingVertexBuffer(instancer, data) {
            const vertexFormat = this._buildInstancingVertexFormat(instancer);
            const numVertices = data.length / instancer.itemBufferSize;
            return new pc.VertexBuffer(vertexFormat.device, vertexFormat, numVertices, {
                usage: pc.BUFFER_GPUDYNAMIC,
                data: data,
                storage: false,
            });
        }
    }
    exports.default = GPUBuffersManager;
});
define("src/Heightfield/GPUWireframeBuffersManager", ["require", "exports", "src/Core/LodInfo"], function (require, exports, LodInfo_mjs_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const offsets = [[0, 1], [1, 2], [2, 0]];
    class GPUWireframeBufferManager {
        get lodInfo() { return this._lodInfo; }
        get buffersManager() { return this._byffersManager; }
        constructor(byffersManager, lodInfo) {
            this._byffersManager = byffersManager;
            this._lodInfo = lodInfo;
            this._fillBuffers();
        }
        _fillBuffers() {
            this._data = new Array(this._lodInfo.length);
            for (let lodCore = 0; lodCore < this._data.length; lodCore++) {
                const arr = new Array(LodInfo_mjs_5.LEFT);
                for (let l = 0; l < LodInfo_mjs_5.LEFT; l++) {
                    arr[l] = new Array(LodInfo_mjs_5.RIGHT);
                    for (let r = 0; r < LodInfo_mjs_5.RIGHT; r++) {
                        arr[l][r] = new Array(LodInfo_mjs_5.TOP);
                        for (let t = 0; t < LodInfo_mjs_5.TOP; t++) {
                            arr[l][r][t] = new Array(LodInfo_mjs_5.BOTTOM);
                            for (let b = 0; b < LodInfo_mjs_5.BOTTOM; b++) {
                                arr[l][r][t][b] = {
                                    buffer: null,
                                    primitive: {
                                        type: pc.PRIMITIVE_LINES,
                                        base: 0,
                                        baseVertex: 0,
                                        count: 0,
                                        indexed: true
                                    }
                                };
                            }
                        }
                    }
                }
                this._data[lodCore] = arr;
            }
        }
        _recreateWireframeData(lod) {
            var _a;
            const lodInfo = this._lodInfo[lod.core].info[lod.left][lod.right][lod.top][lod.bottom];
            const bufferScope = this._data[lod.core][lod.left][lod.right][lod.top][lod.bottom];
            (_a = bufferScope.buffer) === null || _a === void 0 ? void 0 : _a.destroy();
            const indexBuffer = this._byffersManager.sharedIndexBuffer;
            const numVertices = this._byffersManager.sharedVertexBuffer.numVertices;
            const base = lodInfo.start;
            const count = lodInfo.count;
            const srcIndices = new Uint32Array(indexBuffer.storage);
            const tmpIndices = [];
            const seen = new Set();
            for (let j = base; j < base + count; j += 3) {
                for (let k = 0; k < 3; k++) {
                    const i1 = srcIndices[j + offsets[k][0]];
                    const i2 = srcIndices[j + offsets[k][1]];
                    const hash = (i1 > i2) ? ((i2 * numVertices) + i1) : ((i1 * numVertices) + i2);
                    if (!seen.has(hash)) {
                        seen.add(hash);
                        tmpIndices.push(i1, i2);
                    }
                }
            }
            const dstIndices = new Uint32Array(tmpIndices);
            bufferScope.primitive.count = dstIndices.length;
            bufferScope.buffer = new pc.IndexBuffer(indexBuffer.device, pc.INDEXFORMAT_UINT32, dstIndices.length, pc.BUFFER_STATIC, dstIndices, { storage: false });
        }
        _getOrCreateWireframeData(lod) {
            const bufferScope = this._data[lod.core][lod.left][lod.right][lod.top][lod.bottom];
            if (!bufferScope.buffer) {
                this._recreateWireframeData(lod);
            }
            return bufferScope;
        }
        get(lod) {
            return this._getOrCreateWireframeData(lod);
        }
        freeData(lod) {
            var _a;
            const bufferScope = this._data[lod.core][lod.left][lod.right][lod.top][lod.bottom];
            (_a = bufferScope.buffer) === null || _a === void 0 ? void 0 : _a.destroy();
            bufferScope.buffer = null;
        }
        free() {
            for (let core = 0; core < this._data.length; core++) {
                for (let left = 0; left < LodInfo_mjs_5.LEFT; left++) {
                    for (let right = 0; right < LodInfo_mjs_5.RIGHT; right++) {
                        for (let top = 0; top < LodInfo_mjs_5.TOP; top++) {
                            for (let bottom = 0; bottom < LodInfo_mjs_5.BOTTOM; bottom++) {
                                this.freeData({ core, left, right, top, bottom });
                            }
                        }
                    }
                }
            }
        }
        destroy() {
            this.free();
        }
    }
    exports.default = GPUWireframeBufferManager;
});
define("src/Heightfield/MeshInstanceFactory", ["require", "exports", "src/Heightfield/ShaderChunks", "src/Heightfield/PatchCombineInstancing", "src/Heightfield/PatchInstancing"], function (require, exports, ShaderChunks_mjs_3, PatchCombineInstancing_mjs_2, PatchInstancing_mjs_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    PatchCombineInstancing_mjs_2 = __importDefault(PatchCombineInstancing_mjs_2);
    PatchInstancing_mjs_2 = __importDefault(PatchInstancing_mjs_2);
    class MeshInstanceFactory {
        get aabb() { return this._aabb; }
        get buffersManager() { return this._buffersManager; }
        get wireframeBuffersManager() { return this._wireframeBuffersManager; }
        constructor(buffersManager, wireframeBuffersManager) {
            this._aabb = new pc.BoundingBox();
            this._buffersManager = buffersManager;
            this._wireframeBuffersManager = wireframeBuffersManager;
            this.updateAabb();
        }
        updateAabb() {
            const field = this._buffersManager.heightMap.field;
            const halfWidth = field.width / 2;
            const halfDepth = field.depth / 2;
            this._aabb.setMinMax(new pc.Vec3(-halfWidth, 0, -halfDepth), new pc.Vec3(+halfWidth, field.maxHeight, +halfDepth));
        }
        createInstancingMesh(entity, material, lodInfo, primitiveInfo, instancer, data) {
            const graphicsDevice = this._buffersManager.heightMap.app.graphicsDevice;
            const patchMesh = new pc.Mesh(graphicsDevice);
            const primitive = patchMesh.primitive[0];
            const instancingBuf = this._buffersManager.buildInstancingVertexBuffer(instancer, data);
            patchMesh.aabb = this.aabb;
            patchMesh.indexBuffer[0] = this._buffersManager.sharedIndexBuffer;
            patchMesh.vertexBuffer = this._buffersManager.sharedVertexBuffer;
            primitive.type = pc.PRIMITIVE_TRIANGLES;
            primitive.base = primitiveInfo.start;
            primitive.count = primitiveInfo.count;
            primitive.indexed = true;
            const patchMeshInstance = new pc.MeshInstance(patchMesh, material, entity);
            patchMeshInstance.cull = false;
            patchMeshInstance.visible = false;
            patchMeshInstance.visibleThisFrame = false;
            patchMeshInstance.castShadow = false;
            patchMeshInstance.receiveShadow = false;
            patchMeshInstance.setParameter(ShaderChunks_mjs_3.patchLodCoreParamName, lodInfo.core, 0xffffffff);
            patchMeshInstance.setInstancing(instancingBuf, false);
            patchMeshInstance.setCustomAabb(this.aabb);
            return patchMeshInstance;
        }
        createPatchMesh(patchIndex, entity, material) {
            const field = this._buffersManager.heightMap.field;
            const graphicsDevice = this._buffersManager.heightMap.app.graphicsDevice;
            const patchMesh = new pc.Mesh(graphicsDevice);
            const primitive = patchMesh.primitive[0];
            patchMesh.aabb = this.aabb;
            patchMesh.indexBuffer[0] = this._buffersManager.sharedIndexBuffer;
            patchMesh.vertexBuffer = this._buffersManager.sharedVertexBuffer;
            primitive.type = pc.PRIMITIVE_TRIANGLES;
            primitive.base = 0;
            primitive.count = 0;
            primitive.indexed = true;
            const patchMeshInstance = new pc.MeshInstance(patchMesh, material, entity);
            patchMeshInstance.cull = false;
            patchMeshInstance.visible = false;
            patchMeshInstance.visibleThisFrame = false;
            patchMeshInstance.castShadow = false;
            patchMeshInstance.receiveShadow = false;
            const patchX = patchIndex % field.numPatchesX;
            const patchZ = patchIndex / field.numPatchesX | 0;
            const minX = patchX * (field.patchSize - 1);
            const minZ = patchZ * (field.patchSize - 1);
            patchMeshInstance.setParameter(ShaderChunks_mjs_3.patchCoordOffsetParamName, [minX, minZ], 0xffffffff);
            patchMeshInstance.setInstancing(null);
            patchMeshInstance.setCustomAabb(this.aabb);
            return patchMeshInstance;
        }
        destroyMesh(meshInstance) {
            var _a, _b, _c, _d;
            // dont destroy shared index and vertex buffers and wireframe shared index buffer
            if (meshInstance.mesh) {
                meshInstance.mesh.indexBuffer = [null];
                meshInstance.mesh.vertexBuffer = null;
            }
            meshInstance.destroy();
            (_a = meshInstance.mesh) === null || _a === void 0 ? void 0 : _a.destroy();
            if (meshInstance.instancingData) {
                (_c = (_b = meshInstance.instancingData).destroy) === null || _c === void 0 ? void 0 : _c.call(_b);
                (_d = meshInstance.instancingData.vertexBuffer) === null || _d === void 0 ? void 0 : _d.destroy();
            }
        }
        bindDependenciesToMaterial(instancing, material, update = true) {
            var _a;
            const heightMapBuffer = this._buffersManager.heightMap;
            const instancingType = instancing instanceof PatchCombineInstancing_mjs_2.default ? 'combine' :
                instancing instanceof PatchInstancing_mjs_2.default ? 'simple' :
                    false;
            material.setAttribute(ShaderChunks_mjs_3.patchInstCoordOffsetAttrName, pc.SEMANTIC_ATTR10);
            material.setAttribute(ShaderChunks_mjs_3.vertexCoordAttrName, pc.SEMANTIC_POSITION);
            material.setParameter(ShaderChunks_mjs_3.heightMapParamName, heightMapBuffer.texture);
            material.setParameter(ShaderChunks_mjs_3.patchLodCoreParamName, 0);
            if (instancingType) {
                material.deleteParameter(ShaderChunks_mjs_3.patchCoordOffsetParamName);
            }
            else {
                material.setParameter(ShaderChunks_mjs_3.patchCoordOffsetParamName, [0, 0]);
            }
            const pcVersion = `v${pc.version[0]}`;
            const field = heightMapBuffer.field;
            const chunksStore = (0, ShaderChunks_mjs_3.getFieldShaderChunks)({
                width: field.width,
                depth: field.depth,
                patchSize: field.patchSize,
                heightMapChunkSize: field.heightMap.dataChunkSize,
                heightMapFormat: heightMapBuffer.format,
                engineVersion: pcVersion,
                instancing: instancingType,
            });
            const chunkNames = Object.keys(chunksStore);
            const shaderChunks = (_a = material.getShaderChunks) === null || _a === void 0 ? void 0 : _a.call(material, pc.SHADERLANGUAGE_GLSL);
            if (shaderChunks) {
                for (let chunkName of chunkNames) {
                    shaderChunks.set(chunkName, chunksStore[chunkName]);
                }
                material.shaderChunksVersion = pc.CHUNKAPI_1_70;
            }
            else {
                const chunks = material.chunks;
                for (let chunkName of chunkNames) {
                    chunks[chunkName] = chunksStore[chunkName];
                }
                chunks.APIVersion = pc.CHUNKAPI_1_70;
            }
            if (update) {
                material.update();
            }
        }
    }
    exports.default = MeshInstanceFactory;
});
define("src/Heightfield/EntityPatchesMesh", ["require", "exports", "src/Core/SquareIterator", "src/Heightfield/PatchCombineInstancing", "src/Heightfield/PatchInstancing", "src/Heightfield/ShaderChunks"], function (require, exports, SquareIterator_mjs_2, PatchCombineInstancing_mjs_3, PatchInstancing_mjs_3, ShaderChunks_mjs_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    SquareIterator_mjs_2 = __importDefault(SquareIterator_mjs_2);
    PatchCombineInstancing_mjs_3 = __importDefault(PatchCombineInstancing_mjs_3);
    PatchInstancing_mjs_3 = __importDefault(PatchInstancing_mjs_3);
    class EntityPatchesMesh extends SquareIterator_mjs_2.default {
        static createMaterial() {
            const material = new pc.StandardMaterial();
            material.name = "HeightfieldMaterial";
            material.setAttribute(ShaderChunks_mjs_4.patchInstCoordOffsetAttrName, pc.SEMANTIC_ATTR10);
            material.setAttribute(ShaderChunks_mjs_4.vertexCoordAttrName, pc.SEMANTIC_POSITION);
            return material;
        }
        get instancing() { return this._instancing; }
        get meshFactory() { return this._meshFactory; }
        get meshInstanceArray() { return this._meshInstanceArray; }
        get aabb() { return this._meshFactory.aabb; }
        get material() { return this._material; }
        get patchSize() { return this._patchSize; }
        get numPatchesX() { return this._numPatchesX; }
        get numPatchesZ() { return this._numPatchesZ; }
        constructor(meshFactory, entity) {
            super(meshFactory.buffersManager.heightMap.field);
            this._patchSize = this.field.patchSize;
            this._numPatchesX = this.field.numPatchesX;
            this._numPatchesZ = this.field.numPatchesZ;
            this._entity = entity;
            this._material = EntityPatchesMesh.createMaterial();
            this._meshFactory = meshFactory;
            this._patchAvalableCount = 0;
            this._changesIds = [];
            this._instancingType = false;
            this._prevUseMeshBag = false;
            this._meshInstanceArray = new Array(this._numPatchesX * this._numPatchesZ);
            this._meshFactory.bindDependenciesToMaterial(this.instancing, this._material, true);
        }
        _forceUpdateRenderComponent() {
            let append = false; // destroy prev meshInstances by default
            const count = this.instancing
                ? this.instancing.meshInstanceCount
                : this._patchAvalableCount;
            const meshInstances = new Array(count);
            if (this.instancing) {
                this.instancing.appendMeshInstances(meshInstances);
            }
            else {
                // if instancing was used, then we delete all previous instances
                // or use custom renderer
                append = !this._prevUseMeshBag;
                let i = 0;
                for (let patchIndex = 0; patchIndex < this._meshInstanceArray.length; patchIndex++) {
                    const patchMeshInstance = this._meshInstanceArray[patchIndex];
                    if (patchMeshInstance) {
                        meshInstances[i++] = patchMeshInstance;
                    }
                }
                this._changesIds.length = 0;
            }
            this._prevUseMeshBag = !!this.instancing;
            if (this._entity.render) {
                // TODO: https://github.com/playcanvas/engine/issues/6680
                if (append) {
                    this._entity.render._meshInstances.length = 0;
                }
                this._entity.render.meshInstances = meshInstances;
            }
            else {
                // TODO: add custom layers
                this._entity.addComponent('render', {
                    meshInstances: meshInstances
                });
            }
            // Update default values
            for (const meshInstance of meshInstances) {
                meshInstance.cull = false;
                meshInstance.castShadow = false;
                meshInstance.receiveShadow = false;
            }
        }
        updateAabb() {
            for (const meshInstance of this._meshInstanceArray) {
                if (meshInstance) {
                    meshInstance.setCustomAabb(this._meshFactory.aabb);
                    meshInstance.mesh.aabb = this._meshFactory.aabb;
                }
            }
            if (this.instancing) {
                this.instancing.forEach(item => {
                    if (item.object) {
                        item.object.setCustomAabb(this._meshFactory.aabb);
                        item.object.mesh.aabb = this._meshFactory.aabb;
                    }
                });
            }
        }
        updateRenderComponent() {
            if (this.instancing || this._changesIds.length === 0 || !this._entity.enabled) {
                return;
            }
            this._forceUpdateRenderComponent();
        }
        _addPatchMeshInstance(patchIndex, meshInstance) {
            if (this._meshInstanceArray[patchIndex]) {
                throw new Error('Mesh instance has already been added');
            }
            this._meshInstanceArray[patchIndex] = meshInstance;
            this._changesIds.push(patchIndex);
            this._patchAvalableCount++;
        }
        getOrCreatePatchMesh(patchIndex) {
            let patch = this._meshInstanceArray[patchIndex];
            if (!patch) {
                patch = this._meshFactory.createPatchMesh(patchIndex, this._entity, this._material);
                this._addPatchMeshInstance(patchIndex, patch);
            }
            return patch;
        }
        destroyPatchMesh(patchIndex) {
            const patchMeshInstance = this._meshInstanceArray[patchIndex];
            if (patchMeshInstance) {
                this._meshFactory.destroyMesh(patchMeshInstance);
                this._patchAvalableCount--;
                this._changesIds.push(patchIndex);
                delete this._meshInstanceArray[patchIndex];
            }
        }
        destroyPatchesMesh() {
            for (let i = 0; i < this._meshInstanceArray.length; i++) {
                this.destroyPatchMesh(i);
            }
        }
        _cleanMeshes() {
            var _a;
            // Destroy for recreate
            (_a = this._instancing) === null || _a === void 0 ? void 0 : _a.destroy((mesh) => {
                this._meshFactory.destroyMesh(mesh);
            });
            // Destroy patches meshes, they will not be used in custom or instanced rendering
            if (this._instancing) {
                this.destroyPatchesMesh();
            }
        }
        setInstancingType(type) {
            if (this._instancingType === type) {
                return;
            }
            this._cleanMeshes();
            this._instancingType = type;
            this._instancing = type === 'combine' ? new PatchCombineInstancing_mjs_3.default() :
                type === 'simple' ? new PatchInstancing_mjs_3.default() :
                    undefined;
            this._meshFactory.bindDependenciesToMaterial(this._instancing, this._material, true);
            this.updateMeshes();
        }
        updatePatchesMeshMaterial() {
            const field = this._meshFactory.buffersManager.heightMap.field;
            const numPatchesX = field.numPatchesX;
            const numPatchesZ = field.numPatchesZ;
            for (let z = 0; z < numPatchesZ; z++) {
                for (let x = 0; x < numPatchesX; x++) {
                    const index = z * numPatchesX + x;
                    const meshInstance = this._meshInstanceArray[index];
                    if (meshInstance) {
                        meshInstance.material = this._material;
                    }
                }
            }
        }
        updateMeshes() {
            this._cleanMeshes();
            if (this.instancing) {
                this.instancing.build(this._meshFactory.buffersManager.heightMap.field, (lodInfo, primitiveInfo, data) => {
                    return this._meshFactory.createInstancingMesh(this._entity, this._material, lodInfo, primitiveInfo, this.instancing, data);
                });
            }
            else {
                this.updatePatchesMeshMaterial();
            }
            this._forceUpdateRenderComponent();
        }
    }
    exports.default = EntityPatchesMesh;
});
define("src/Heightfield/Enums", ["require", "exports", "src/Extras/EnumConverter"], function (require, exports, EnumConverter_mjs_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fieldHeightsCompressAlgoritm = exports.fieldHeightsCompressAlgoritmDefault = exports.fieldPatchSizeEnum = exports.fieldPatchSizeEnumDefault = exports.fieldSizeEnum = exports.fieldSizeEnumDefault = void 0;
    exports.fieldSizeEnumDefault = 513;
    exports.fieldSizeEnum = (0, EnumConverter_mjs_1.mapEnum)({
        '128': 129,
        '256': 257,
        '512': 513,
        '1024': 1025,
        '2048': 2049,
        '4096': 4097,
        '8192': 8193,
        '16384': 16385,
    });
    exports.fieldPatchSizeEnumDefault = 33;
    exports.fieldPatchSizeEnum = (0, EnumConverter_mjs_1.mapEnum)({
        '16': 17,
        '32': 33,
        '64': 65,
        '128': 129,
        '256': 257,
        '512': 513,
        '1024': 1025,
        '2048': 2049,
    });
    exports.fieldHeightsCompressAlgoritmDefault = 'none';
    exports.fieldHeightsCompressAlgoritm = (0, EnumConverter_mjs_1.mapEnum)({
        'None': 'none',
        'X2': 'x2',
        'X4': 'x4'
    });
});
define("src/Heightfield/Patch", ["require", "exports", "src/Core/LodState"], function (require, exports, LodState_mjs_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PatchState = void 0;
    class PatchState {
        constructor() {
            this.visible = false;
            this.lod = LodState_mjs_2.defaultPatchLod;
            this.indicesBaseIndex = 0;
            this.indicesCount = 0;
        }
    }
    exports.PatchState = PatchState;
    class Patch extends PatchState {
        constructor(index, x, z, minX, minZ, size) {
            super();
            this.index = index;
            this.size = size;
            this.x = x;
            this.z = z;
            this.minX = minX;
            this.minZ = minZ;
        }
    }
    exports.default = Patch;
});
define("src/Heightfield/PatchesRenderPreparer", ["require", "exports", "src/Heightfield/ShaderChunks", "src/Heightfield/EntityPatchesMesh", "src/Heightfield/Patch"], function (require, exports, ShaderChunks_mjs_5, EntityPatchesMesh_mjs_1, Patch_mjs_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    EntityPatchesMesh_mjs_1 = __importDefault(EntityPatchesMesh_mjs_1);
    Patch_mjs_1 = __importDefault(Patch_mjs_1);
    class PatchesRenderPreparer extends EntityPatchesMesh_mjs_1.default {
        get lodState() { return this._lodState; }
        get bufferArray() { return this._bufferArray; }
        get wireframe() { return this._wireframe; }
        set wireframe(v) {
            this._wireframe = v;
            this._updateMeshes();
        }
        get castShadow() { return this._castShadow; }
        set castShadow(v) {
            this._castShadow = v;
            this._updateMeshes();
        }
        get receiveShadow() { return this._receiveShadow; }
        set receiveShadow(v) {
            this._receiveShadow = v;
            this._updateMeshes();
        }
        constructor(lodSate, meshFactory, entity, options) {
            var _a, _b, _c;
            super(meshFactory, entity);
            this._lodState = lodSate;
            this._wireframe = (_a = options.wireframe) !== null && _a !== void 0 ? _a : false;
            this._castShadow = (_b = options.castShadow) !== null && _b !== void 0 ? _b : false;
            this._receiveShadow = (_c = options.receiveShadow) !== null && _c !== void 0 ? _c : false;
            this._bufferArray = new Array(this.meshInstanceArray.length);
        }
        _updateMesh(meshInstance, lod) {
            if (meshInstance) {
                meshInstance.castShadow = this._castShadow;
                meshInstance.receiveShadow = this._receiveShadow;
                const newRenderStyle = this._wireframe ? pc.RENDERSTYLE_WIREFRAME : pc.RENDERSTYLE_SOLID;
                // @ts-ignore
                meshInstance._renderStyle = newRenderStyle;
                if (this._wireframe) {
                    const wireframeData = this.meshFactory.wireframeBuffersManager.get(lod);
                    meshInstance.mesh.indexBuffer[pc.RENDERSTYLE_WIREFRAME] = wireframeData.buffer;
                    meshInstance.mesh.primitive[pc.RENDERSTYLE_WIREFRAME] = wireframeData.primitive;
                }
            }
        }
        _freeIfNeedWireframe(meshInstance, lod) {
            if (meshInstance && !this._wireframe) {
                delete meshInstance.mesh.indexBuffer[pc.RENDERSTYLE_WIREFRAME];
                delete meshInstance.mesh.primitive[pc.RENDERSTYLE_WIREFRAME];
            }
        }
        _updateMeshes() {
            var _a;
            for (let i = 0; i < this.meshInstanceArray.length; i++) {
                const meshInstance = this.meshInstanceArray[i];
                const buffer = this._bufferArray[i];
                this._updateMesh(meshInstance, buffer.lod);
                this._freeIfNeedWireframe(meshInstance, buffer.lod);
            }
            (_a = this.instancing) === null || _a === void 0 ? void 0 : _a.forEach(item => {
                this._updateMesh(item.object, item.lod);
                this._freeIfNeedWireframe(item.object, item.lod);
            });
        }
        updateMeshes() {
            super.updateMeshes();
            this._updateMeshes();
        }
        initPatch(patchX, patchZ, size, minX, minZ, info, lodInfo) {
            const index = patchZ * this._numPatchesX + patchX;
            const buffer = new Patch_mjs_1.default(index, patchX, patchZ, minX, minZ, size);
            buffer.lod = lodInfo;
            buffer.indicesBaseIndex = info.start;
            buffer.indicesCount = info.count;
            this._bufferArray[index] = buffer;
        }
        updatePatch(patchX, patchZ, visible, info, lod) {
            const index = patchZ * this._numPatchesX + patchX;
            const buffer = this._bufferArray[index];
            buffer.visible = visible;
            buffer.indicesBaseIndex = info.start;
            buffer.indicesCount = info.count;
            buffer.lod = lod;
            if (this.instancing) {
                if (visible) {
                    const inst = this.instancing.increment(lod, buffer);
                    if (inst.count === 1 && inst.object) {
                        const meshInstance = inst.object;
                        meshInstance.visible = true;
                        meshInstance.castShadow = this._castShadow;
                        meshInstance.receiveShadow = this._receiveShadow;
                    }
                }
            }
            else {
                const meshInstance = this.getOrCreatePatchMesh(index);
                const mesh = meshInstance.mesh;
                const primitive = mesh.primitive[0];
                primitive.base = info.start;
                primitive.count = info.count;
                meshInstance.visible = visible;
                meshInstance.setParameter(ShaderChunks_mjs_5.patchLodCoreParamName, lod.core);
                this._updateMesh(meshInstance, lod);
            }
        }
        beforeUpdate() {
            var _a;
            (_a = this.instancing) === null || _a === void 0 ? void 0 : _a.begin(false, false);
        }
        afterUpdate() {
            var _a;
            this.updateRenderComponent();
            (_a = this.instancing) === null || _a === void 0 ? void 0 : _a.end();
        }
    }
    exports.default = PatchesRenderPreparer;
});
define("src/Scripts/FlyCamera", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.flyCameraScriptName = exports.FlyCamera = void 0;
    class FlyCamera extends pc.ScriptType {
        constructor() {
            super(...arguments);
            this.mobileControl = false;
        }
        initialize() {
            // Camera euler angle rotation around x and y axes
            const eulers = this.entity.getLocalEulerAngles();
            this.ex = (eulers.z - eulers.x);
            this.ey = (eulers.z - eulers.y);
            this.translateLoc = pc.Vec3.ZERO.clone();
            this.moved = false;
            this.rightDown = false;
            this.middleDown = false;
            // Disabling the context menu stops the browser displaying a menu when
            // you right-click the page
            if (this.app.mouse) {
                this.app.mouse.disableContextMenu();
                this.app.mouse.on(pc.EVENT_MOUSEMOVE, this.onMouseMove, this);
                this.app.mouse.on(pc.EVENT_MOUSEDOWN, this.onMouseDown, this);
                this.app.mouse.on(pc.EVENT_MOUSEUP, this.onMouseUp, this);
            }
        }
        append(x, y) {
            this.ex += x;
            this.ey += y;
            this.ex = pc.math.clamp(this.ex, -90, 90);
        }
        translate(x, y, z) {
            this.translateLoc.x += x;
            this.translateLoc.y += y;
            this.translateLoc.z += z;
        }
        update(dt) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
            const app = this.app;
            let speed = this.speed;
            if ((_a = app.keyboard) === null || _a === void 0 ? void 0 : _a.isPressed(pc.KEY_SPACE)) {
                speed = this.slowSpeed;
            }
            if ((_b = app.keyboard) === null || _b === void 0 ? void 0 : _b.isPressed(pc.KEY_SHIFT)) {
                speed = this.fastSpeed;
            }
            // Joypad control
            const joystickMover = touchJoypad === null || touchJoypad === void 0 ? void 0 : touchJoypad.sticks['joystick0'];
            const joystickRoter = touchJoypad === null || touchJoypad === void 0 ? void 0 : touchJoypad.sticks['joystick1'];
            if (this.mobileControls && (touchJoypad === null || touchJoypad === void 0 ? void 0 : touchJoypad.buttons.wasPressed('button2'))) {
                this.mobileControl = !this.mobileControl;
                this.mobileControls.enabled = this.mobileControl;
            }
            if (joystickRoter) {
                this.append(joystickRoter.y, -joystickRoter.x);
            }
            if (joystickMover) {
                this.translate(speed * joystickMover.x * dt, 0, -speed * joystickMover.y * dt);
            }
            // Update the camera's position
            if (((_c = app.keyboard) === null || _c === void 0 ? void 0 : _c.isPressed(pc.KEY_UP)) || ((_d = app.keyboard) === null || _d === void 0 ? void 0 : _d.isPressed(pc.KEY_W))) {
                this.translate(0, 0, -speed * dt);
            }
            else if (((_e = app.keyboard) === null || _e === void 0 ? void 0 : _e.isPressed(pc.KEY_DOWN)) || ((_f = app.keyboard) === null || _f === void 0 ? void 0 : _f.isPressed(pc.KEY_S))) {
                this.translate(0, 0, speed * dt);
            }
            if (((_g = app.keyboard) === null || _g === void 0 ? void 0 : _g.isPressed(pc.KEY_LEFT)) || ((_h = app.keyboard) === null || _h === void 0 ? void 0 : _h.isPressed(pc.KEY_A))) {
                this.translate(-speed * dt, 0, 0);
            }
            else if (((_j = app.keyboard) === null || _j === void 0 ? void 0 : _j.isPressed(pc.KEY_RIGHT)) || ((_k = app.keyboard) === null || _k === void 0 ? void 0 : _k.isPressed(pc.KEY_D))) {
                this.translate(speed * dt, 0, 0);
            }
            // Update the camera's TRS
            this.entity.setLocalEulerAngles(this.ex, this.ey, 0);
            this.entity.translateLocal(this.translateLoc);
            this.translateLoc.set(0, 0, 0);
            // Update frustum by actual matrix
            this.app.renderer.updateCameraFrustum((_l = this.entity.camera) === null || _l === void 0 ? void 0 : _l.camera);
        }
        onMouseMove(event) {
            if (!this.mode && !pc.Mouse.isPointerLocked()) {
                return;
            }
            if (!this.rightDown &&
                !this.middleDown)
                return;
            // Update the current Euler angles, clamp the pitch.
            if (!this.moved) {
                // first move event can be very large
                this.moved = true;
                return;
            }
            if (this.rightDown) {
                this.append(-event.dy / this.sensitivity, -event.dx / this.sensitivity);
            }
            if (this.middleDown) {
                let speed = this.speed;
                if (this.app.keyboard.isPressed(pc.KEY_SHIFT)) {
                    speed = this.fastSpeed;
                }
                this.translate(-(event.dx / 5) * speed, (event.dy / 5) * speed, 0);
            }
        }
        onMouseDown(event) {
            // When the mouse button is clicked try and capture the pointer
            if (!this.mode && !pc.Mouse.isPointerLocked()) {
                this.app.mouse.enablePointerLock();
            }
            if (event.button === pc.MOUSEBUTTON_RIGHT) {
                this.rightDown = true;
            }
            if (event.button === pc.MOUSEBUTTON_MIDDLE) {
                this.middleDown = true;
            }
        }
        onMouseUp(event) {
            if (event.button === pc.MOUSEBUTTON_RIGHT) {
                this.rightDown = false;
            }
            if (event.button === pc.MOUSEBUTTON_MIDDLE) {
                this.middleDown = false;
            }
        }
    }
    exports.FlyCamera = FlyCamera;
    exports.default = FlyCamera;
    exports.flyCameraScriptName = 'flyCamera';
    pc.registerScript(FlyCamera, exports.flyCameraScriptName);
    FlyCamera.attributes.add('mobileControls', {
        type: 'entity',
    });
    FlyCamera.attributes.add('speed', {
        type: 'number',
        default: 10
    });
    FlyCamera.attributes.add('slowSpeed', {
        type: 'number',
        default: 1
    });
    FlyCamera.attributes.add('fastSpeed', {
        type: 'number',
        default: 20
    });
    FlyCamera.attributes.add('sensitivity', {
        type: 'number',
        min: 1,
        default: 5
    });
    FlyCamera.attributes.add('mode', {
        type: 'number',
        default: 0,
        enum: [{
                "Lock": 0
            }, {
                "Drag": 1
            }]
    });
});
define("src/Scripts/FpsCounter", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fpsCounterScriptName = void 0;
    class FpsCounter extends pc.ScriptType {
        initialize() {
            const constr = window.FPSMeter;
            if (constr) {
                this.fps = new constr({
                    heat: true,
                    graph: true
                });
            }
        }
        update(dt) {
            var _a;
            (_a = this.fps) === null || _a === void 0 ? void 0 : _a.tick();
        }
    }
    exports.default = FpsCounter;
    exports.fpsCounterScriptName = 'FpsCounter';
    pc.registerScript(FpsCounter, exports.fpsCounterScriptName);
});
define("src/Scripts/Terrain", ["require", "exports", "src/Extras/Debug", "src/Core/MidpointDispHeightfield", "src/Core/HeightfieldRaycastResult", "src/Core/HeightMap", "src/Heightfield/ColorPainter", "src/Heightfield/Enums", "src/Heightfield/ShaderChunks", "src/Core/HeightfieldShape", "src/Core/PatchedHeightMap", "src/Core/CompressedPatchedHeightMap", "src/Extras/EnumConverter", "src/AmmoIntegration/AmmoIntegration", "src/Core/LodState", "src/Heightfield/GPUHeightMapBuffer", "src/Core/PatchesSphereBuffer", "src/Core/PatchesManager", "src/Heightfield/MeshInstanceFactory", "src/Heightfield/GPUBuffersManager", "src/Heightfield/PatchesRenderPreparer", "src/Heightfield/GPUWireframeBuffersManager"], function (require, exports, Debug_mjs_1, MidpointDispHeightfield_mjs_1, HeightfieldRaycastResult_mjs_2, HeightMap_mjs_4, ColorPainter_mjs_1, Enums_mjs_1, ShaderChunks_mjs_6, HeightfieldShape_mjs_1, PatchedHeightMap_mjs_1, CompressedPatchedHeightMap_mjs_2, EnumConverter_mjs_2, AmmoIntegration_mjs_1, LodState_mjs_3, GPUHeightMapBuffer_mjs_1, PatchesSphereBuffer_mjs_1, PatchesManager_mjs_1, MeshInstanceFactory_mjs_1, GPUBuffersManager_mjs_1, PatchesRenderPreparer_mjs_1, GPUWireframeBuffersManager_mjs_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bigTerrainEditorScriptName = exports.terrainScriptName = exports.Terrain = exports.RenderMode = void 0;
    MidpointDispHeightfield_mjs_1 = __importDefault(MidpointDispHeightfield_mjs_1);
    HeightfieldRaycastResult_mjs_2 = __importDefault(HeightfieldRaycastResult_mjs_2);
    HeightMap_mjs_4 = __importDefault(HeightMap_mjs_4);
    ColorPainter_mjs_1 = __importDefault(ColorPainter_mjs_1);
    HeightfieldShape_mjs_1 = __importDefault(HeightfieldShape_mjs_1);
    PatchedHeightMap_mjs_1 = __importDefault(PatchedHeightMap_mjs_1);
    CompressedPatchedHeightMap_mjs_2 = __importDefault(CompressedPatchedHeightMap_mjs_2);
    LodState_mjs_3 = __importDefault(LodState_mjs_3);
    GPUHeightMapBuffer_mjs_1 = __importDefault(GPUHeightMapBuffer_mjs_1);
    PatchesSphereBuffer_mjs_1 = __importDefault(PatchesSphereBuffer_mjs_1);
    PatchesManager_mjs_1 = __importDefault(PatchesManager_mjs_1);
    MeshInstanceFactory_mjs_1 = __importDefault(MeshInstanceFactory_mjs_1);
    GPUBuffersManager_mjs_1 = __importDefault(GPUBuffersManager_mjs_1);
    PatchesRenderPreparer_mjs_1 = __importDefault(PatchesRenderPreparer_mjs_1);
    GPUWireframeBuffersManager_mjs_1 = __importDefault(GPUWireframeBuffersManager_mjs_1);
    const brushMinSize = 2;
    const brushMaxSize = 250;
    const tmpMat = new pc.Mat4();
    const terrainLocalVertexPos = new pc.Vec3();
    const heightMapExt = '.hm';
    var RenderMode;
    (function (RenderMode) {
        RenderMode[RenderMode["Standard"] = 1] = "Standard";
        RenderMode[RenderMode["InstancingAccelerator"] = 2] = "InstancingAccelerator";
        RenderMode[RenderMode["CombineInstancingAccelerator"] = 3] = "CombineInstancingAccelerator";
    })(RenderMode || (exports.RenderMode = RenderMode = {}));
    class Terrain extends pc.ScriptType {
        constructor() {
            super(...arguments);
            this._lock = 0;
            this._localCameraPosition = new pc.Vec3();
            this._roughness = 1.0;
            this._rayStart = new pc.Vec3();
            this._rayEnd = new pc.Vec3();
            this._rayDirection = new pc.Vec3();
            this._ray = new pc.Ray();
            this._cameraPos = new Array(3);
            this._lastLodGridUpdate = 0;
            this._brushSizeStep = 1;
            this._brushOpacityStep = 0.01;
            this._intersectsRayResult = false;
            this._keyAddLock = true;
            this._keySubLock = true;
        }
        get shape() { return this._heightFieldShape; }
        get object() { return this._terrain; }
        get lock() { return this._lock; }
        addLock() {
            this._lock++;
        }
        freeLock() {
            this._lock--;
        }
        postInitialize() {
            this._initializeMouse();
            this._initializeKeyboard();
            this._initBrush();
            this._initTerrain();
            this._updateMaterialParameters();
            this._updateLayers();
            this._updateBrush();
            this._updatePainterMaterial();
            this._updateMesh();
            this._updateHeightMapFromAttr();
            this.on('attr:renderMode', () => {
                this._defaultPatchesPreparer.setInstancingType(this.renderMode === RenderMode.CombineInstancingAccelerator ? 'combine' :
                    this.renderMode === RenderMode.InstancingAccelerator ? 'simple' :
                        false);
            });
            this.on('attr:castShadow', () => {
                this._defaultPatchesPreparer.castShadow = this.castShadow;
            });
            this.on('attr:receiveShadow', () => {
                this._defaultPatchesPreparer.receiveShadow = this.receiveShadow;
            });
            this.on('attr:wireframe', () => {
                this._defaultPatchesPreparer.wireframe = this.wireframe;
                if (!this.wireframe) {
                    this._wireframeBuffersManager.free();
                }
            });
            this.on('attr:activeLayer', () => {
                this._updatePainterMaterial();
            });
            this.on('attr:layers', () => {
                this._updateLayers();
            });
            this.on('attr:brush', () => {
                this._updateBrush();
                this._updatePainterMaterial();
            });
            this.on('attr:height', () => {
                this._terrain.setMaxHeight(this.height);
                this._spheresBuffer.recalculate();
                this._meshFactory.updateAabb();
                this._defaultPatchesPreparer.updateAabb();
                this._updateMaterialParameters();
            });
            this.on('attr:zFar', () => {
                this._defaultPatchesLodState.setZFar(this.zFar);
            });
        }
        _initBrush() {
            const splatMap = this.painterSettings.splatMap.resource;
            this._brushHeightMap = new HeightMap_mjs_4.default(256, 256, 100);
            this._colorPainter = new ColorPainter_mjs_1.default(this.app, splatMap, this.layer);
        }
        _updatePainterMaterial() {
            this._colorPainter.updateSettings(this.brush, this.activeLayer);
        }
        _updateBrush() {
            this._brushSize = this.brush.size | 0;
            this._brushOpacity = this.brush.opacity;
            const activeBrush = this.brush.active | 0;
            if (activeBrush === this._activeBrush) {
                return;
            }
            if (!this.brush.textures[activeBrush]) {
                console.error('Brush image unset.');
                return;
            }
            const brushTexture = this.brush.textures[activeBrush].resource;
            const brushImg = brushTexture.getSource();
            if (!brushImg) {
                console.error('Brush image unset.');
                return;
            }
            this._activeBrush = activeBrush;
            this._brushHeightMap.fromImage(brushImg);
            this._brushHeightMap.smooth(1, 1);
            console.log(this._brushHeightMap);
        }
        _initHeightMapBuffer(chunkSize) {
            // TODO: Move to terrain collider
            // TODO: Ammo js integration
            let buffer = undefined;
            if (typeof Ammo !== 'undefined') {
                buffer = (0, AmmoIntegration_mjs_1.getBuffer)(this.width, this.depth, this.patchSize, chunkSize, this.compressAlgoritm);
                const ht = this.compressAlgoritm === 'none' ? 0 :
                    this.compressAlgoritm === 'x2' ? 1 :
                        2;
                const hm = new Ammo.btAlexTerrainPatchedHeightMap(this.width, this.depth, this.patchSize, chunkSize, 0, this.height, ht, buffer.byteOffset);
                const shape = new Ammo.btAlexHeightfieldTerrainShape(hm, false);
                const groundTransform = new Ammo.btTransform();
                const position = new Ammo.btVector3(0, this.height / 2, 0);
                groundTransform.setIdentity();
                groundTransform.setOrigin(position);
                const groundMass = 0;
                const groundLocalInertia = new Ammo.btVector3(0, 0, 0);
                const groundMotionState = new Ammo.btDefaultMotionState(groundTransform);
                const groundConstrInfo = new Ammo.btRigidBodyConstructionInfo(groundMass, groundMotionState, shape, groundLocalInertia);
                const groundBody = new Ammo.btRigidBody(groundConstrInfo);
                this.app.systems.rigidbody.dynamicsWorld.addRigidBody(groundBody);
                Ammo.destroy(position);
                Ammo.destroy(groundTransform);
            }
            return buffer;
        }
        get heightMapTexture() { return this._heightMapBuffer.texture; }
        get aabb() { return this._meshFactory.aabb; }
        _initTerrain() {
            const tmpChunkSize = this.patchSize * 2 - 1;
            const chunkSize = Math.min(this.width, this.depth, tmpChunkSize);
            const buffer = this._initHeightMapBuffer(chunkSize);
            const heightMap = this.compressAlgoritm !== 'none'
                ? new CompressedPatchedHeightMap_mjs_2.default(this.width, this.depth, this.patchSize, chunkSize, this.height, this.compressAlgoritm, buffer)
                : new PatchedHeightMap_mjs_1.default(this.width, this.depth, this.patchSize, chunkSize, this.height, buffer);
            this._terrain = new MidpointDispHeightfield_mjs_1.default(heightMap);
            this._heightFieldShape = new HeightfieldShape_mjs_1.default(heightMap);
            this._raycastResult = new HeightfieldRaycastResult_mjs_2.default();
            this._spheresBuffer = new PatchesSphereBuffer_mjs_1.default(heightMap, this.entity.getWorldTransform());
            this._heightMapBuffer = new GPUHeightMapBuffer_mjs_1.default(this.app, this._terrain);
            this._buffersManager = new GPUBuffersManager_mjs_1.default(this._heightMapBuffer);
            this._wireframeBuffersManager = new GPUWireframeBuffersManager_mjs_1.default(this._buffersManager, this._terrain.lodInfo);
            this._meshFactory = new MeshInstanceFactory_mjs_1.default(this._buffersManager, this._wireframeBuffersManager);
            this._patchesManager = new PatchesManager_mjs_1.default(this._terrain, this._spheresBuffer);
            this._defaultPatchesLodState = new LodState_mjs_3.default(this._patchesManager.lodManager, this.zFar);
            this._defaultPatchesPreparer = new PatchesRenderPreparer_mjs_1.default(this._defaultPatchesLodState, this._meshFactory, this.entity, {
                wireframe: this.wireframe,
                castShadow: this.castShadow,
                receiveShadow: this.receiveShadow,
            });
            this._patchesManager.addState(this._defaultPatchesPreparer);
            console.log(this._terrain, this._heightFieldShape);
        }
        _updateMaterialParameters() {
            this._defaultPatchesPreparer.material.setParameter(ShaderChunks_mjs_6.splatMapParamName, this._colorPainter.background);
            this._defaultPatchesPreparer.material.setParameter(ShaderChunks_mjs_6.maxHeightParamName, this._terrain.maxHeight);
        }
        _updateLayers() {
            var _a;
            // TODO
            const maxCount = 5;
            const width = 1024;
            const height = 1024;
            let length = 0;
            let flags = [];
            let scales = [];
            let offsets = [];
            let diffuses = [];
            let normals = [];
            for (let i = 0; i < maxCount; i++) {
                let flag = 0;
                if (i < this.layers.length) {
                    const layer = this.layers[i];
                    const diffuse = layer.diffuse;
                    const normalMap = layer.normalMap;
                    if (diffuse) {
                        const diffuseTexture = diffuse.resource;
                        flag++;
                        length++;
                        diffuses.push(diffuseTexture.getSource());
                        scales.push(layer.size.x, layer.size.y);
                        offsets.push(layer.offset.x, layer.offset.y);
                        if (normalMap) {
                            const normalTexture = normalMap.resource;
                            flag++;
                            normals.push(normalTexture.getSource());
                        }
                    }
                }
                flags.push(flag);
            }
            (_a = this._layersDiffuse) === null || _a === void 0 ? void 0 : _a.destroy();
            //this._layersDiffuse = this.layers[0].diffuse.resource as pcx.Texture;
            this._layersDiffuse = new pc.Texture(this.app.graphicsDevice, {
                name: 'terrainLayersDiffuse',
                format: pc.PIXELFORMAT_SRGBA8,
                width: width,
                height: height,
                arrayLength: length,
                flipY: this.app.graphicsDevice.isWebGPU,
                //magFilter: pc.FILTER_LINEAR,
                //minFilter: pc.FILTER_LINEAR_MIPMAP_LINEAR,
                mipmaps: true,
                addressU: pc.ADDRESS_REPEAT,
                addressV: pc.ADDRESS_REPEAT,
                addressW: pc.ADDRESS_CLAMP_TO_EDGE,
                levels: [diffuses]
            });
            this._layersDiffuse.upload();
            console.log(this._layersDiffuse);
            this._defaultPatchesPreparer.material.setParameter(ShaderChunks_mjs_6.layersDiffuseParamName, this._layersDiffuse);
            this._defaultPatchesPreparer.material.setParameter(`${ShaderChunks_mjs_6.layersFlagsParamName}[0]`, flags);
            this._defaultPatchesPreparer.material.setParameter(`${ShaderChunks_mjs_6.layersScaleParamName}[0]`, scales);
            this._defaultPatchesPreparer.material.setParameter(`${ShaderChunks_mjs_6.layersOffsetParamName}[0]`, offsets);
        }
        _updateMesh() {
            this._defaultPatchesPreparer.setInstancingType(this.renderMode === RenderMode.CombineInstancingAccelerator ? 'combine' :
                this.renderMode === RenderMode.InstancingAccelerator ? 'simple' :
                    false);
        }
        _initializeMouse() {
            var _a, _b;
            (_a = this.app.mouse) === null || _a === void 0 ? void 0 : _a.on(pc.EVENT_MOUSEMOVE, this._onMouseMove, this);
            (_b = this.app.mouse) === null || _b === void 0 ? void 0 : _b.on(pc.EVENT_MOUSEWHEEL, this._onMouseWheel, this);
            this.on('destroy', () => {
                var _a, _b;
                (_a = this.app.mouse) === null || _a === void 0 ? void 0 : _a.off(pc.EVENT_MOUSEMOVE, this._onMouseMove, this);
                (_b = this.app.mouse) === null || _b === void 0 ? void 0 : _b.off(pc.EVENT_MOUSEWHEEL, this._onMouseWheel, this);
            });
        }
        _onMouseMove(event) {
            this._lastMouseMoveEvent = event;
        }
        _onMouseWheel(event) {
            const candidate = this._brushSize + event.wheelDelta * this._brushSizeStep;
            this._brushSize = Math.min(Math.max(candidate, brushMinSize), brushMaxSize);
        }
        _initializeKeyboard() {
            var _a, _b;
            (_a = this.app.keyboard) === null || _a === void 0 ? void 0 : _a.on(pc.EVENT_KEYDOWN, this._onKeyboardDown, this);
            (_b = this.app.keyboard) === null || _b === void 0 ? void 0 : _b.on(pc.EVENT_KEYUP, this._onKeyboardUp, this);
            this.on('destroy', () => {
                var _a, _b;
                (_a = this.app.mouse) === null || _a === void 0 ? void 0 : _a.off(pc.EVENT_KEYDOWN, this._onKeyboardDown, this);
                (_b = this.app.mouse) === null || _b === void 0 ? void 0 : _b.off(pc.EVENT_KEYUP, this._onKeyboardUp, this);
            });
        }
        _onKeyboardDown(event) {
            if (this._keyAddLock === false && event.key === pc.KEY_ADD) {
                this._keyAddLock = true;
                this._brushOpacity = Math.max(this._brushOpacity + this._brushOpacityStep, 0);
            }
            if (this._keySubLock === false && event.key === pc.KEY_SUBTRACT) {
                this._keySubLock = true;
                this._brushOpacity = Math.min(this._brushOpacity - this._brushOpacityStep, 1);
            }
        }
        _onKeyboardUp(event) {
            if (event.key === pc.KEY_ADD) {
                this._keyAddLock = false;
            }
            else if (event.key === pc.KEY_SUBTRACT) {
                this._keySubLock = false;
            }
        }
        _updateHeightMapFromAttr() {
            return __awaiter(this, void 0, void 0, function* () {
                if (this.heightMap.file) {
                    if (!this.heightMap.file.resource) {
                        console.warn('Height map file unset.');
                        return;
                    }
                    const data = this.heightMap.file.resource;
                    const settings = {
                        adaptiveMaxHeight: true,
                        adaptiveWidthAndDepth: true,
                    };
                    yield this._terrain.loadHeightMapFromFile(data, settings, this.heightMap.smoothFactor, this.heightMap.smoothRadius);
                }
                else {
                    const texture = this.heightMap.texture;
                    if (!texture) {
                        console.warn('Height map image unset.');
                        return;
                    }
                    const resource = texture.resource;
                    const img = resource.getSource();
                    if (!img) {
                        console.warn('Height map image unset.');
                        return;
                    }
                    this._terrain.loadHeightMapFromImg(img, this.heightMap.smoothFactor, this.heightMap.smoothRadius);
                    // TODO: clear heightmap
                    resource.destroy();
                }
                this._heightMapBuffer.updateHeightMap({ minX: 0, maxX: this.width, minZ: 0, maxZ: this.depth });
                this._spheresBuffer.recalculate();
                this._meshFactory.updateAabb();
                this._defaultPatchesPreparer.updateAabb();
            });
        }
        _saveHeightMapToImg() {
            const base64 = this._terrain.heightMap.toImage();
            const image = new Image();
            image.src = base64;
            const w = window.open(undefined, '_blank');
            w.document.write(image.outerHTML);
        }
        _saveHeightMapToFile() {
            return __awaiter(this, void 0, void 0, function* () {
                const blob = yield this._terrain.heightMap.toFile();
                const blobUrl = URL.createObjectURL(blob);
                const a = document.createElement("a");
                const timestamp = new Date();
                document.body.appendChild(a);
                a.href = blobUrl;
                a.download = `hm_${+timestamp}${heightMapExt}`;
                a.click();
                URL.revokeObjectURL(blobUrl);
            });
        }
        update(dt) {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            if (this._colorPainter.painting) {
                this._colorPainter.stopPaint();
            }
            if (this.autoRender &&
                this.cameraEntity &&
                this.cameraEntity.camera) {
                const camera = this.cameraEntity.camera;
                const mat = this.entity.getWorldTransform();
                const scale = mat.getScale();
                const cameraPos = this.cameraEntity.getPosition();
                this._cameraPos[0] = cameraPos.x;
                this._cameraPos[1] = cameraPos.y;
                this._cameraPos[2] = cameraPos.z;
                this._defaultPatchesPreparer.material.setParameter(ShaderChunks_mjs_6.cameraPositionParamName, this._cameraPos);
                if (this._lastMouseMoveEvent) {
                    let hasChanges = false;
                    camera.screenToWorld(this._lastMouseMoveEvent.x, this._lastMouseMoveEvent.y, camera.nearClip, this._rayStart);
                    camera.screenToWorld(this._lastMouseMoveEvent.x, this._lastMouseMoveEvent.y, camera.farClip, this._rayEnd);
                    this._rayDirection.sub2(this._rayEnd, this._rayStart);
                    const changeRay = !this._ray.origin.equals(this._rayStart) || !this._ray.direction.equals(this._rayDirection);
                    if (changeRay) {
                        this._ray.set(this._rayStart, this._rayDirection);
                        this._raycastResult.clear();
                        this._intersectsRayResult = this._heightFieldShape.intersectsRay(mat, this._ray, this._raycastResult);
                    }
                    if (this._intersectsRayResult) {
                        const brushSizeX = this._brushSize / scale.x | 0;
                        const brushSizeZ = this._brushSize / scale.z | 0;
                        this._terrain.patchVertices.getPosition(this._raycastResult.vertexIndex, terrainLocalVertexPos);
                        if ((_a = this.app.keyboard) === null || _a === void 0 ? void 0 : _a.wasPressed(pc.KEY_I)) {
                            console.log(this._raycastResult, this._localCameraPosition, terrainLocalVertexPos);
                        }
                        (0, Debug_mjs_1.drawPoint)({ center: this._raycastResult.point, radius: this._brushSize, numSegments: 10, depthTest: true, color: pc.Color.GRAY });
                        (0, Debug_mjs_1.drawDirectionVector)(this._raycastResult.point, this._raycastResult.normal, pc.Color.MAGENTA);
                        if (this._lock < 1 &&
                            ((_b = this.app.mouse) === null || _b === void 0 ? void 0 : _b.isPressed(pc.MOUSEBUTTON_LEFT))) {
                            if (this.painting) {
                                const width = this._terrain.width - 1;
                                const depth = this._terrain.depth - 1;
                                const x = terrainLocalVertexPos.x / width;
                                const y = terrainLocalVertexPos.z / depth;
                                const scaleW = brushSizeX / width;
                                const scaleH = brushSizeZ / depth;
                                this._colorPainter.startPaint(dt, x, y, scaleW, scaleH);
                            }
                            else {
                                const average = (brushSizeX + brushSizeZ) / 2;
                                const centerX = terrainLocalVertexPos.x | 0;
                                const centerZ = terrainLocalVertexPos.z | 0;
                                const zone = {
                                    minX: centerX - brushSizeX,
                                    maxX: centerX + brushSizeX + 1,
                                    minZ: centerZ - brushSizeZ,
                                    maxZ: centerZ + brushSizeZ + 1,
                                };
                                if ((_c = this.app.keyboard) === null || _c === void 0 ? void 0 : _c.isPressed(pc.KEY_ALT)) {
                                    this._terrain.smoothHeightsZone(zone, average * this._brushOpacity * dt / 10, 1);
                                }
                                else {
                                    const negative = !!((_d = this.app.keyboard) === null || _d === void 0 ? void 0 : _d.isPressed(pc.KEY_CONTROL));
                                    const appendValue = (negative ? -average : average) * this._brushOpacity * dt / 10;
                                    this._terrain.appendHeightMap(this._brushHeightMap, appendValue, zone);
                                }
                                if ((_e = this.app.keyboard) === null || _e === void 0 ? void 0 : _e.wasPressed(pc.KEY_I)) {
                                    console.log(zone);
                                }
                                this._terrain.recalculateMinMax(zone);
                                this._heightMapBuffer.updateHeightMap(zone);
                                this._spheresBuffer.recalculateZone(zone);
                                hasChanges = true;
                            }
                        }
                    }
                }
                tmpMat.invert(mat);
                tmpMat.transformPoint(camera.entity.getPosition(), this._localCameraPosition);
                this._patchesManager.updateLods(this._localCameraPosition, this.lodByYPos);
                this._patchesManager.update(camera.frustum);
                /*
                const spheres = this._spheresBuffer.spheres;
                for (let i = 0; i < spheres.length; i++) {
                    const sphere = spheres[i];
                    drawPoint({ center: sphere.center, radius: sphere.radius, numSegments: 10, depthTest: true, color: pc.Color.YELLOW });
                }
                */
            }
            if ((_f = this.app.keyboard) === null || _f === void 0 ? void 0 : _f.wasPressed(pc.KEY_L)) {
                this._defaultPatchesLodState.printLodMap();
            }
            if ((_g = this.app.keyboard) === null || _g === void 0 ? void 0 : _g.wasPressed(pc.KEY_P)) {
                this._saveHeightMapToImg();
            }
            if ((_h = this.app.keyboard) === null || _h === void 0 ? void 0 : _h.wasPressed(pc.KEY_O)) {
                this._saveHeightMapToFile();
            }
            // Debug
            //this.app.drawTexture( 0.5, -0.6, 0.5, 0.3, this.painterSettings.splatMap.resource, undefined as any);
        }
    }
    exports.Terrain = Terrain;
    exports.default = Terrain;
    exports.terrainScriptName = "Terrain";
    exports.bigTerrainEditorScriptName = "bigTerrainEditor";
    pc.registerScript(Terrain, exports.terrainScriptName);
    pc.registerScript(Terrain, exports.bigTerrainEditorScriptName);
    Terrain.attributes.add("renderMode", { type: "number", enum: (0, EnumConverter_mjs_2.mapTitleEnum)(RenderMode), default: RenderMode.Standard, });
    Terrain.attributes.add("castShadow", { type: "boolean", default: true, });
    Terrain.attributes.add("receiveShadow", { type: "boolean", default: true, });
    Terrain.attributes.add("lodByYPos", { type: "boolean", default: true, });
    Terrain.attributes.add("zFar", { type: "number", default: 5000, min: 1, step: 1, precision: 0, });
    Terrain.attributes.add("width", { type: "number", enum: Enums_mjs_1.fieldSizeEnum, default: Enums_mjs_1.fieldSizeEnumDefault, });
    Terrain.attributes.add("depth", { type: "number", enum: Enums_mjs_1.fieldSizeEnum, default: Enums_mjs_1.fieldSizeEnumDefault, });
    Terrain.attributes.add("patchSize", { type: "number", enum: Enums_mjs_1.fieldPatchSizeEnum, default: Enums_mjs_1.fieldPatchSizeEnumDefault, });
    Terrain.attributes.add("height", { type: "number", default: 10, min: 1, });
    Terrain.attributes.add("compressAlgoritm", { type: "string", enum: Enums_mjs_1.fieldHeightsCompressAlgoritm, default: Enums_mjs_1.fieldHeightsCompressAlgoritmDefault, });
    Terrain.attributes.add("layer", { type: "string", default: 'TerrainEditor', });
    Terrain.attributes.add("cameraEntity", { type: "entity" });
    Terrain.attributes.add("autoRender", { type: "boolean", default: true, });
    Terrain.attributes.add("painting", { type: "boolean", default: false, });
    Terrain.attributes.add("wireframe", { type: "boolean", default: false, });
    Terrain.attributes.add("heightMap", {
        type: 'json',
        schema: [
            {
                name: 'file',
                type: 'asset',
                assetType: 'binary',
            },
            {
                name: 'texture',
                type: "asset",
                assetType: 'texture',
            },
            {
                name: 'smoothFactor',
                description: `
                To what extent neighbors influence the new height:
                Value of 0 will ignore neighbors (no smoothing).
                Value of 1 will ignore the node old height.
            `,
                type: "number",
                default: 1,
                min: 0,
                max: 1,
            },
            {
                name: 'smoothRadius',
                description: `The radius of factor smooth.`,
                type: "number",
                default: 1,
                step: 1,
                min: 1,
            }
        ]
    });
    Terrain.attributes.add("brush", {
        type: "json",
        schema: [
            {
                name: "active",
                description: "The brush texture index.",
                type: "number",
                default: 0,
                min: 0,
                step: 1,
                precision: 0,
            },
            {
                name: "size",
                description: "The brush size",
                type: "number",
                default: 10,
                min: brushMinSize,
                max: brushMaxSize,
                step: 1,
                precision: 0,
            },
            {
                name: "opacity",
                description: "The brush opacity",
                type: "number",
                default: 0.5,
                min: 0,
                max: 1,
            },
            {
                name: "textures",
                description: "The brush textures",
                type: "asset",
                assetType: 'texture',
                array: true,
            }
        ]
    });
    Terrain.attributes.add("activeLayer", { type: 'number', default: 0, min: 0, max: 32, step: 1, precision: 0, });
    Terrain.attributes.add("layers", {
        type: "json",
        array: true,
        schema: [
            {
                name: "name",
                title: "Name",
                type: "string",
            },
            {
                name: "diffuse",
                title: "Diffuse",
                type: "asset",
                assetType: "texture",
            },
            {
                name: "normalMap",
                title: "Normal Map",
                type: "asset",
                assetType: "texture",
            },
            {
                name: "size",
                title: "Size",
                type: "vec2",
                default: [1, 1]
            },
            {
                name: "offset",
                title: "Offset",
                type: "vec2",
                default: [0, 0]
            },
        ]
    });
    Terrain.attributes.add("painterSettings", {
        type: "json",
        schema: [
            {
                name: "splatMap",
                type: "asset",
                assetType: "texture",
                title: "Splat Map",
            },
        ]
    });
});
define("src/Scripts/GrassField", ["require", "exports", "src/GrassField/GrassFieldTexture", "src/GrassField/GrassShaderChunk", "src/Extras/Debug", "src/Extras/Random", "src/Heightfield/GPUHeightMapBuffer", "src/Heightfield/ShaderChunks", "src/Scripts/Terrain"], function (require, exports, GrassFieldTexture_mjs_1, GrassShaderChunk_mjs_1, Debug_mjs_2, Random_mjs_1, GPUHeightMapBuffer_mjs_2, ShaderChunks_mjs_7, Terrain_mjs_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.grassFieldScriptName = exports.GrassField = exports.quadMatrixIndexes = exports.quad2Matrix = exports.quad1Matrix = void 0;
    Random_mjs_1 = __importDefault(Random_mjs_1);
    Terrain_mjs_1 = __importDefault(Terrain_mjs_1);
    exports.quad1Matrix = [
        2, 2, 1, 2, 0, 2,
        0, 1, 0, 0, 1, 0,
        2, 0, 2, 1, 1, 1
    ];
    exports.quad2Matrix = [
        4, 4, 3, 4, 2, 4, 1, 4,
        0, 4, 0, 3, 0, 2, 0, 1,
        0, 0, 1, 0, 2, 0, 3, 0,
        4, 0, 4, 1, 4, 2, 4, 3
    ];
    exports.quadMatrixIndexes = [
        [4, 3, 2], // 0
        [5, 8, 1], // 1
        [6, 7, 0], // 2
    ];
    const lod1QuadCount = 8;
    const lod2QuadCount = 16;
    const tmpMat = new pc.Mat4();
    class GrassField extends pc.ScriptType {
        constructor() {
            super(...arguments);
            this.transitionLow = 0.31;
            this.transitionHigh = 0.36;
            this._bufferStore = {};
            this._time = 0;
            this._lastDrawPos = new pc.Vec3();
            this._lod1MinMaxStore = [];
            this._lod2MinMaxStore = [];
            this._offsetLod1Arr = [
                0, 0, 0, 0,
                0, 0, 0, 0,
                0, 0, 0, 0,
                0, 0, 0, 0,
            ];
            this._offsetLod2Arr = [
                0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0,
            ];
        }
        get checkRadius() { return this.radius / 2; }
        get patchRadius() { return this.radius / 2; }
        destroy() {
            var _a, _b, _c, _d, _e;
            (_a = this._sharedIndexBuffer) === null || _a === void 0 ? void 0 : _a.destroy();
            (_b = this._sharedVertexBuffer) === null || _b === void 0 ? void 0 : _b.destroy();
            (_c = this._sharedInstancingBuffer) === null || _c === void 0 ? void 0 : _c.destroy();
            if (this._meshInst) {
                (_e = (_d = this._meshInst.instancingData) === null || _d === void 0 ? void 0 : _d.vertexBuffer) === null || _e === void 0 ? void 0 : _e.destroy();
                this._meshInst.destroy();
                if (this._meshInst.mesh) {
                    this._meshInst.mesh.destroy();
                }
                if (this._material) {
                    this._material.destroy();
                }
            }
            if (this.entity.render) {
                this.entity.render.meshInstances = [];
            }
        }
        _initBladesAndEditMode() {
            this._updateGrassMesh(this.app.graphicsDevice, this.patchRadius);
            if (this.painting) {
                this._terrain.addLock();
            }
        }
        postInitialize() {
            var _a, _b;
            const terrainEntity = this.entity.root.findByName('Terrain');
            const terrainScript = (_a = terrainEntity.script) === null || _a === void 0 ? void 0 : _a.get(Terrain_mjs_1.default);
            this._terrain = terrainScript;
            this._cameraEntity = terrainScript.cameraEntity;
            this._dataTexture = new GrassFieldTexture_mjs_1.GrassFieldTexture(this.app.graphicsDevice, this._terrain.width, this._terrain.depth);
            // update set check is visible
            if (((_b = this._cameraEntity.camera) === null || _b === void 0 ? void 0 : _b.frustum.planes) &&
                this._cameraEntity.camera.frustum.planes[0] instanceof pc.Plane) {
                this._checkIsVisible = this._checkIsVisibleNew;
            }
            else {
                this._checkIsVisible = this._checkIsVisibleOld;
            }
            this._initBladesAndEditMode();
            this.on('enable', () => this._initBladesAndEditMode());
            this.on('disable', () => {
                this.destroy();
                this._terrain.freeLock();
            });
            this.on('attr:painting', () => {
                if (this.painting) {
                    this._terrain.addLock();
                }
                else {
                    this._terrain.freeLock();
                }
            });
            this.on('attr:wireframe', () => {
                var _a, _b;
                const primitive = (_b = (_a = this._meshInst) === null || _a === void 0 ? void 0 : _a.mesh) === null || _b === void 0 ? void 0 : _b.primitive;
                if (primitive && primitive[0]) {
                    primitive[0].type = this.wireframe ? pc.PRIMITIVE_LINES : pc.PRIMITIVE_TRIANGLES;
                }
            });
            this.on('attr:castShadow', () => {
                this._meshInst.castShadow = this.castShadow;
            });
            this.on('attr:receiveShadow', () => {
                this._meshInst.receiveShadow = this.receiveShadow;
            });
            this.on('attr:seed', () => this._updateMeshInstancing(this.app.graphicsDevice, this.patchRadius));
            this.on('attr:numBlades', () => this._updateMeshInstancing(this.app.graphicsDevice, this.patchRadius));
            this.on('attr:bladeWidth', () => this._updateMeshInstancing(this.app.graphicsDevice, this.patchRadius));
            this.on('attr:bladeMinHeight', () => this._updateMeshInstancing(this.app.graphicsDevice, this.patchRadius));
            this.on('attr:bladeMaxHeight', () => this._updateMeshInstancing(this.app.graphicsDevice, this.patchRadius));
            this.on('attr:radius', () => this._updateGrassMesh(this.app.graphicsDevice, this.patchRadius));
            this.on('attr:lod0BladeSegs', () => this._updateGrassMesh(this.app.graphicsDevice, this.patchRadius));
            this.on('attr:lod1BladeSegs', () => this._updateGrassMesh(this.app.graphicsDevice, this.patchRadius));
        }
        update(dt) {
            const cameraPos = this._cameraEntity.getPosition();
            const existsTexs = !!this.textures && this.textures.length > 0;
            const color = existsTexs ? this.textures[0].color : pc.Color.WHITE;
            const rand = existsTexs ? this.textures[0].colorRandom : pc.Vec3.ZERO;
            const tex = existsTexs ? this.textures[0].diffuse.resource : null;
            if (!this.freezeDrawPos) {
                const mat = this.entity.getWorldTransform();
                tmpMat.invert(mat);
                tmpMat.transformPoint(cameraPos, this._lastDrawPos);
            }
            this._time += dt;
            this._material.setParameter(GrassShaderChunk_mjs_1.timeParamName, this._time);
            this._material.setParameter(GrassShaderChunk_mjs_1.windIntensityParamName, this.windIntensity);
            this._material.setParameter(GrassShaderChunk_mjs_1.drawPosParamName, [this._lastDrawPos.x, this._lastDrawPos.y, this._lastDrawPos.z]);
            this._material.setParameter('uDiffuseColor', [color.r, color.g, color.b]);
            this._material.setParameter('uDiffuseColorRandom', [rand.x, rand.y, rand.z]);
            this._material.setParameter('uDiffuseTex', tex);
            this._frustum(cameraPos, this._cameraEntity.camera.camera, this.freezeDrawPos);
        }
        updateAabb() {
            const patchesAabb = this._terrain.aabb;
            if (this._meshInst) {
                this._meshInst.mesh.aabb = patchesAabb;
                this._meshInst.aabb = patchesAabb;
                this._meshInst.setCustomAabb(patchesAabb);
            }
        }
        _checkIsVisible(min, max, frustumPlanes) {
            return false;
        }
        _checkIsVisibleOld(min, max, frustumPlanes) {
            for (let p = 0; p < 6; p++) {
                const frustumPlane = frustumPlanes[p];
                const d = Math.max(min.x * frustumPlane[0], max.x * frustumPlane[0])
                    + Math.max(min.y * frustumPlane[1], max.y * frustumPlane[1])
                    + Math.max(min.z * frustumPlane[2], max.z * frustumPlane[2])
                    + frustumPlane[3];
                if (d <= 0) {
                    return false;
                }
            }
            return true;
        }
        _checkIsVisibleNew(min, max, frustumPlanes) {
            for (let p = 0; p < 6; p++) {
                const frustumPlane = frustumPlanes[p];
                const d = Math.max(min.x * frustumPlane.normal.x, max.x * frustumPlane.normal.x)
                    + Math.max(min.y * frustumPlane.normal.y, max.y * frustumPlane.normal.y)
                    + Math.max(min.z * frustumPlane.normal.z, max.z * frustumPlane.normal.z)
                    + frustumPlane.distance;
                if (d <= 0) {
                    return false;
                }
            }
            return true;
        }
        _frustumHelper(count, quadMatrix, quadOffset, minMaxStore, offsetArr, inverse, cameraPos, camera, freeze) {
            const scale = this.entity.getScale();
            const terrainScale = this._terrain.entity.getScale();
            const checkRadius = this.checkRadius * Math.max(scale.x, scale.z);
            const maxHeight = this._terrain.object.maxHeight * terrainScale.y;
            const frustumPlanes = camera.frustum.planes;
            let visibleCount = 0;
            for (let i = 0; i < count; i++) {
                if (!minMaxStore[i])
                    minMaxStore[i] = [new pc.Vec3(), new pc.Vec3(), false];
                if (!freeze) {
                    const quadMatrixX = quadMatrix[i * 2 + 0];
                    const quadMatrixZ = quadMatrix[i * 2 + 1];
                    const localCenterX = this.radius * (quadMatrixX - quadOffset);
                    const localCenterZ = this.radius * (quadMatrixZ - quadOffset);
                    const worldCenterX = cameraPos.x + localCenterX * scale.x;
                    const worldCenterZ = cameraPos.z + localCenterZ * scale.z;
                    minMaxStore[i][0].set(worldCenterX - checkRadius, 0, worldCenterZ - checkRadius);
                    minMaxStore[i][1].set(worldCenterX + checkRadius, maxHeight, worldCenterZ + checkRadius);
                    const visible = this._checkIsVisible(minMaxStore[i][0], minMaxStore[i][1], frustumPlanes);
                    if (visible) {
                        offsetArr[visibleCount * 2 + 0] = localCenterX;
                        offsetArr[visibleCount * 2 + 1] = localCenterZ;
                    }
                    minMaxStore[i][2] = visible;
                }
                const min = minMaxStore[i][0];
                const max = minMaxStore[i][1];
                const vis = minMaxStore[i][2];
                if (freeze) {
                    (0, Debug_mjs_2.drawBox)({ min, max, color: vis ? pc.Color.GREEN : pc.Color.RED });
                }
                visibleCount += Number(vis);
            }
            if (!freeze && inverse && visibleCount > 0) {
                const hiddenCount = count - visibleCount;
                for (let i = visibleCount; i > -1; i--) {
                    const indexIn = (hiddenCount + i) * 2;
                    const indexOr = i * 2;
                    offsetArr[indexIn + 0] = offsetArr[indexOr + 0];
                    offsetArr[indexIn + 1] = offsetArr[indexOr + 1];
                }
            }
            return visibleCount;
        }
        _frustum(cameraPos, camera, freeze) {
            var _a;
            const visibleLod1Count = this._frustumHelper(lod1QuadCount, exports.quad1Matrix, 1, this._lod1MinMaxStore, this._offsetLod1Arr, false, cameraPos, camera, freeze);
            const visibleLod2Count = this._frustumHelper(lod2QuadCount, exports.quad2Matrix, 2, this._lod2MinMaxStore, this._offsetLod2Arr, true, cameraPos, camera, freeze);
            const meshInst = this._meshInst;
            const mesh = meshInst.mesh;
            const primitive = mesh.primitive[0];
            const base = this.lod2BladeSegs * 12 * (lod2QuadCount - visibleLod2Count);
            const count = this.lod0BladeSegs * 12
                + this.lod1BladeSegs * 12 * visibleLod1Count
                + this.lod2BladeSegs * 12 * visibleLod2Count;
            meshInst.setParameter(`${GrassShaderChunk_mjs_1.lod1OffsetXZParamName}[0]`, this._offsetLod1Arr);
            meshInst.setParameter(`${GrassShaderChunk_mjs_1.lod2OffsetXZParamName}[0]`, this._offsetLod2Arr);
            // always true for lod 0
            meshInst.visible = this.autoRender || freeze;
            meshInst.visibleThisFrame = this.autoRender || freeze;
            primitive.base = base;
            primitive.count = count;
            if ((_a = this.app.keyboard) === null || _a === void 0 ? void 0 : _a.wasReleased(pc.KEY_V)) {
                console.log(visibleLod1Count);
                console.log(visibleLod2Count);
                console.log(this._offsetLod1Arr);
                console.log(this._offsetLod2Arr);
            }
        }
        _updateGrassMesh(graphicsDevice, radius) {
            this._updateMeshBuffers(graphicsDevice);
            this._updateMeshMaterial(graphicsDevice);
            this._updateMeshInstance(graphicsDevice);
            this._updateMeshInstancing(graphicsDevice, radius);
            this.updateAabb();
            const meshInstances = [this._meshInst];
            if (this.entity.render) {
                this.entity.render.meshInstances = meshInstances;
            }
            else {
                this.entity.addComponent('render', {
                    meshInstances: meshInstances,
                    castShadows: this.castShadow,
                    receiveShadows: this.receiveShadow,
                    cull: false,
                });
            }
            this._meshInst.castShadow = this.castShadow;
            this._meshInst.receiveShadow = this.receiveShadow;
        }
        _updateMeshInstancing(graphicsDevice, radius) {
            var _a, _b, _c;
            if (this._meshInst) {
                this._updateInstancingBuffer(graphicsDevice, radius);
                (_c = (_b = (_a = this._meshInst) === null || _a === void 0 ? void 0 : _a.instancingData) === null || _b === void 0 ? void 0 : _b.vertexBuffer) === null || _c === void 0 ? void 0 : _c.destroy();
                this._meshInst.setInstancing(this._sharedInstancingBuffer);
            }
        }
        _updateMeshInstance(graphicsDevice) {
            var _a, _b, _c, _d;
            (_c = (_b = (_a = this._meshInst) === null || _a === void 0 ? void 0 : _a.instancingData) === null || _b === void 0 ? void 0 : _b.vertexBuffer) === null || _c === void 0 ? void 0 : _c.destroy();
            (_d = this._meshInst) === null || _d === void 0 ? void 0 : _d.destroy();
            const mesh = new pc.Mesh(graphicsDevice);
            const primitive = mesh.primitive[0];
            mesh.indexBuffer[0] = this._sharedIndexBuffer;
            mesh.vertexBuffer = this._sharedVertexBuffer;
            primitive.type = this.wireframe ? pc.PRIMITIVE_LINES : pc.PRIMITIVE_TRIANGLES;
            primitive.base = 0;
            primitive.count = this._bufferStore.index.length;
            primitive.indexed = true;
            this._meshInst = new pc.MeshInstance(mesh, this._material, this.entity);
        }
        /**
        * Sets up indices for single blade mesh.
        * @param id array of indices
        * @param vc1 vertex start offset for front side of blade
        * @param vc2 vertex start offset for back side of blade
        * @param i index offset
        */
        _initBladeIndices(id, vc1, vc2, i, bladeSegs) {
            let seg;
            // blade front side
            for (seg = 0; seg < bladeSegs; ++seg) {
                id[i++] = vc1 + 0; // tri 1
                id[i++] = vc1 + 1;
                id[i++] = vc1 + 2;
                id[i++] = vc1 + 2; // tri 2
                id[i++] = vc1 + 1;
                id[i++] = vc1 + 3;
                vc1 += 2;
            }
            // blade back side
            for (seg = 0; seg < bladeSegs; ++seg) {
                id[i++] = vc2 + 2; // tri 1
                id[i++] = vc2 + 1;
                id[i++] = vc2 + 0;
                id[i++] = vc2 + 3; // tri 2
                id[i++] = vc2 + 1;
                id[i++] = vc2 + 2;
                vc2 += 2;
            }
            return i;
        }
        /** Set up indices for 1 blade */
        _initBladeIndexVerts(vindex) {
            for (let i = 0; i < vindex.length; ++i) {
                vindex[i] = i;
            }
        }
        _initBladeOffsetShapeVerts(offsetShape, radius, numBlades) {
            const normalizeValue = offsetShape instanceof Uint16Array ? pc.FloatPacking.float2Half : (x) => x;
            const random = new Random_mjs_1.default(this.seed);
            const heightFactor = this.bladeMaxHeight - this.bladeMinHeight;
            //let noise = 0;
            for (let i = 0; i < numBlades; ++i) {
                //noise = Math.abs(simplex(offsetShape[i * 8 + 0] * 0.03, offsetShape[i * 8 + 2] * 0.03));
                //noise = noise * noise * noise;
                //noise *= 5.0;
                const x = random.nrand() * radius;
                const y = random.nrand() * radius;
                const z = 0;
                const rotation = Math.PI * 2.0 * random.random();
                const width = this.bladeWidth + random.random() * this.bladeWidth * 0.5;
                const height = this.bladeMinHeight + Math.pow(random.random(), 4.0) * heightFactor;
                const lean = 0.01 + random.random() * 0.3;
                const curve = 0.05 + random.random() * 0.3;
                offsetShape[i * 8 + 0] = normalizeValue(x); // x
                offsetShape[i * 8 + 1] = normalizeValue(y); // y
                offsetShape[i * 8 + 2] = normalizeValue(z); // z
                offsetShape[i * 8 + 3] = normalizeValue(rotation); // rot
                offsetShape[i * 8 + 4] = normalizeValue(width); // width
                offsetShape[i * 8 + 5] = normalizeValue(height); //+ noise; //+ height
                offsetShape[i * 8 + 6] = normalizeValue(lean); // lean
                offsetShape[i * 8 + 7] = normalizeValue(curve); // curve
            }
        }
        _updateInstancingBuffer(graphicsDevice, radius) {
            var _a;
            (_a = this._sharedInstancingBuffer) === null || _a === void 0 ? void 0 : _a.destroy();
            const lod0PatchCount = 1;
            const lod1PatchCount = 8;
            const lod2PatchCount = 16;
            const patchNumBlades = (this.numBlades / (lod0PatchCount + lod1PatchCount + lod2PatchCount)) | 0;
            const offsetAndShapeLength = patchNumBlades * 8;
            if (this._bufferStore.offsetAndShape === undefined ||
                this._bufferStore.offsetAndShape.length !== offsetAndShapeLength) {
                this._bufferStore.offsetAndShape = new Float32Array(offsetAndShapeLength);
            }
            this._initBladeOffsetShapeVerts(this._bufferStore.offsetAndShape, radius, patchNumBlades);
            const type = this._bufferStore.offsetAndShape instanceof Uint16Array ? pc.TYPE_FLOAT16 : pc.TYPE_FLOAT32;
            const instancingFormat = new pc.VertexFormat(graphicsDevice, [
                {
                    semantic: pc.SEMANTIC_ATTR10,
                    components: 4,
                    type: type,
                    normalize: false,
                    asInt: false
                },
                {
                    semantic: pc.SEMANTIC_ATTR11,
                    components: 4,
                    type: type,
                    normalize: false,
                    asInt: false,
                },
            ]);
            this._sharedInstancingBuffer = new pc.VertexBuffer(graphicsDevice, instancingFormat, patchNumBlades, {
                usage: pc.BUFFER_STATIC,
                data: this._bufferStore.offsetAndShape,
                storage: false,
            });
        }
        _getVertexFormat(graphicsDevice) {
            return new pc.VertexFormat(graphicsDevice, [{
                    semantic: pc.SEMANTIC_POSITION,
                    components: 1,
                    type: pc.TYPE_FLOAT32,
                    normalize: false,
                    asInt: false
                }]);
        }
        _updateMeshBuffers(graphicsDevice) {
            var _a, _b;
            (_a = this._sharedIndexBuffer) === null || _a === void 0 ? void 0 : _a.destroy();
            (_b = this._sharedVertexBuffer) === null || _b === void 0 ? void 0 : _b.destroy();
            const lod0VC = (this.lod0BladeSegs + 1) * 2;
            const lod1VC = (this.lod1BladeSegs + 1) * 2;
            const lod2VC = (this.lod2BladeSegs + 1) * 2;
            const indexLength = this.lod0BladeSegs * 12 + this.lod1BladeSegs * 12 * lod1QuadCount + this.lod2BladeSegs * 12 * lod2QuadCount;
            const indexVertsLength = lod0VC * 2 + lod1VC * 2 * lod1QuadCount + lod2VC * 2 * lod2QuadCount;
            if (this._bufferStore.index === undefined ||
                this._bufferStore.index.length !== indexLength) {
                this._bufferStore.index = new Uint16Array(indexLength);
                let index = 0;
                for (let i = 0; i < lod2QuadCount; i++) {
                    const lod2VC1 = i * lod2VC * 2;
                    const lod2VC2 = lod2VC1 + lod2VC;
                    index = this._initBladeIndices(this._bufferStore.index, lod2VC1, lod2VC2, index, this.lod2BladeSegs);
                }
                const lod0VC1 = lod2QuadCount * lod2VC * 2;
                const lod0VC2 = lod0VC1 + lod0VC;
                index = this._initBladeIndices(this._bufferStore.index, lod0VC1, lod0VC2, index, this.lod0BladeSegs);
                for (let i = 0; i < lod1QuadCount; i++) {
                    const lod1VC1 = lod0VC2 + lod0VC + i * lod1VC * 2;
                    const lod1VC2 = lod1VC1 + lod1VC;
                    index = this._initBladeIndices(this._bufferStore.index, lod1VC1, lod1VC2, index, this.lod1BladeSegs);
                }
            }
            if (this._bufferStore.indexVerts === undefined ||
                this._bufferStore.indexVerts.length !== indexVertsLength) {
                this._bufferStore.indexVerts = new Float32Array(indexVertsLength);
                this._initBladeIndexVerts(this._bufferStore.indexVerts);
            }
            this._sharedIndexBuffer = new pc.IndexBuffer(graphicsDevice, pc.INDEXFORMAT_UINT16, this._bufferStore.index.length, pc.BUFFER_STATIC, this._bufferStore.index, { storage: false });
            this._sharedVertexBuffer = new pc.VertexBuffer(graphicsDevice, this._getVertexFormat(graphicsDevice), this._bufferStore.indexVerts.length, {
                usage: pc.BUFFER_STATIC,
                data: this._bufferStore.indexVerts,
                storage: false,
            });
        }
        _updateMeshMaterial(graphicsDevice) {
            var _a, _b, _c;
            (_a = this._material) === null || _a === void 0 ? void 0 : _a.destroy();
            this._material = new pc.StandardMaterial();
            this._material.name = "GrassFieldMaterial";
            /*
            this._material.depthTest = false;
            this._material.depthWrite = true;
            this._material.blendType = pc.BLEND_NONE;
            this._material.alphaTest = 0;
            this._material.alphaWrite = false;
            this._material.alphaFade = false;
            this._material.alphaToCoverage = false;
            */
            const terrain = this._terrain.object;
            const heightMap = this._terrain.heightMapTexture;
            const terrainScale = this._terrain.entity.getScale();
            this._material.setAttribute(GrassShaderChunk_mjs_1.vindexAttrName, pc.SEMANTIC_POSITION);
            this._material.setAttribute(GrassShaderChunk_mjs_1.offsetAttrName, pc.SEMANTIC_ATTR10);
            this._material.setAttribute(GrassShaderChunk_mjs_1.shapeAttrName, pc.SEMANTIC_ATTR11);
            this._material.setParameter('uDataMap', this._dataTexture.texture);
            this._material.setParameter(ShaderChunks_mjs_7.heightMapParamName, heightMap);
            this._material.setParameter(GrassShaderChunk_mjs_1.fieldScaleParamName, [terrainScale.x, terrainScale.y, terrainScale.z]);
            this._material.setParameter(ShaderChunks_mjs_7.maxHeightParamName, terrain.maxHeight);
            this._material.setParameter(`${GrassShaderChunk_mjs_1.lod1OffsetXZParamName}[0]`, this._offsetLod1Arr);
            this._material.setParameter(`${GrassShaderChunk_mjs_1.lod2OffsetXZParamName}[0]`, this._offsetLod2Arr);
            this._material.setParameter(GrassShaderChunk_mjs_1.drawPosParamName, [0, 0, 0]);
            this._material.setParameter(GrassShaderChunk_mjs_1.timeParamName, this._time);
            this._material.setParameter(GrassShaderChunk_mjs_1.windIntensityParamName, 0);
            const hmFormat = (0, GPUHeightMapBuffer_mjs_2.getHeightMapFormat)(graphicsDevice, terrain.heightMap);
            const pcVersion = `v${pc.version[0]}`;
            const chunksStore = (0, GrassShaderChunk_mjs_1.getGrassShaderChunks)({
                width: terrain.width,
                depth: terrain.depth,
                heightMapChunkSize: terrain.heightMap.dataChunkSize,
                heightMapFormat: hmFormat,
                bladeMaxHeight: this.bladeMaxHeight * 1.5,
                lod0BladeSegs: this.lod0BladeSegs,
                lod1BladeSegs: this.lod1BladeSegs,
                lod2BladeSegs: this.lod2BladeSegs,
                radius: this.radius,
                transitionLow: this.transitionLow,
                transitionHigh: this.transitionHigh,
                engineVersion: pcVersion,
            });
            const chunkNames = Object.keys(chunksStore);
            const shaderChunks = (_c = (_b = this._material).getShaderChunks) === null || _c === void 0 ? void 0 : _c.call(_b, pc.SHADERLANGUAGE_GLSL);
            if (shaderChunks) {
                for (let chunkName of chunkNames) {
                    shaderChunks.set(chunkName, chunksStore[chunkName]);
                }
                this._material.shaderChunksVersion = pc.CHUNKAPI_1_70;
            }
            else {
                const chunks = this._material.chunks;
                chunks.APIVersion = pc.CHUNKAPI_1_70;
                for (let chunkName of chunkNames) {
                    chunks[chunkName] = chunksStore[chunkName];
                }
            }
            this._material.update();
        }
    }
    exports.GrassField = GrassField;
    exports.default = GrassField;
    exports.grassFieldScriptName = "grassField";
    pc.registerScript(GrassField, exports.grassFieldScriptName);
    GrassField.attributes.add("painting", { type: "boolean", default: false });
    GrassField.attributes.add("castShadow", { type: "boolean", default: true, });
    GrassField.attributes.add("receiveShadow", { type: "boolean", default: true, });
    GrassField.attributes.add("wireframe", { type: "boolean", default: false });
    GrassField.attributes.add("freezeDrawPos", { type: "boolean", default: false });
    GrassField.attributes.add("autoRender", { type: "boolean", default: true });
    GrassField.attributes.add("seed", { type: "number", default: 53464546455, min: 1, step: 1, precision: 0 });
    GrassField.attributes.add("windIntensity", { type: "number", default: 0, min: -30, max: 30 });
    GrassField.attributes.add("numBlades", { type: "number", default: 4000, min: 0, max: 8000000, step: 1, precision: 0 });
    GrassField.attributes.add("radius", { type: "number", default: 80, min: 1, max: 10000 });
    GrassField.attributes.add("lod0BladeSegs", { type: "number", default: 3, min: 1, max: 10, step: 1, precision: 0 });
    GrassField.attributes.add("lod1BladeSegs", { type: "number", default: 2, min: 1, max: 10, step: 1, precision: 0 });
    GrassField.attributes.add("lod2BladeSegs", { type: "number", default: 1, min: 1, max: 10, step: 1, precision: 0 });
    GrassField.attributes.add("bladeWidth", { type: "number", default: 0.04, min: 0.01, max: 5 });
    GrassField.attributes.add("bladeMinHeight", { type: "number", default: 0.25, min: 0.01, max: 10 });
    GrassField.attributes.add("bladeMaxHeight", { type: "number", default: 1, min: 0.01, max: 10 });
    GrassField.attributes.add("textures", {
        type: "json",
        array: true,
        schema: [
            {
                name: "name",
                title: "Name",
                type: "string",
            },
            {
                name: "diffuse",
                title: "Diffuse",
                type: "asset",
                assetType: "texture",
            },
            {
                name: "color",
                title: "Color",
                type: "rgb"
            },
            {
                name: "colorRandom",
                title: "Color Random",
                type: "vec3",
                default: [0.01, 0.01, 0.01]
            }
        ]
    });
});
;
(() => {
    if (window.___amd___requireResolver) {
        window.___amd___requireResolver();
    }
})();
//# sourceMappingURL=data:application/json;base64,